------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm LEVEL 1 PASS 3
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; VCS.H
      4  9000 ????						; Version 1.05, 13/November/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_VCS =	105
      7  9000 ????
      8  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines hardware registers and memory mapping for the
     13  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  9000 ????						; with your views.  Please contribute, if you think you can improve this
     21  9000 ????						; file!
     22  9000 ????						;
     23  9000 ????						; Latest Revisions...
     24  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  9000 ????						;			    This will allow conditional code to verify VCS.H being
     27  9000 ????						;			    used for code assembly.
     28  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  9000 ????						;			 readability issue, and binary compatibility with disassembled
     32  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  9000 ????						;			 which was broken by the use of segments in this file, as
     35  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  9000 ????						;						   it is safe to leave it undefined, and the base address will
     40  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  9000 ????						;			  - register definitions are now generated through assignment
     43  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  9000 ????						;			    address architecture.
     45  9000 ????						; 1.0	22/MAR/2003		Initial release
     46  9000 ????
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????
     50  9000 ????						; TIA_BASE_ADDRESS
     51  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  9000 ????						; Normally 0, the base address should (externally, before including this file)
     53  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  9000 ????						; < $40 as a bankswitch.
     56  9000 ????
     57  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  9000 ????			  -TIA_BASE_ADDRESS =	0
     59  9000 ????				      ENDIF
     60  9000 ????
     61  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  9000 ????						; *OR* by declaring the label before including this file, eg:
     64  9000 ????						; TIA_BASE_ADDRESS = $40
     65  9000 ????						;   include "vcs.h"
     66  9000 ????
     67  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  9000 ????						; for the mirrored ROM hardware registers.
     70  9000 ????
     71  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  9000 ????
     75  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  9000 ????				      ENDIF
     78  9000 ????
     79  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  9000 ????				      ENDIF
     82  9000 ????
     83  9000 ????						;-------------------------------------------------------------------------------
     84  9000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  9000 ????				      SEG
    201  9000 ????
    202  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????						; MACRO.H
      4  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  9000 ????
      6  9000 ????	       00 69	   VERSION_MACRO =	105
      7  9000 ????
      8  9000 ????						;
      9  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  9000 ????						;
     12  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  9000 ????						; It is distributed as a companion machine-specific support package
     14  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  9000 ????						; available at at http://www.atari2600.org/dasm
     16  9000 ????						;
     17  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  9000 ????						; contents, or would like to add something, please write to me
     19  9000 ????						; (atari2600@taswegian.com) with your contribution.
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						;
     23  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  9000 ????						;
     28  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  9000 ????						;
     30  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  9000 ????						;			   (standardised macro for vertical synch code)
     32  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  9000 ????						; 1.0	22/MAR/2003		Initial release
     35  9000 ????
     36  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  9000 ????						;   registers and require them to be defined first).
     41  9000 ????
     42  9000 ????						; Available macros...
     43  9000 ????						;   SLEEP n		 - sleep for n cycles
     44  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  9000 ????
     48  9000 ????						;-------------------------------------------------------------------------------
     49  9000 ????						; SLEEP duration
     50  9000 ????						; Original author: Thomas Jentzsch
     51  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  9000 ????						; useful for code where precise timing is required.
     53  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  9000 ????
     57  9000 ????				      MAC	sleep
     58  9000 ????			   .CYCLES    SET	{1}
     59  9000 ????
     60  9000 ????				      IF	.CYCLES < 2
     61  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  9000 ????				      ERR
     63  9000 ????				      ENDIF
     64  9000 ????
     65  9000 ????				      IF	.CYCLES & 1
     66  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  9000 ????				      nop	0
     68  9000 ????				      ELSE
     69  9000 ????				      bit	VSYNC
     70  9000 ????				      ENDIF
     71  9000 ????			   .CYCLES    SET	.CYCLES - 3
     72  9000 ????				      ENDIF
     73  9000 ????
     74  9000 ????				      REPEAT	.CYCLES / 2
     75  9000 ????				      nop
     76  9000 ????				      REPEND
     77  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  9000 ????
     79  9000 ????						;-------------------------------------------------------------------------------
     80  9000 ????						; VERTICAL_SYNC
     81  9000 ????						; Original author: Manuel Polik
     82  9000 ????						; Inserts the code required for a proper 3 scannline 
     83  9000 ????						; vertical sync sequence
     84  9000 ????						;
     85  9000 ????						; Note: Alters the accumulator
     86  9000 ????						;
     87  9000 ????						; IN:
     88  9000 ????						; OUT: A = 1
     89  9000 ????
     90  9000 ????				      MAC	vertical_sync
     91  9000 ????				      LDA	#$02	; A = VSYNC enable
     92  9000 ????				      STA	WSYNC	; Finish current line
     93  9000 ????				      STA	VSYNC	; Start vertical sync
     94  9000 ????				      STA	WSYNC	; 1st line vertical sync
     95  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  9000 ????				      LSR		; A = VSYNC disable
     97  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  9000 ????				      STA	VSYNC	; Stop vertical sync
     99  9000 ????				      ENDM
    100  9000 ????
    101  9000 ????						;-------------------------------------------------------------------------------
    102  9000 ????						; CLEAN_START
    103  9000 ????						; Original author: Andrew Davie
    104  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  9000 ????						; Use as very first section of code on boot (ie: at reset)
    108  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  9000 ????
    110  9000 ????				      MAC	clean_start
    111  9000 ????				      sei
    112  9000 ????				      cld
    113  9000 ????
    114  9000 ????				      ldx	#0
    115  9000 ????				      txa
    116  9000 ????				      tay
    117  9000 ????			   .CLEAR_STACK dex
    118  9000 ????				      txs
    119  9000 ????				      pha
    120  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  9000 ????
    122  9000 ????				      ENDM
    123  9000 ????
    124  9000 ????						;-------------------------------------------------------
    125  9000 ????						; SET_POINTER
    126  9000 ????						; Original author: Manuel Rotschkar
    127  9000 ????						;
    128  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  9000 ????						;
    130  9000 ????						; Usage: SET_POINTER pointer, address
    131  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  9000 ????						;
    133  9000 ????						; Note: Alters the accumulator, NZ flags
    134  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  9000 ????						; IN 2: absolute address
    136  9000 ????
    137  9000 ????				      MAC	set_pointer
    138  9000 ????			   .POINTER   SET	{1}
    139  9000 ????			   .ADDRESS   SET	{2}
    140  9000 ????
    141  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  9000 ????				      STA	.POINTER	; Store in pointer
    143  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  9000 ????
    146  9000 ????				      ENDM
    147  9000 ????
    148  9000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 04	   MASKS_length =	.skipL0141-MASKS
      4  9000 ????
      5  9000 ????	       00 20	   bscode_length =	32
      6  9000 ????	       00 e5	   highScore3 =	r
      7  9000 ????
      8  9000 ????	       00 e4	   highScore2 =	q
      9  9000 ????
     10  9000 ????	       00 e3	   highScore1 =	p
     11  9000 ????
     12  9000 ????	       00 95	   score3     =	score + 2
     13  9000 ????
     14  9000 ????	       00 94	   score2     =	score + 1
     15  9000 ????
     16  9000 ????	       00 93	   score1     =	score
     17  9000 ????
     18  9000 ????	       00 e2	   bmp_48x1_2_index =	o
     19  9000 ????
     20  9000 ????	       00 e7	   bmp_48x1_3_color =	t
     21  9000 ????
     22  9000 ????	       00 e8	   bmp_48x1_2_color =	u
     23  9000 ????
     24  9000 ????	       00 e1	   shaking_effect =	n
     25  9000 ????
     26  9000 ????	       00 e0	   shakescreen =	m
     27  9000 ????
     28  9000 ????	       00 d9	   crashSound =	f
     29  9000 ????
     30  9000 ????	       00 d9	   eatSound   =	f
     31  9000 ????
     32  9000 ????	       00 a4	   directions =	var0
     33  9000 ????
     34  9000 ????	       00 db	   tailStart  =	h
     35  9000 ????
     36  9000 ????	       00 de	   tailEnd    =	k
     37  9000 ????
     38  9000 ????	       00 dd	   tailY      =	j
     39  9000 ????
     40  9000 ????	       00 dc	   tailX      =	i
     41  9000 ????
     42  9000 ????	       00 df	   length     =	l
     43  9000 ????
     44  9000 ????	       00 da	   grown      =	g
     45  9000 ????
     46  9000 ????	       00 d7	   headDir    =	d
     47  9000 ????
     48  9000 ????	       00 ec	   headY      =	y
     49  9000 ????
     50  9000 ????	       00 eb	   headX      =	x
     51  9000 ????
     52  9000 ????	       00 d5	   foodY      =	b
     53  9000 ????
     54  9000 ????	       00 d4	   foodX      =	a
     55  9000 ????
     56  9000 ????	       00 d6	   counter    =	c
     57  9000 ????
     58  9000 ????	       00 e6	   speed      =	s
     59  9000 ????
     60  9000 ????	       00 d6	   seconds    =	c
     61  9000 ????
     62  9000 ????	       00 e6	   frames     =	s
     63  9000 ????
     64  9000 ????	       00 ed	   bits3_TitleSoundFlag =	z
     65  9000 ????
     66  9000 ????	       00 ed	   bits2_GameOverFlag =	z
     67  9000 ????
     68  9000 ????	       00 ed	   bits1_DebounceFireButton =	z
     69  9000 ????
     70  9000 ????	       00 ed	   bits0_DebounceReset =	z
     71  9000 ????
     72  9000 ????	       00 ed	   bits       =	z
     73  9000 ????
     74  9000 ????	       00 c0	   SNAKE_MAX_LEN =	192
     75  9000 ????
     76  9000 ????	       00 96	   TITLE2_PAL_COLOR =	$96
     77  9000 ????
     78  9000 ????	       00 3a	   TITLE1_PAL_COLOR =	$3A
     79  9000 ????
     80  9000 ????	       00 00	   GAMEOVER_PAL_BACKG =	$00
     81  9000 ????
     82  9000 ????	       00 6e	   GAMEOVER_PAL_FOREG =	$6E
     83  9000 ????
     84  9000 ????	       00 6a	   FOOD_PAL_COLOR =	$6A
     85  9000 ????
     86  9000 ????	       00 2c	   SCORE_PAL_COLOR =	$2C
     87  9000 ????
     88  9000 ????	       00 00	   BACKG_PAL_COLOR =	$00
     89  9000 ????
     90  9000 ????	       00 5a	   FOREG_PAL_COLOR =	$5A
     91  9000 ????
     92  9000 ????	       00 96	   TITLE2_NTSC_COLOR =	$96
     93  9000 ????
     94  9000 ????	       00 da	   TITLE1_NTSC_COLOR =	$DA
     95  9000 ????
     96  9000 ????	       00 00	   GAMEOVER_NTSC_BACKG =	$00
     97  9000 ????
     98  9000 ????	       00 4e	   GAMEOVER_NTSC_FOREG =	$4E
     99  9000 ????
    100  9000 ????	       00 4a	   FOOD_NTSC_COLOR =	$4A
    101  9000 ????
    102  9000 ????	       00 2c	   SCORE_NTSC_COLOR =	$2C
    103  9000 ????
    104  9000 ????	       00 00	   BACKG_NTSC_COLOR =	$00
    105  9000 ????
    106  9000 ????	       00 ca	   FOREG_NTSC_COLOR =	$CA
    107  9000 ????
    108  9000 ????	       00 ff	   WEST       =	%11111111
    109  9000 ????
    110  9000 ????	       00 aa	   SOUTH      =	%10101010
    111  9000 ????
    112  9000 ????	       00 55	   EAST       =	%01010101
    113  9000 ????
    114  9000 ????	       00 00	   NORTH      =	%00000000
    115  9000 ????
    116  9000 ????	       00 04	   fontstyle  =	4
    117  9000 ????
    118  9000 ????	       00 04	   pfrowheight =	4
    119  9000 ????
    120  9000 ????	       00 18	   pfres      =	24
    121  9000 ????
    122  9000 ????	       00 01	   no_blank_lines =	1
    123  9000 ????	       00 01	   superchip  =	1
    124  9000 ????	       00 07	   bs_mask    =	7
    125  9000 ????	       00 20	   bankswitch =	32
    126  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    127  9000 ????	       00 2b	   vblank_time =	43
    128  9000 ????	       00 25	   overscan_time =	37
------- FILE 2600basic.h
      7  9000 ????
      8  9000 ????	       00 80	   player0x   =	$80
      9  9000 ????	       00 81	   player1x   =	$81
     10  9000 ????	       00 82	   missile0x  =	$82
     11  9000 ????	       00 83	   missile1x  =	$83
     12  9000 ????	       00 84	   ballx      =	$84
     13  9000 ????
     14  9000 ????	       00 85	   objecty    =	$85
     15  9000 ????	       00 85	   player0y   =	$85
     16  9000 ????	       00 86	   player1y   =	$86
     17  9000 ????	       00 87	   missile1height =	$87
     18  9000 ????	       00 88	   missile1y  =	$88
     19  9000 ????	       00 89	   bally      =	$89
     20  9000 ????
     21  9000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  9000 ????
     23  9000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  9000 ????	       00 8a	   player0pointerlo =	$8A
     25  9000 ????	       00 8b	   player0pointerhi =	$8B
     26  9000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  9000 ????	       00 8c	   player1pointerlo =	$8C
     28  9000 ????	       00 8d	   player1pointerhi =	$8D
     29  9000 ????
     30  9000 ????	       00 8e	   player0height =	$8E
     31  9000 ????	       00 8f	   player1height =	$8F
     32  9000 ????	       00 90	   missile0height =	$90
     33  9000 ????	       00 91	   missile0y  =	$91
     34  9000 ????	       00 92	   ballheight =	$92
     35  9000 ????
     36  9000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  9000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  9000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  9000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  9000 ????
     41  9000 ????	       00 93	   score      =	$93	; $93-$95
     42  9000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  9000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  9000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  9000 ????	       00 9e	   temp3      =	$9E
     46  9000 ????	       00 9f	   temp4      =	$9F
     47  9000 ????	       00 a0	   temp5      =	$A0
     48  9000 ????	       00 a1	   temp6      =	$A1
     49  9000 ????
     50  9000 ????	       00 a2	   rand       =	$A2
     51  9000 ????	       00 a3	   scorecolor =	$A3
     52  9000 ????
     53  9000 ????	       00 a4	   var0       =	$A4
     54  9000 ????	       00 a5	   var1       =	$A5
     55  9000 ????	       00 a6	   var2       =	$A6
     56  9000 ????	       00 a7	   var3       =	$A7
     57  9000 ????	       00 a8	   var4       =	$A8
     58  9000 ????	       00 a9	   var5       =	$A9
     59  9000 ????	       00 aa	   var6       =	$AA
     60  9000 ????	       00 ab	   var7       =	$AB
     61  9000 ????	       00 ac	   var8       =	$AC
     62  9000 ????	       00 ad	   var9       =	$AD
     63  9000 ????	       00 ae	   var10      =	$AE
     64  9000 ????	       00 af	   var11      =	$AF
     65  9000 ????	       00 b0	   var12      =	$B0
     66  9000 ????	       00 b1	   var13      =	$B1
     67  9000 ????	       00 b2	   var14      =	$B2
     68  9000 ????	       00 b3	   var15      =	$B3
     69  9000 ????	       00 b4	   var16      =	$B4
     70  9000 ????	       00 b5	   var17      =	$B5
     71  9000 ????	       00 b6	   var18      =	$B6
     72  9000 ????	       00 b7	   var19      =	$B7
     73  9000 ????	       00 b8	   var20      =	$B8
     74  9000 ????	       00 b9	   var21      =	$B9
     75  9000 ????	       00 ba	   var22      =	$BA
     76  9000 ????	       00 bb	   var23      =	$BB
     77  9000 ????	       00 bc	   var24      =	$BC
     78  9000 ????	       00 bd	   var25      =	$BD
     79  9000 ????	       00 be	   var26      =	$BE
     80  9000 ????	       00 bf	   var27      =	$BF
     81  9000 ????	       00 c0	   var28      =	$C0
     82  9000 ????	       00 c1	   var29      =	$C1
     83  9000 ????	       00 c2	   var30      =	$C2
     84  9000 ????	       00 c3	   var31      =	$C3
     85  9000 ????	       00 c4	   var32      =	$C4
     86  9000 ????	       00 c5	   var33      =	$C5
     87  9000 ????	       00 c6	   var34      =	$C6
     88  9000 ????	       00 c7	   var35      =	$C7
     89  9000 ????	       00 c8	   var36      =	$C8
     90  9000 ????	       00 c9	   var37      =	$C9
     91  9000 ????	       00 ca	   var38      =	$CA
     92  9000 ????	       00 cb	   var39      =	$CB
     93  9000 ????	       00 cc	   var40      =	$CC
     94  9000 ????	       00 cd	   var41      =	$CD
     95  9000 ????	       00 ce	   var42      =	$CE
     96  9000 ????	       00 cf	   var43      =	$CF
     97  9000 ????	       00 d0	   var44      =	$D0
     98  9000 ????	       00 d1	   var45      =	$D1
     99  9000 ????	       00 d2	   var46      =	$D2
    100  9000 ????	       00 d3	   var47      =	$D3
    101  9000 ????
    102  9000 ????	       00 d4	   A	      =	$d4
    103  9000 ????	       00 d4	   a	      =	$d4
    104  9000 ????	       00 d5	   B	      =	$d5
    105  9000 ????	       00 d5	   b	      =	$d5
    106  9000 ????	       00 d6	   C	      =	$d6
    107  9000 ????	       00 d6	   c	      =	$d6
    108  9000 ????	       00 d7	   D	      =	$d7
    109  9000 ????	       00 d7	   d	      =	$d7
    110  9000 ????	       00 d8	   E	      =	$d8
    111  9000 ????	       00 d8	   e	      =	$d8
    112  9000 ????	       00 d9	   F	      =	$d9
    113  9000 ????	       00 d9	   f	      =	$d9
    114  9000 ????	       00 da	   G	      =	$da
    115  9000 ????	       00 da	   g	      =	$da
    116  9000 ????	       00 db	   H	      =	$db
    117  9000 ????	       00 db	   h	      =	$db
    118  9000 ????	       00 dc	   I	      =	$dc
    119  9000 ????	       00 dc	   i	      =	$dc
    120  9000 ????	       00 dd	   J	      =	$dd
    121  9000 ????	       00 dd	   j	      =	$dd
    122  9000 ????	       00 de	   K	      =	$de
    123  9000 ????	       00 de	   k	      =	$de
    124  9000 ????	       00 df	   L	      =	$df
    125  9000 ????	       00 df	   l	      =	$df
    126  9000 ????	       00 e0	   M	      =	$e0
    127  9000 ????	       00 e0	   m	      =	$e0
    128  9000 ????	       00 e1	   N	      =	$e1
    129  9000 ????	       00 e1	   n	      =	$e1
    130  9000 ????	       00 e2	   O	      =	$e2
    131  9000 ????	       00 e2	   o	      =	$e2
    132  9000 ????	       00 e3	   P	      =	$e3
    133  9000 ????	       00 e3	   p	      =	$e3
    134  9000 ????	       00 e4	   Q	      =	$e4
    135  9000 ????	       00 e4	   q	      =	$e4
    136  9000 ????	       00 e5	   R	      =	$e5
    137  9000 ????	       00 e5	   r	      =	$e5
    138  9000 ????	       00 e6	   S	      =	$e6
    139  9000 ????	       00 e6	   s	      =	$e6
    140  9000 ????	       00 e7	   T	      =	$e7
    141  9000 ????	       00 e7	   t	      =	$e7
    142  9000 ????	       00 e8	   U	      =	$e8
    143  9000 ????	       00 e8	   u	      =	$e8
    144  9000 ????	       00 e9	   V	      =	$e9
    145  9000 ????	       00 e9	   v	      =	$e9
    146  9000 ????	       00 ea	   W	      =	$ea
    147  9000 ????	       00 ea	   w	      =	$ea
    148  9000 ????	       00 eb	   X	      =	$eb
    149  9000 ????	       00 eb	   x	      =	$eb
    150  9000 ????	       00 ec	   Y	      =	$ec
    151  9000 ????	       00 ec	   y	      =	$ec
    152  9000 ????	       00 ed	   Z	      =	$ed
    153  9000 ????	       00 ed	   z	      =	$ed
    154  9000 ????
    155  9000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  9000 ????	       00 ef	   playfieldpos =	$ef
    157  9000 ????
    158  9000 ????						; available for other uses, or if unused, provide more stack space
    159  9000 ????
    160  9000 ????	       00 f0	   aux1       =	$f0
    161  9000 ????	       00 f1	   aux2       =	$f1
    162  9000 ????	       00 f2	   aux3       =	$f2
    163  9000 ????	       00 f3	   aux4       =	$f3
    164  9000 ????	       00 f4	   aux5       =	$f4
    165  9000 ????	       00 f5	   aux6       =	$f5
    166  9000 ????
    167  9000 ????						; playfield color/height pointers
    168  9000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  9000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  9000 ????						; the above pointers are the same because if color and height are both used together,
    171  9000 ????						; they must used absolute indexed and cannot use pointers
    172  9000 ????
    173  9000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  9000 ????						; upper 3 bits of $f2 contain the number of lives
    175  9000 ????	       00 f4	   lifecolor  =	$f4
    176  9000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  9000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  9000 ????
    179  9000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  9000 ????	       00 f3	   pfscore2   =	$f3
    181  9000 ????	       00 f4	   pfscorecolor =	$f4
    182  9000 ????
    183  9000 ????	       00 f6	   stack1     =	$f6
    184  9000 ????	       00 f7	   stack2     =	$f7
    185  9000 ????	       00 f8	   stack3     =	$f8
    186  9000 ????	       00 f9	   stack4     =	$f9
    187  9000 ????						; the stack bytes above may be used in the kernel
    188  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  9000 ????
    190  9000 ????				      MAC	return
    191  9000 ????				      ifnconst	bankswitch
    192  9000 ????				      rts
    193  9000 ????				      else
    194  9000 ????				      jmp	BS_return
    195  9000 ????				      endif
    196  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  9000 ????
    198  9000 ????				      ifconst	superchip
    199  9000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  9000 ????				      include	superchip.h
      1  9000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  9000 ????
      3  9000 ????	       f0 00	   write_RAM  =	$F000
      4  9000 ????	       f0 00	   wRAM       =	$F000
      5  9000 ????	       f0 00	   w000       =	$F000
      6  9000 ????	       f0 01	   w001       =	$F001
      7  9000 ????	       f0 02	   w002       =	$F002
      8  9000 ????	       f0 03	   w003       =	$F003
      9  9000 ????	       f0 04	   w004       =	$F004
     10  9000 ????	       f0 05	   w005       =	$F005
     11  9000 ????	       f0 06	   w006       =	$F006
     12  9000 ????	       f0 07	   w007       =	$F007
     13  9000 ????	       f0 08	   w008       =	$F008
     14  9000 ????	       f0 09	   w009       =	$F009
     15  9000 ????	       f0 0a	   w010       =	$F00A
     16  9000 ????	       f0 0b	   w011       =	$F00B
     17  9000 ????	       f0 0c	   w012       =	$F00C
     18  9000 ????	       f0 0d	   w013       =	$F00D
     19  9000 ????	       f0 0e	   w014       =	$F00E
     20  9000 ????	       f0 0f	   w015       =	$F00F
     21  9000 ????	       f0 10	   w016       =	$F010
     22  9000 ????	       f0 11	   w017       =	$F011
     23  9000 ????	       f0 12	   w018       =	$F012
     24  9000 ????	       f0 13	   w019       =	$F013
     25  9000 ????	       f0 14	   w020       =	$F014
     26  9000 ????	       f0 15	   w021       =	$F015
     27  9000 ????	       f0 16	   w022       =	$F016
     28  9000 ????	       f0 17	   w023       =	$F017
     29  9000 ????	       f0 18	   w024       =	$F018
     30  9000 ????	       f0 19	   w025       =	$F019
     31  9000 ????	       f0 1a	   w026       =	$F01A
     32  9000 ????	       f0 1b	   w027       =	$F01B
     33  9000 ????	       f0 1c	   w028       =	$F01C
     34  9000 ????	       f0 1d	   w029       =	$F01D
     35  9000 ????	       f0 1e	   w030       =	$F01E
     36  9000 ????	       f0 1f	   w031       =	$F01F
     37  9000 ????	       f0 20	   w032       =	$F020
     38  9000 ????	       f0 21	   w033       =	$F021
     39  9000 ????	       f0 22	   w034       =	$F022
     40  9000 ????	       f0 23	   w035       =	$F023
     41  9000 ????	       f0 24	   w036       =	$F024
     42  9000 ????	       f0 25	   w037       =	$F025
     43  9000 ????	       f0 26	   w038       =	$F026
     44  9000 ????	       f0 27	   w039       =	$F027
     45  9000 ????	       f0 28	   w040       =	$F028
     46  9000 ????	       f0 29	   w041       =	$F029
     47  9000 ????	       f0 2a	   w042       =	$F02A
     48  9000 ????	       f0 2b	   w043       =	$F02B
     49  9000 ????	       f0 2c	   w044       =	$F02C
     50  9000 ????	       f0 2d	   w045       =	$F02D
     51  9000 ????	       f0 2e	   w046       =	$F02E
     52  9000 ????	       f0 2f	   w047       =	$F02F
     53  9000 ????	       f0 30	   w048       =	$F030
     54  9000 ????	       f0 31	   w049       =	$F031
     55  9000 ????	       f0 32	   w050       =	$F032
     56  9000 ????	       f0 33	   w051       =	$F033
     57  9000 ????	       f0 34	   w052       =	$F034
     58  9000 ????	       f0 35	   w053       =	$F035
     59  9000 ????	       f0 36	   w054       =	$F036
     60  9000 ????	       f0 37	   w055       =	$F037
     61  9000 ????	       f0 38	   w056       =	$F038
     62  9000 ????	       f0 39	   w057       =	$F039
     63  9000 ????	       f0 3a	   w058       =	$F03A
     64  9000 ????	       f0 3b	   w059       =	$F03B
     65  9000 ????	       f0 3c	   w060       =	$F03C
     66  9000 ????	       f0 3d	   w061       =	$F03D
     67  9000 ????	       f0 3e	   w062       =	$F03E
     68  9000 ????	       f0 3f	   w063       =	$F03F
     69  9000 ????	       f0 40	   w064       =	$F040
     70  9000 ????	       f0 41	   w065       =	$F041
     71  9000 ????	       f0 42	   w066       =	$F042
     72  9000 ????	       f0 43	   w067       =	$F043
     73  9000 ????	       f0 44	   w068       =	$F044
     74  9000 ????	       f0 45	   w069       =	$F045
     75  9000 ????	       f0 46	   w070       =	$F046
     76  9000 ????	       f0 47	   w071       =	$F047
     77  9000 ????	       f0 48	   w072       =	$F048
     78  9000 ????	       f0 49	   w073       =	$F049
     79  9000 ????	       f0 4a	   w074       =	$F04A
     80  9000 ????	       f0 4b	   w075       =	$F04B
     81  9000 ????	       f0 4c	   w076       =	$F04C
     82  9000 ????	       f0 4d	   w077       =	$F04D
     83  9000 ????	       f0 4e	   w078       =	$F04E
     84  9000 ????	       f0 4f	   w079       =	$F04F
     85  9000 ????	       f0 50	   w080       =	$F050
     86  9000 ????	       f0 51	   w081       =	$F051
     87  9000 ????	       f0 52	   w082       =	$F052
     88  9000 ????	       f0 53	   w083       =	$F053
     89  9000 ????	       f0 54	   w084       =	$F054
     90  9000 ????	       f0 55	   w085       =	$F055
     91  9000 ????	       f0 56	   w086       =	$F056
     92  9000 ????	       f0 57	   w087       =	$F057
     93  9000 ????	       f0 58	   w088       =	$F058
     94  9000 ????	       f0 59	   w089       =	$F059
     95  9000 ????	       f0 5a	   w090       =	$F05A
     96  9000 ????	       f0 5b	   w091       =	$F05B
     97  9000 ????	       f0 5c	   w092       =	$F05C
     98  9000 ????	       f0 5d	   w093       =	$F05D
     99  9000 ????	       f0 5e	   w094       =	$F05E
    100  9000 ????	       f0 5f	   w095       =	$F05F
    101  9000 ????	       f0 60	   w096       =	$F060
    102  9000 ????	       f0 61	   w097       =	$F061
    103  9000 ????	       f0 62	   w098       =	$F062
    104  9000 ????	       f0 63	   w099       =	$F063
    105  9000 ????	       f0 64	   w100       =	$F064
    106  9000 ????	       f0 65	   w101       =	$F065
    107  9000 ????	       f0 66	   w102       =	$F066
    108  9000 ????	       f0 67	   w103       =	$F067
    109  9000 ????	       f0 68	   w104       =	$F068
    110  9000 ????	       f0 69	   w105       =	$F069
    111  9000 ????	       f0 6a	   w106       =	$F06A
    112  9000 ????	       f0 6b	   w107       =	$F06B
    113  9000 ????	       f0 6c	   w108       =	$F06C
    114  9000 ????	       f0 6d	   w109       =	$F06D
    115  9000 ????	       f0 6e	   w110       =	$F06E
    116  9000 ????	       f0 6f	   w111       =	$F06F
    117  9000 ????	       f0 70	   w112       =	$F070
    118  9000 ????	       f0 71	   w113       =	$F071
    119  9000 ????	       f0 72	   w114       =	$F072
    120  9000 ????	       f0 73	   w115       =	$F073
    121  9000 ????	       f0 74	   w116       =	$F074
    122  9000 ????	       f0 75	   w117       =	$F075
    123  9000 ????	       f0 76	   w118       =	$F076
    124  9000 ????	       f0 77	   w119       =	$F077
    125  9000 ????	       f0 78	   w120       =	$F078
    126  9000 ????	       f0 79	   w121       =	$F079
    127  9000 ????	       f0 7a	   w122       =	$F07A
    128  9000 ????	       f0 7b	   w123       =	$F07B
    129  9000 ????	       f0 7c	   w124       =	$F07C
    130  9000 ????	       f0 7d	   w125       =	$F07D
    131  9000 ????	       f0 7e	   w126       =	$F07E
    132  9000 ????	       f0 7f	   w127       =	$F07F
    133  9000 ????
    134  9000 ????	       f0 80	   read_RAM   =	$F080
    135  9000 ????	       f0 80	   rRAM       =	$F080
    136  9000 ????	       f0 80	   r000       =	$F080
    137  9000 ????	       f0 81	   r001       =	$F081
    138  9000 ????	       f0 82	   r002       =	$F082
    139  9000 ????	       f0 83	   r003       =	$F083
    140  9000 ????	       f0 84	   r004       =	$F084
    141  9000 ????	       f0 85	   r005       =	$F085
    142  9000 ????	       f0 86	   r006       =	$F086
    143  9000 ????	       f0 87	   r007       =	$F087
    144  9000 ????	       f0 88	   r008       =	$F088
    145  9000 ????	       f0 89	   r009       =	$F089
    146  9000 ????	       f0 8a	   r010       =	$F08A
    147  9000 ????	       f0 8b	   r011       =	$F08B
    148  9000 ????	       f0 8c	   r012       =	$F08C
    149  9000 ????	       f0 8d	   r013       =	$F08D
    150  9000 ????	       f0 8e	   r014       =	$F08E
    151  9000 ????	       f0 8f	   r015       =	$F08F
    152  9000 ????	       f0 90	   r016       =	$F090
    153  9000 ????	       f0 91	   r017       =	$F091
    154  9000 ????	       f0 92	   r018       =	$F092
    155  9000 ????	       f0 93	   r019       =	$F093
    156  9000 ????	       f0 94	   r020       =	$F094
    157  9000 ????	       f0 95	   r021       =	$F095
    158  9000 ????	       f0 96	   r022       =	$F096
    159  9000 ????	       f0 97	   r023       =	$F097
    160  9000 ????	       f0 98	   r024       =	$F098
    161  9000 ????	       f0 99	   r025       =	$F099
    162  9000 ????	       f0 9a	   r026       =	$F09A
    163  9000 ????	       f0 9b	   r027       =	$F09B
    164  9000 ????	       f0 9c	   r028       =	$F09C
    165  9000 ????	       f0 9d	   r029       =	$F09D
    166  9000 ????	       f0 9e	   r030       =	$F09E
    167  9000 ????	       f0 9f	   r031       =	$F09F
    168  9000 ????	       f0 a0	   r032       =	$F0A0
    169  9000 ????	       f0 a1	   r033       =	$F0A1
    170  9000 ????	       f0 a2	   r034       =	$F0A2
    171  9000 ????	       f0 a3	   r035       =	$F0A3
    172  9000 ????	       f0 a4	   r036       =	$F0A4
    173  9000 ????	       f0 a5	   r037       =	$F0A5
    174  9000 ????	       f0 a6	   r038       =	$F0A6
    175  9000 ????	       f0 a7	   r039       =	$F0A7
    176  9000 ????	       f0 a8	   r040       =	$F0A8
    177  9000 ????	       f0 a9	   r041       =	$F0A9
    178  9000 ????	       f0 aa	   r042       =	$F0AA
    179  9000 ????	       f0 ab	   r043       =	$F0AB
    180  9000 ????	       f0 ac	   r044       =	$F0AC
    181  9000 ????	       f0 ad	   r045       =	$F0AD
    182  9000 ????	       f0 ae	   r046       =	$F0AE
    183  9000 ????	       f0 af	   r047       =	$F0AF
    184  9000 ????	       f0 b0	   r048       =	$F0B0
    185  9000 ????	       f0 b1	   r049       =	$F0B1
    186  9000 ????	       f0 b2	   r050       =	$F0B2
    187  9000 ????	       f0 b3	   r051       =	$F0B3
    188  9000 ????	       f0 b4	   r052       =	$F0B4
    189  9000 ????	       f0 b5	   r053       =	$F0B5
    190  9000 ????	       f0 b6	   r054       =	$F0B6
    191  9000 ????	       f0 b7	   r055       =	$F0B7
    192  9000 ????	       f0 b8	   r056       =	$F0B8
    193  9000 ????	       f0 b9	   r057       =	$F0B9
    194  9000 ????	       f0 ba	   r058       =	$F0BA
    195  9000 ????	       f0 bb	   r059       =	$F0BB
    196  9000 ????	       f0 bc	   r060       =	$F0BC
    197  9000 ????	       f0 bd	   r061       =	$F0BD
    198  9000 ????	       f0 be	   r062       =	$F0BE
    199  9000 ????	       f0 bf	   r063       =	$F0BF
    200  9000 ????	       f0 c0	   r064       =	$F0C0
    201  9000 ????	       f0 c1	   r065       =	$F0C1
    202  9000 ????	       f0 c2	   r066       =	$F0C2
    203  9000 ????	       f0 c3	   r067       =	$F0C3
    204  9000 ????	       f0 c4	   r068       =	$F0C4
    205  9000 ????	       f0 c5	   r069       =	$F0C5
    206  9000 ????	       f0 c6	   r070       =	$F0C6
    207  9000 ????	       f0 c7	   r071       =	$F0C7
    208  9000 ????	       f0 c8	   r072       =	$F0C8
    209  9000 ????	       f0 c9	   r073       =	$F0C9
    210  9000 ????	       f0 ca	   r074       =	$F0CA
    211  9000 ????	       f0 cb	   r075       =	$F0CB
    212  9000 ????	       f0 cc	   r076       =	$F0CC
    213  9000 ????	       f0 cd	   r077       =	$F0CD
    214  9000 ????	       f0 ce	   r078       =	$F0CE
    215  9000 ????	       f0 cf	   r079       =	$F0CF
    216  9000 ????	       f0 d0	   r080       =	$F0D0
    217  9000 ????	       f0 d1	   r081       =	$F0D1
    218  9000 ????	       f0 d2	   r082       =	$F0D2
    219  9000 ????	       f0 d3	   r083       =	$F0D3
    220  9000 ????	       f0 d4	   r084       =	$F0D4
    221  9000 ????	       f0 d5	   r085       =	$F0D5
    222  9000 ????	       f0 d6	   r086       =	$F0D6
    223  9000 ????	       f0 d7	   r087       =	$F0D7
    224  9000 ????	       f0 d8	   r088       =	$F0D8
    225  9000 ????	       f0 d9	   r089       =	$F0D9
    226  9000 ????	       f0 da	   r090       =	$F0DA
    227  9000 ????	       f0 db	   r091       =	$F0DB
    228  9000 ????	       f0 dc	   r092       =	$F0DC
    229  9000 ????	       f0 dd	   r093       =	$F0DD
    230  9000 ????	       f0 de	   r094       =	$F0DE
    231  9000 ????	       f0 df	   r095       =	$F0DF
    232  9000 ????	       f0 e0	   r096       =	$F0E0
    233  9000 ????	       f0 e1	   r097       =	$F0E1
    234  9000 ????	       f0 e2	   r098       =	$F0E2
    235  9000 ????	       f0 e3	   r099       =	$F0E3
    236  9000 ????	       f0 e4	   r100       =	$F0E4
    237  9000 ????	       f0 e5	   r101       =	$F0E5
    238  9000 ????	       f0 e6	   r102       =	$F0E6
    239  9000 ????	       f0 e7	   r103       =	$F0E7
    240  9000 ????	       f0 e8	   r104       =	$F0E8
    241  9000 ????	       f0 e9	   r105       =	$F0E9
    242  9000 ????	       f0 ea	   r106       =	$F0EA
    243  9000 ????	       f0 eb	   r107       =	$F0EB
    244  9000 ????	       f0 ec	   r108       =	$F0EC
    245  9000 ????	       f0 ed	   r109       =	$F0ED
    246  9000 ????	       f0 ee	   r110       =	$F0EE
    247  9000 ????	       f0 ef	   r111       =	$F0EF
    248  9000 ????	       f0 f0	   r112       =	$F0F0
    249  9000 ????	       f0 f1	   r113       =	$F0F1
    250  9000 ????	       f0 f2	   r114       =	$F0F2
    251  9000 ????	       f0 f3	   r115       =	$F0F3
    252  9000 ????	       f0 f4	   r116       =	$F0F4
    253  9000 ????	       f0 f5	   r117       =	$F0F5
    254  9000 ????	       f0 f6	   r118       =	$F0F6
    255  9000 ????	       f0 f7	   r119       =	$F0F7
    256  9000 ????	       f0 f8	   r120       =	$F0F8
    257  9000 ????	       f0 f9	   r121       =	$F0F9
    258  9000 ????	       f0 fa	   r122       =	$F0FA
    259  9000 ????	       f0 fb	   r123       =	$F0FB
    260  9000 ????	       f0 fc	   r124       =	$F0FC
    261  9000 ????	       f0 fd	   r125       =	$F0FD
    262  9000 ????	       f0 fe	   r126       =	$F0FE
    263  9000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  9000 ????			  -	      else
    202  9000 ????			  -playfieldbase =	$A4
    203  9000 ????				      endif
    204  9000 ????
    205  9000 ????				      ifnconst	pfhalfwidth
    206  9000 ????	       00 04	   pfwidth    =	4
    207  9000 ????	       00 0e	   PF1L       =	PF1
    208  9000 ????	       00 0f	   PF2L       =	PF2
    209  9000 ????	       00 0e	   PF1R       =	PF1
    210  9000 ????	       00 0f	   PF2R       =	PF2
    211  9000 ????	       00 00	   pfadjust   =	0
    212  9000 ????			  -	      else
    213  9000 ????			  -pfwidth    =	2
    214  9000 ????			  -	      ifconst	pfcenter
    215  9000 ????			  -PF1L       =	$3F	; no effect
    216  9000 ????			  -PF2L       =	PF2
    217  9000 ????			  -PF1R       =	$3F
    218  9000 ????			  -PF2R       =	PF2	; no effect
    219  9000 ????			  -pfadjust   =	1
    220  9000 ????			  -	      else
    221  9000 ????			  -PF1L       =	PF1
    222  9000 ????			  -PF2L       =	PF2
    223  9000 ????			  -PF1R       =	$3F	; no effect
    224  9000 ????			  -PF2R       =	$3F	; no effect
    225  9000 ????			  -pfadjust   =	0
    226  9000 ????			  -	      endif
    227  9000 ????				      endif
    228  9000 ????
    229  9000 ????						; define playfield start based on height
    230  9000 ????			  -	      ifnconst	pfres
    231  9000 ????			  -playfield  =	playfieldbase
    232  9000 ????				      else
    233  9000 ????	       10 a0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  9000 ????				      endif
------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 04	   MASKS_length =	.skipL0141-MASKS
      4  9000 ????
      5  9000 ????	       00 20	   bscode_length =	32
      6  9000 ????	       00 e5	   highScore3 =	r
      7  9000 ????
      8  9000 ????	       00 e4	   highScore2 =	q
      9  9000 ????
     10  9000 ????	       00 e3	   highScore1 =	p
     11  9000 ????
     12  9000 ????	       00 95	   score3     =	score + 2
     13  9000 ????
     14  9000 ????	       00 94	   score2     =	score + 1
     15  9000 ????
     16  9000 ????	       00 93	   score1     =	score
     17  9000 ????
     18  9000 ????	       00 e2	   bmp_48x1_2_index =	o
     19  9000 ????
     20  9000 ????	       00 e7	   bmp_48x1_3_color =	t
     21  9000 ????
     22  9000 ????	       00 e8	   bmp_48x1_2_color =	u
     23  9000 ????
     24  9000 ????	       00 e1	   shaking_effect =	n
     25  9000 ????
     26  9000 ????	       00 e0	   shakescreen =	m
     27  9000 ????
     28  9000 ????	       00 d9	   crashSound =	f
     29  9000 ????
     30  9000 ????	       00 d9	   eatSound   =	f
     31  9000 ????
     32  9000 ????	       00 a4	   directions =	var0
     33  9000 ????
     34  9000 ????	       00 db	   tailStart  =	h
     35  9000 ????
     36  9000 ????	       00 de	   tailEnd    =	k
     37  9000 ????
     38  9000 ????	       00 dd	   tailY      =	j
     39  9000 ????
     40  9000 ????	       00 dc	   tailX      =	i
     41  9000 ????
     42  9000 ????	       00 df	   length     =	l
     43  9000 ????
     44  9000 ????	       00 da	   grown      =	g
     45  9000 ????
     46  9000 ????	       00 d7	   headDir    =	d
     47  9000 ????
     48  9000 ????	       00 ec	   headY      =	y
     49  9000 ????
     50  9000 ????	       00 eb	   headX      =	x
     51  9000 ????
     52  9000 ????	       00 d5	   foodY      =	b
     53  9000 ????
     54  9000 ????	       00 d4	   foodX      =	a
     55  9000 ????
     56  9000 ????	       00 d6	   counter    =	c
     57  9000 ????
     58  9000 ????	       00 e6	   speed      =	s
     59  9000 ????
     60  9000 ????	       00 d6	   seconds    =	c
     61  9000 ????
     62  9000 ????	       00 e6	   frames     =	s
     63  9000 ????
     64  9000 ????	       00 ed	   bits3_TitleSoundFlag =	z
     65  9000 ????
     66  9000 ????	       00 ed	   bits2_GameOverFlag =	z
     67  9000 ????
     68  9000 ????	       00 ed	   bits1_DebounceFireButton =	z
     69  9000 ????
     70  9000 ????	       00 ed	   bits0_DebounceReset =	z
     71  9000 ????
     72  9000 ????	       00 ed	   bits       =	z
     73  9000 ????
     74  9000 ????	       00 c0	   SNAKE_MAX_LEN =	192
     75  9000 ????
     76  9000 ????	       00 96	   TITLE2_PAL_COLOR =	$96
     77  9000 ????
     78  9000 ????	       00 3a	   TITLE1_PAL_COLOR =	$3A
     79  9000 ????
     80  9000 ????	       00 00	   GAMEOVER_PAL_BACKG =	$00
     81  9000 ????
     82  9000 ????	       00 6e	   GAMEOVER_PAL_FOREG =	$6E
     83  9000 ????
     84  9000 ????	       00 6a	   FOOD_PAL_COLOR =	$6A
     85  9000 ????
     86  9000 ????	       00 2c	   SCORE_PAL_COLOR =	$2C
     87  9000 ????
     88  9000 ????	       00 00	   BACKG_PAL_COLOR =	$00
     89  9000 ????
     90  9000 ????	       00 5a	   FOREG_PAL_COLOR =	$5A
     91  9000 ????
     92  9000 ????	       00 96	   TITLE2_NTSC_COLOR =	$96
     93  9000 ????
     94  9000 ????	       00 da	   TITLE1_NTSC_COLOR =	$DA
     95  9000 ????
     96  9000 ????	       00 00	   GAMEOVER_NTSC_BACKG =	$00
     97  9000 ????
     98  9000 ????	       00 4e	   GAMEOVER_NTSC_FOREG =	$4E
     99  9000 ????
    100  9000 ????	       00 4a	   FOOD_NTSC_COLOR =	$4A
    101  9000 ????
    102  9000 ????	       00 2c	   SCORE_NTSC_COLOR =	$2C
    103  9000 ????
    104  9000 ????	       00 00	   BACKG_NTSC_COLOR =	$00
    105  9000 ????
    106  9000 ????	       00 ca	   FOREG_NTSC_COLOR =	$CA
    107  9000 ????
    108  9000 ????	       00 ff	   WEST       =	%11111111
    109  9000 ????
    110  9000 ????	       00 aa	   SOUTH      =	%10101010
    111  9000 ????
    112  9000 ????	       00 55	   EAST       =	%01010101
    113  9000 ????
    114  9000 ????	       00 00	   NORTH      =	%00000000
    115  9000 ????
    116  9000 ????	       00 04	   fontstyle  =	4
    117  9000 ????
    118  9000 ????	       00 04	   pfrowheight =	4
    119  9000 ????
    120  9000 ????	       00 18	   pfres      =	24
    121  9000 ????
    122  9000 ????	       00 01	   no_blank_lines =	1
    123  9000 ????	       00 01	   superchip  =	1
    124  9000 ????	       00 07	   bs_mask    =	7
    125  9000 ????	       00 20	   bankswitch =	32
    126  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
    127  9000 ????	       00 2b	   vblank_time =	43
    128  9000 ????	       00 25	   overscan_time =	37
------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm
      8  9000 ????				      ifconst	bankswitch
      9  9000 ????			  -	      if	bankswitch == 8
     10  9000 ????			  -	      ORG	$1000
     11  9000 ????			  -	      RORG	$D000
     12  9000 ????				      endif
     13  9000 ????			  -	      if	bankswitch == 16
     14  9000 ????			  -	      ORG	$1000
     15  9000 ????			  -	      RORG	$9000
     16  9000 ????				      endif
     17  9000 ????				      if	bankswitch == 32
     18  1000					      ORG	$1000
     19  1000					      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .
     33  1100							; 
     34  1100
     35  1100				   .
     36  1100							; 
     37  1100
     38  1100				   .
     39  1100							; 
     40  1100
     41  1100				   .
     42  1100							; 
     43  1100
     44  1100				   .
     45  1100							; 
     46  1100
     47  1100				   .
     48  1100							; 
     49  1100
     50  1100				   .
     51  1100							; 
     52  1100
     53  1100				   .
     54  1100							; 
     55  1100
     56  1100				   .
     57  1100							; 
     58  1100
     59  1100				   .
     60  1100							; 
     61  1100
     62  1100				   .L00 		;  temp1 = temp1
     63  1100
     64  1100		       a5 9c		      LDA	temp1
     65  1102		       85 9c		      STA	temp1
     66  1104				   .
     67  1104							; 
     68  1104
     69  1104				   .
     70  1104							; 
     71  1104
     72  1104				   .L01 		;  set tv ntsc
     73  1104
     74  1104				   .
     75  1104							; 
     76  1104
     77  1104				   .
     78  1104							; 
     79  1104
     80  1104				   .L02 		;  set romsize 32kSC
     81  1104
     82  1104				   .
     83  1104							; 
     84  1104
     85  1104				   .
     86  1104							; 
     87  1104
     88  1104				   .L03 		;  set smartbranching on
     89  1104
     90  1104				   .
     91  1104							; 
     92  1104
     93  1104				   .
     94  1104							; 
     95  1104
     96  1104				   .L04 		;  set kernel_options no_blank_lines
     97  1104
     98  1104				   .
     99  1104							; 
    100  1104
    101  1104				   .
    102  1104							; 
    103  1104
    104  1104				   .L05 		;  set optimization inlinerand
    105  1104
    106  1104				   .
    107  1104							; 
    108  1104
    109  1104				   .
    110  1104							; 
    111  1104
    112  1104				   .
    113  1104							; 
    114  1104
    115  1104				   .
    116  1104							; 
    117  1104
    118  1104				   .
    119  1104							; 
    120  1104
    121  1104				   .
    122  1104							; 
    123  1104
    124  1104				   .L06 		;  const pfres  =  24
    125  1104
    126  1104				   .L07 		;  const pfrowheight  =  4
    127  1104
    128  1104				   .
    129  1104							; 
    130  1104
    131  1104				   .
    132  1104							; 
    133  1104
    134  1104				   .L08 		;  const fontstyle  =	4
    135  1104
    136  1104				   .
    137  1104							; 
    138  1104
    139  1104				   .
    140  1104							; 
    141  1104
    142  1104				   .L09 		;  const NORTH  =  %00000000
    143  1104
    144  1104				   .L010		;  const EAST	=  %01010101
    145  1104
    146  1104				   .L011		;  const SOUTH  =  %10101010
    147  1104
    148  1104				   .L012		;  const WEST	=  %11111111
    149  1104
    150  1104				   .
    151  1104							; 
    152  1104
    153  1104				   .
    154  1104							; 
    155  1104
    156  1104				   .
    157  1104							; 
    158  1104
    159  1104				   .
    160  1104							; 
    161  1104
    162  1104				   .
    163  1104							; 
    164  1104
    165  1104				   .
    166  1104							; 
    167  1104
    168  1104				   .L013		;  const FOREG_NTSC_COLOR  =  $CA
    169  1104
    170  1104				   .L014		;  const BACKG_NTSC_COLOR  =  $00
    171  1104
    172  1104				   .L015		;  const SCORE_NTSC_COLOR  =  $2C
    173  1104
    174  1104				   .L016		;  const FOOD_NTSC_COLOR  =  $4A
    175  1104
    176  1104				   .
    177  1104							; 
    178  1104
    179  1104				   .L017		;  const GAMEOVER_NTSC_FOREG  =  $4E
    180  1104
    181  1104				   .L018		;  const GAMEOVER_NTSC_BACKG  =  $00
    182  1104
    183  1104				   .
    184  1104							; 
    185  1104
    186  1104				   .L019		;  const TITLE1_NTSC_COLOR  =	$DA
    187  1104
    188  1104				   .L020		;  const TITLE2_NTSC_COLOR  =	$96
    189  1104
    190  1104				   .
    191  1104							; 
    192  1104
    193  1104				   .
    194  1104							; 
    195  1104
    196  1104				   .L021		;  const FOREG_PAL_COLOR  =  $5A
    197  1104
    198  1104				   .L022		;  const BACKG_PAL_COLOR  =  $00
    199  1104
    200  1104				   .L023		;  const SCORE_PAL_COLOR  =  $2C
    201  1104
    202  1104				   .L024		;  const FOOD_PAL_COLOR  =  $6A
    203  1104
    204  1104				   .
    205  1104							; 
    206  1104
    207  1104				   .L025		;  const GAMEOVER_PAL_FOREG  =  $6E
    208  1104
    209  1104				   .L026		;  const GAMEOVER_PAL_BACKG  =  $00
    210  1104
    211  1104				   .
    212  1104							; 
    213  1104
    214  1104				   .L027		;  const TITLE1_PAL_COLOR  =  $3A
    215  1104
    216  1104				   .L028		;  const TITLE2_PAL_COLOR  =  $96
    217  1104
    218  1104				   .
    219  1104							; 
    220  1104
    221  1104				   .
    222  1104							; 
    223  1104
    224  1104				   .L029		;  const SNAKE_MAX_LEN  =  192
    225  1104
    226  1104				   .
    227  1104							; 
    228  1104
    229  1104				   .
    230  1104							; 
    231  1104
    232  1104				   .L030		;  dim bits  =  z
    233  1104
    234  1104				   .L031		;  dim bits0_DebounceReset  =	z
    235  1104
    236  1104				   .L032		;  dim bits1_DebounceFireButton  =  z
    237  1104
    238  1104				   .L033		;  dim bits2_GameOverFlag  =  z
    239  1104
    240  1104				   .L034		;  dim bits3_TitleSoundFlag  =  z
    241  1104
    242  1104				   .
    243  1104							; 
    244  1104
    245  1104				   .
    246  1104							; 
    247  1104
    248  1104				   .L035		;  dim frames	=  s
    249  1104
    250  1104				   .L036		;  dim seconds  =  c
    251  1104
    252  1104				   .
    253  1104							; 
    254  1104
    255  1104				   .
    256  1104							; 
    257  1104
    258  1104				   .L037		;  dim speed  =  s
    259  1104
    260  1104				   .L038		;  dim counter  =  c
    261  1104
    262  1104				   .
    263  1104							; 
    264  1104
    265  1104				   .
    266  1104							; 
    267  1104
    268  1104				   .L039		;  dim foodX  =  a
    269  1104
    270  1104				   .L040		;  dim foodY  =  b
    271  1104
    272  1104				   .
    273  1104							; 
    274  1104
    275  1104				   .
    276  1104							; 
    277  1104
    278  1104				   .L041		;  dim headX  =  x
    279  1104
    280  1104				   .L042		;  dim headY  =  y
    281  1104
    282  1104				   .
    283  1104							; 
    284  1104
    285  1104				   .
    286  1104							; 
    287  1104
    288  1104				   .L043		;  dim headDir  =  d
    289  1104
    290  1104				   .
    291  1104							; 
    292  1104
    293  1104				   .
    294  1104							; 
    295  1104
    296  1104				   .L044		;  dim grown  =  g
    297  1104
    298  1104				   .
    299  1104							; 
    300  1104
    301  1104				   .
    302  1104							; 
    303  1104
    304  1104				   .L045		;  dim length	=  l
    305  1104
    306  1104				   .
    307  1104							; 
    308  1104
    309  1104				   .
    310  1104							; 
    311  1104
    312  1104				   .L046		;  dim tailX  =  i
    313  1104
    314  1104				   .L047		;  dim tailY  =  j
    315  1104
    316  1104				   .
    317  1104							; 
    318  1104
    319  1104				   .
    320  1104							; 
    321  1104
    322  1104				   .L048		;  dim tailEnd  =  k
    323  1104
    324  1104				   .L049		;  dim tailStart  =  h
    325  1104
    326  1104				   .
    327  1104							; 
    328  1104
    329  1104				   .
    330  1104							; 
    331  1104
    332  1104				   .L050		;  dim directions  =  var0
    333  1104
    334  1104				   .
    335  1104							; 
    336  1104
    337  1104				   .
    338  1104							; 
    339  1104
    340  1104				   .
    341  1104							; 
    342  1104
    343  1104				   .
    344  1104							; 
    345  1104
    346  1104				   .
    347  1104							; 
    348  1104
    349  1104				   .
    350  1104							; 
    351  1104
    352  1104				   .
    353  1104							; 
    354  1104
    355  1104				   .L051		;  dim eatSound  =  f
    356  1104
    357  1104				   .L052		;  dim crashSound  =  f
    358  1104
    359  1104				   .
    360  1104							; 
    361  1104
    362  1104				   .
    363  1104							; 
    364  1104
    365  1104				   .L053		;  dim shakescreen  =	m
    366  1104
    367  1104				   .L054		;  dim shaking_effect	=  n
    368  1104
    369  1104				   .
    370  1104							; 
    371  1104
    372  1104				   .
    373  1104							; 
    374  1104
    375  1104				   .L055		;  dim bmp_48x1_2_color  =  u
    376  1104
    377  1104				   .L056		;  dim bmp_48x1_3_color  =  t
    378  1104
    379  1104				   .L057		;  dim bmp_48x1_2_index  =  o
    380  1104
    381  1104				   .
    382  1104							; 
    383  1104
    384  1104				   .
    385  1104							; 
    386  1104
    387  1104				   .L058		;  dim score1	=  score
    388  1104
    389  1104				   .L059		;  dim score2	=  score + 1
    390  1104
    391  1104				   .L060		;  dim score3	=  score + 2
    392  1104
    393  1104				   .
    394  1104							; 
    395  1104
    396  1104				   .
    397  1104							; 
    398  1104
    399  1104				   .L061		;  dim highScore1  =  p
    400  1104
    401  1104				   .L062		;  dim highScore2  =  q
    402  1104
    403  1104				   .L063		;  dim highScore3  =  r
    404  1104
    405  1104				   .
    406  1104							; 
    407  1104
    408  1104				   .
    409  1104							; 
    410  1104
    411  1104				   .L064		;  highScore1	=  0
    412  1104
    413  1104		       a9 00		      LDA	#0
    414  1106		       85 e3		      STA	highScore1
    415  1108				   .L065		;  highScore2	=  0
    416  1108
    417  1108		       a9 00		      LDA	#0
    418  110a		       85 e4		      STA	highScore2
    419  110c				   .L066		;  highScore3	=  0
    420  110c
    421  110c		       a9 00		      LDA	#0
    422  110e		       85 e5		      STA	highScore3
    423  1110				   .
    424  1110							; 
    425  1110
    426  1110				   .
    427  1110							; 
    428  1110
    429  1110				   .
    430  1110							; 
    431  1110
    432  1110				   .
    433  1110							; 
    434  1110
    435  1110				   .
    436  1110							; 
    437  1110
    438  1110				   .
    439  1110							; 
    440  1110
    441  1110				   ._GameInit
    442  1110							; _GameInit
    443  1110
    444  1110				   .
    445  1110							; 
    446  1110
    447  1110				   .
    448  1110							; 
    449  1110
    450  1110				   .L067		;  AUDV0  =  0
    451  1110
    452  1110		       a9 00		      LDA	#0
    453  1112		       85 19		      STA	AUDV0
    454  1114				   .L068		;  AUDV1  =  0
    455  1114
    456  1114		       a9 00		      LDA	#0
    457  1116		       85 1a		      STA	AUDV1
    458  1118				   .
    459  1118							; 
    460  1118
    461  1118				   .
    462  1118							; 
    463  1118
    464  1118				   .
    465  1118							; 
    466  1118
    467  1118				   .L069		;  if bits2_GameOverFlag{2} then goto _MainLoopSetup bank2
    468  1118
    469  1118		       a5 ed		      LDA	bits2_GameOverFlag
    470  111a		       29 04		      AND	#4
    471  111c		       f0 12		      BEQ	.skipL069
    472  111e				   .condpart0
    473  111e		       85 ee		      sta	temp7
    474  1120		       a9 31		      lda	#>(._MainLoopSetup-1)
    475  1122		       48		      pha
    476  1123		       a9 03		      lda	#<(._MainLoopSetup-1)
    477  1125		       48		      pha
    478  1126		       a5 ee		      lda	temp7
    479  1128		       48		      pha
    480  1129		       8a		      txa
    481  112a		       48		      pha
    482  112b		       a2 02		      ldx	#2
    483  112d		       4c eb ff 	      jmp	BS_jsr
    484  1130				   .skipL069
    485  1130				   .
    486  1130							; 
    487  1130
    488  1130				   ._TitleScreenSetup
    489  1130							; _TitleScreenSetup
    490  1130
    491  1130				   .
    492  1130							; 
    493  1130
    494  1130				   .
    495  1130							; 
    496  1130
    497  1130				   .L070		;  score1  =  highScore1
    498  1130
    499  1130		       a5 e3		      LDA	highScore1
    500  1132		       85 93		      STA	score1
    501  1134				   .L071		;  score2  =  highScore2
    502  1134
    503  1134		       a5 e4		      LDA	highScore2
    504  1136		       85 94		      STA	score2
    505  1138				   .L072		;  score3  =  highScore3
    506  1138
    507  1138		       a5 e5		      LDA	highScore3
    508  113a		       85 95		      STA	score3
    509  113c				   .
    510  113c							; 
    511  113c
    512  113c				   .L073		;  if switchbw then scorecolor  =  SCORE_NTSC_COLOR else scorecolor  =  SCORE_PAL_COLOR
    513  113c
    514  113c		       a9 08		      lda	#8
    515  113e		       2c 82 02 	      bit	SWCHB
    516  1141		       d0 07		      BNE	.skipL073
    517  1143				   .condpart1
    518  1143		       a9 2c		      LDA	#SCORE_NTSC_COLOR
    519  1145		       85 a3		      STA	scorecolor
    520  1147		       4c 4e 11 	      jmp	.skipelse0
    521  114a				   .skipL073
    522  114a		       a9 2c		      LDA	#SCORE_PAL_COLOR
    523  114c		       85 a3		      STA	scorecolor
    524  114e				   .skipelse0
    525  114e				   .
    526  114e							; 
    527  114e
    528  114e				   .
    529  114e							; 
    530  114e
    531  114e				   .
    532  114e							; 
    533  114e
    534  114e				   .L074		;  bits0_DebounceReset{0}  =  1
    535  114e
    536  114e		       a5 ed		      LDA	bits0_DebounceReset
    537  1150		       09 01		      ORA	#1
    538  1152		       85 ed		      STA	bits0_DebounceReset
    539  1154				   .
    540  1154							; 
    541  1154
    542  1154				   .
    543  1154							; 
    544  1154
    545  1154				   .
    546  1154							; 
    547  1154
    548  1154				   .
    549  1154							; 
    550  1154
    551  1154				   .
    552  1154							; 
    553  1154
    554  1154				   .
    555  1154							; 
    556  1154
    557  1154				   .
    558  1154							; 
    559  1154
    560  1154				   .
    561  1154							; 
    562  1154
    563  1154				   .
    564  1154							; 
    565  1154
    566  1154				   .L075		;  frames  =  0
    567  1154
    568  1154		       a9 00		      LDA	#0
    569  1156		       85 e6		      STA	frames
    570  1158				   .
    571  1158							; 
    572  1158
    573  1158				   ._TitleScreenLoop
    574  1158							; _TitleScreenLoop
    575  1158
    576  1158				   .
    577  1158							; 
    578  1158
    579  1158				   .
    580  1158							; 
    581  1158
    582  1158				   .L076		;  if switchbw then bmp_48x1_2_color  =  TITLE1_NTSC_COLOR else bmp_48x1_2_color  =  TITLE1_PAL_COLOR
    583  1158
    584  1158		       a9 08		      lda	#8
    585  115a		       2c 82 02 	      bit	SWCHB
    586  115d		       d0 07		      BNE	.skipL076
    587  115f				   .condpart2
    588  115f		       a9 da		      LDA	#TITLE1_NTSC_COLOR
    589  1161		       85 e8		      STA	bmp_48x1_2_color
    590  1163		       4c 6a 11 	      jmp	.skipelse1
    591  1166				   .skipL076
    592  1166		       a9 3a		      LDA	#TITLE1_PAL_COLOR
    593  1168		       85 e8		      STA	bmp_48x1_2_color
    594  116a				   .skipelse1
    595  116a				   .L077		;  if switchbw then bmp_48x1_3_color  =  TITLE2_NTSC_COLOR else bmp_48x1_3_color  =  TITLE2_PAL_COLOR
    596  116a
    597  116a		       a9 08		      lda	#8
    598  116c		       2c 82 02 	      bit	SWCHB
    599  116f		       d0 07		      BNE	.skipL077
    600  1171				   .condpart3
    601  1171		       a9 96		      LDA	#TITLE2_NTSC_COLOR
    602  1173		       85 e7		      STA	bmp_48x1_3_color
    603  1175		       4c 7c 11 	      jmp	.skipelse2
    604  1178				   .skipL077
    605  1178		       a9 96		      LDA	#TITLE2_PAL_COLOR
    606  117a		       85 e7		      STA	bmp_48x1_3_color
    607  117c				   .skipelse2
    608  117c				   .
    609  117c							; 
    610  117c
    611  117c				   .
    612  117c							; 
    613  117c
    614  117c				   .L078		;  if frames < 210 then bmp_48x1_2_index = 0 else bmp_48x1_2_index = 117
    615  117c
    616  117c		       a5 e6		      LDA	frames
    617  117e		       c9 d2		      CMP	#210
    618  1180		       b0 07		      BCS	.skipL078
    619  1182				   .condpart4
    620  1182		       a9 00		      LDA	#0
    621  1184		       85 e2		      STA	bmp_48x1_2_index
    622  1186		       4c 8d 11 	      jmp	.skipelse3
    623  1189				   .skipL078
    624  1189		       a9 75		      LDA	#117
    625  118b		       85 e2		      STA	bmp_48x1_2_index
    626  118d				   .skipelse3
    627  118d				   .
    628  118d							; 
    629  118d
    630  118d				   .L079		;  gosub titledrawscreen bank4
    631  118d
    632  118d		       85 ee		      sta	temp7
    633  118f		       a9 11		      lda	#>(ret_point1-1)
    634  1191		       48		      pha
    635  1192		       a9 a4		      lda	#<(ret_point1-1)
    636  1194		       48		      pha
    637  1195		       a9 71		      lda	#>(.titledrawscreen-1)
    638  1197		       48		      pha
    639  1198		       a9 03		      lda	#<(.titledrawscreen-1)
    640  119a		       48		      pha
    641  119b		       a5 ee		      lda	temp7
    642  119d		       48		      pha
    643  119e		       8a		      txa
    644  119f		       48		      pha
    645  11a0		       a2 04		      ldx	#4
    646  11a2		       4c eb ff 	      jmp	BS_jsr
    647  11a5				   ret_point1
    648  11a5				   .
    649  11a5							; 
    650  11a5
    651  11a5				   .
    652  11a5							; 
    653  11a5
    654  11a5				   .L080		;  frames = frames + 1
    655  11a5
    656  11a5		       e6 e6		      INC	frames
    657  11a7				   .L081		;  if frames > 240 then frames = 0
    658  11a7
    659  11a7		       a9 f0		      LDA	#240
    660  11a9		       c5 e6		      CMP	frames
    661  11ab		       b0 04		      BCS	.skipL081
    662  11ad				   .condpart5
    663  11ad		       a9 00		      LDA	#0
    664  11af		       85 e6		      STA	frames
    665  11b1				   .skipL081
    666  11b1				   .
    667  11b1							; 
    668  11b1
    669  11b1				   .
    670  11b1							; 
    671  11b1
    672  11b1				   .L082		;  if !switchreset  &&  !joy0fire then bits0_DebounceReset{0}	=  0  :  goto _SkipTitleResetFire
    673  11b1
    674  11b1		       a9 01		      lda	#1
    675  11b3		       2c 82 02 	      bit	SWCHB
    676  11b6		       f0 0d		      BEQ	.skipL082
    677  11b8				   .condpart6
    678  11b8		       24 0c		      bit	INPT4
    679  11ba		       10 09		      BPL	.skip6then
    680  11bc				   .condpart7
    681  11bc		       a5 ed		      LDA	bits0_DebounceReset
    682  11be		       29 fe		      AND	#254
    683  11c0		       85 ed		      STA	bits0_DebounceReset
    684  11c2		       4c df 11 	      jmp	._SkipTitleResetFire
    685  11c5
    686  11c5				   .skip6then
    687  11c5				   .skipL082
    688  11c5				   .
    689  11c5							; 
    690  11c5
    691  11c5				   .
    692  11c5							; 
    693  11c5
    694  11c5				   .L083		;  if bits0_DebounceReset{0} then goto _SkipTitleResetFire
    695  11c5
    696  11c5		       a5 ed		      LDA	bits0_DebounceReset
    697  11c7		       4a		      LSR
    698  11c8		       90 03		      BCC	.skipL083
    699  11ca				   .condpart8
    700  11ca		       4c df 11 	      jmp	._SkipTitleResetFire
    701  11cd
    702  11cd				   .skipL083
    703  11cd				   .
    704  11cd							; 
    705  11cd
    706  11cd				   .
    707  11cd							; 
    708  11cd
    709  11cd				   .L084		;  goto _MainLoopSetup bank2
    710  11cd
    711  11cd		       85 ee		      sta	temp7
    712  11cf		       a9 31		      lda	#>(._MainLoopSetup-1)
    713  11d1		       48		      pha
    714  11d2		       a9 03		      lda	#<(._MainLoopSetup-1)
    715  11d4		       48		      pha
    716  11d5		       a5 ee		      lda	temp7
    717  11d7		       48		      pha
    718  11d8		       8a		      txa
    719  11d9		       48		      pha
    720  11da		       a2 02		      ldx	#2
    721  11dc		       4c eb ff 	      jmp	BS_jsr
    722  11df				   .
    723  11df							; 
    724  11df
    725  11df				   .
    726  11df							; 
    727  11df
    728  11df				   .
    729  11df							; 
    730  11df
    731  11df				   .
    732  11df							; 
    733  11df
    734  11df				   .
    735  11df							; 
    736  11df
    737  11df				   ._SkipTitleResetFire
    738  11df							; _SkipTitleResetFire
    739  11df
    740  11df				   .
    741  11df							; 
    742  11df
    743  11df				   .
    744  11df							; 
    745  11df
    746  11df				   .L085		;  goto _TitleScreenLoop
    747  11df
    748  11df		       4c 58 11 	      jmp	._TitleScreenLoop
    749  11e2
    750  11e2				   .
    751  11e2							; 
    752  11e2
    753  11e2				   .
    754  11e2							; 
    755  11e2
    756  11e2				   .
    757  11e2							; 
    758  11e2
    759  11e2				   .
    760  11e2							; 
    761  11e2
    762  11e2				   .
    763  11e2							; 
    764  11e2
    765  11e2				   .
    766  11e2							; 
    767  11e2
    768  11e2				   .
    769  11e2							; 
    770  11e2
    771  11e2				   .L086		;  bank 2
    772  11e2
    773  11e2					      if	ECHO1
      3570 bytes of ROM space left in bank 1
    774  11e2					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    775  11e2					      endif
    776  11e2		       00 01	   ECHO1      =	1
    777  1fd4					      ORG	$1FF4-bscode_length
    778  1fd4					      RORG	$1FF4-bscode_length
    779  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    780  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    781  1fd6				  -	      stx	FASTFETCH
    782  1fd6					      endif
    783  1fd6		       9a		      txs
    784  1fd7				  -	      if	bankswitch == 64
    785  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    786  1fd7					      else
    787  1fd7		       a9 f3		      lda	#>(start-1)
    788  1fd9					      endif
    789  1fd9		       48		      pha
    790  1fda		       a9 59		      lda	#<(start-1)
    791  1fdc		       48		      pha
    792  1fdd		       48		      pha
    793  1fde		       8a		      txa
    794  1fdf		       48		      pha
    795  1fe0		       ba		      tsx
    796  1fe1					      if	bankswitch != 64
    797  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    798  1fe3		       2a		      rol
    799  1fe4		       2a		      rol
    800  1fe5		       2a		      rol
    801  1fe6		       2a		      rol
    802  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    803  1fe9		       aa		      tax
    804  1fea		       e8		      inx
    805  1feb				  -	      else
    806  1feb				  -	      lda	4,x	; get high byte of return address
    807  1feb				  -	      tay
    808  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    809  1feb				  -	      sta	4,x
    810  1feb				  -	      tya
    811  1feb				  -	      lsr
    812  1feb				  -	      lsr
    813  1feb				  -	      lsr
    814  1feb				  -	      lsr
    815  1feb				  -	      tax
    816  1feb				  -	      inx
    817  1feb					      endif
    818  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
    819  1fee		       68		      pla
    820  1fef		       aa		      tax
    821  1ff0		       68		      pla
    822  1ff1		       60		      rts
    823  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    824  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    825  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    826  1ff2					      endif
    827  1ffc					      ORG	$1FFC
    828  1ffc					      RORG	$1FFC
    829  1ffc		       d4 1f		      .word.w	(start_bank1 & $ffff)
    830  1ffe		       d4 1f		      .word.w	(start_bank1 & $ffff)
    831  2000					      ORG	$2000
    832  2000					      RORG	$3000
    833  2000					      repeat	256
    834  2000		       ff		      .byte.b	$ff
    833  2000					      repend
    834  2001		       ff		      .byte.b	$ff
    833  2001					      repend
    834  2002		       ff		      .byte.b	$ff
    833  2002					      repend
    834  2003		       ff		      .byte.b	$ff
    833  2003					      repend
    834  2004		       ff		      .byte.b	$ff
    833  2004					      repend
    834  2005		       ff		      .byte.b	$ff
    833  2005					      repend
    834  2006		       ff		      .byte.b	$ff
    833  2006					      repend
    834  2007		       ff		      .byte.b	$ff
    833  2007					      repend
    834  2008		       ff		      .byte.b	$ff
    833  2008					      repend
    834  2009		       ff		      .byte.b	$ff
    833  2009					      repend
    834  200a		       ff		      .byte.b	$ff
    833  200a					      repend
    834  200b		       ff		      .byte.b	$ff
    833  200b					      repend
    834  200c		       ff		      .byte.b	$ff
    833  200c					      repend
    834  200d		       ff		      .byte.b	$ff
    833  200d					      repend
    834  200e		       ff		      .byte.b	$ff
    833  200e					      repend
    834  200f		       ff		      .byte.b	$ff
    833  200f					      repend
    834  2010		       ff		      .byte.b	$ff
    833  2010					      repend
    834  2011		       ff		      .byte.b	$ff
    833  2011					      repend
    834  2012		       ff		      .byte.b	$ff
    833  2012					      repend
    834  2013		       ff		      .byte.b	$ff
    833  2013					      repend
    834  2014		       ff		      .byte.b	$ff
    833  2014					      repend
    834  2015		       ff		      .byte.b	$ff
    833  2015					      repend
    834  2016		       ff		      .byte.b	$ff
    833  2016					      repend
    834  2017		       ff		      .byte.b	$ff
    833  2017					      repend
    834  2018		       ff		      .byte.b	$ff
    833  2018					      repend
    834  2019		       ff		      .byte.b	$ff
    833  2019					      repend
    834  201a		       ff		      .byte.b	$ff
    833  201a					      repend
    834  201b		       ff		      .byte.b	$ff
    833  201b					      repend
    834  201c		       ff		      .byte.b	$ff
    833  201c					      repend
    834  201d		       ff		      .byte.b	$ff
    833  201d					      repend
    834  201e		       ff		      .byte.b	$ff
    833  201e					      repend
    834  201f		       ff		      .byte.b	$ff
    833  201f					      repend
    834  2020		       ff		      .byte.b	$ff
    833  2020					      repend
    834  2021		       ff		      .byte.b	$ff
    833  2021					      repend
    834  2022		       ff		      .byte.b	$ff
    833  2022					      repend
    834  2023		       ff		      .byte.b	$ff
    833  2023					      repend
    834  2024		       ff		      .byte.b	$ff
    833  2024					      repend
    834  2025		       ff		      .byte.b	$ff
    833  2025					      repend
    834  2026		       ff		      .byte.b	$ff
    833  2026					      repend
    834  2027		       ff		      .byte.b	$ff
    833  2027					      repend
    834  2028		       ff		      .byte.b	$ff
    833  2028					      repend
    834  2029		       ff		      .byte.b	$ff
    833  2029					      repend
    834  202a		       ff		      .byte.b	$ff
    833  202a					      repend
    834  202b		       ff		      .byte.b	$ff
    833  202b					      repend
    834  202c		       ff		      .byte.b	$ff
    833  202c					      repend
    834  202d		       ff		      .byte.b	$ff
    833  202d					      repend
    834  202e		       ff		      .byte.b	$ff
    833  202e					      repend
    834  202f		       ff		      .byte.b	$ff
    833  202f					      repend
    834  2030		       ff		      .byte.b	$ff
    833  2030					      repend
    834  2031		       ff		      .byte.b	$ff
    833  2031					      repend
    834  2032		       ff		      .byte.b	$ff
    833  2032					      repend
    834  2033		       ff		      .byte.b	$ff
    833  2033					      repend
    834  2034		       ff		      .byte.b	$ff
    833  2034					      repend
    834  2035		       ff		      .byte.b	$ff
    833  2035					      repend
    834  2036		       ff		      .byte.b	$ff
    833  2036					      repend
    834  2037		       ff		      .byte.b	$ff
    833  2037					      repend
    834  2038		       ff		      .byte.b	$ff
    833  2038					      repend
    834  2039		       ff		      .byte.b	$ff
    833  2039					      repend
    834  203a		       ff		      .byte.b	$ff
    833  203a					      repend
    834  203b		       ff		      .byte.b	$ff
    833  203b					      repend
    834  203c		       ff		      .byte.b	$ff
    833  203c					      repend
    834  203d		       ff		      .byte.b	$ff
    833  203d					      repend
    834  203e		       ff		      .byte.b	$ff
    833  203e					      repend
    834  203f		       ff		      .byte.b	$ff
    833  203f					      repend
    834  2040		       ff		      .byte.b	$ff
    833  2040					      repend
    834  2041		       ff		      .byte.b	$ff
    833  2041					      repend
    834  2042		       ff		      .byte.b	$ff
    833  2042					      repend
    834  2043		       ff		      .byte.b	$ff
    833  2043					      repend
    834  2044		       ff		      .byte.b	$ff
    833  2044					      repend
    834  2045		       ff		      .byte.b	$ff
    833  2045					      repend
    834  2046		       ff		      .byte.b	$ff
    833  2046					      repend
    834  2047		       ff		      .byte.b	$ff
    833  2047					      repend
    834  2048		       ff		      .byte.b	$ff
    833  2048					      repend
    834  2049		       ff		      .byte.b	$ff
    833  2049					      repend
    834  204a		       ff		      .byte.b	$ff
    833  204a					      repend
    834  204b		       ff		      .byte.b	$ff
    833  204b					      repend
    834  204c		       ff		      .byte.b	$ff
    833  204c					      repend
    834  204d		       ff		      .byte.b	$ff
    833  204d					      repend
    834  204e		       ff		      .byte.b	$ff
    833  204e					      repend
    834  204f		       ff		      .byte.b	$ff
    833  204f					      repend
    834  2050		       ff		      .byte.b	$ff
    833  2050					      repend
    834  2051		       ff		      .byte.b	$ff
    833  2051					      repend
    834  2052		       ff		      .byte.b	$ff
    833  2052					      repend
    834  2053		       ff		      .byte.b	$ff
    833  2053					      repend
    834  2054		       ff		      .byte.b	$ff
    833  2054					      repend
    834  2055		       ff		      .byte.b	$ff
    833  2055					      repend
    834  2056		       ff		      .byte.b	$ff
    833  2056					      repend
    834  2057		       ff		      .byte.b	$ff
    833  2057					      repend
    834  2058		       ff		      .byte.b	$ff
    833  2058					      repend
    834  2059		       ff		      .byte.b	$ff
    833  2059					      repend
    834  205a		       ff		      .byte.b	$ff
    833  205a					      repend
    834  205b		       ff		      .byte.b	$ff
    833  205b					      repend
    834  205c		       ff		      .byte.b	$ff
    833  205c					      repend
    834  205d		       ff		      .byte.b	$ff
    833  205d					      repend
    834  205e		       ff		      .byte.b	$ff
    833  205e					      repend
    834  205f		       ff		      .byte.b	$ff
    833  205f					      repend
    834  2060		       ff		      .byte.b	$ff
    833  2060					      repend
    834  2061		       ff		      .byte.b	$ff
    833  2061					      repend
    834  2062		       ff		      .byte.b	$ff
    833  2062					      repend
    834  2063		       ff		      .byte.b	$ff
    833  2063					      repend
    834  2064		       ff		      .byte.b	$ff
    833  2064					      repend
    834  2065		       ff		      .byte.b	$ff
    833  2065					      repend
    834  2066		       ff		      .byte.b	$ff
    833  2066					      repend
    834  2067		       ff		      .byte.b	$ff
    833  2067					      repend
    834  2068		       ff		      .byte.b	$ff
    833  2068					      repend
    834  2069		       ff		      .byte.b	$ff
    833  2069					      repend
    834  206a		       ff		      .byte.b	$ff
    833  206a					      repend
    834  206b		       ff		      .byte.b	$ff
    833  206b					      repend
    834  206c		       ff		      .byte.b	$ff
    833  206c					      repend
    834  206d		       ff		      .byte.b	$ff
    833  206d					      repend
    834  206e		       ff		      .byte.b	$ff
    833  206e					      repend
    834  206f		       ff		      .byte.b	$ff
    833  206f					      repend
    834  2070		       ff		      .byte.b	$ff
    833  2070					      repend
    834  2071		       ff		      .byte.b	$ff
    833  2071					      repend
    834  2072		       ff		      .byte.b	$ff
    833  2072					      repend
    834  2073		       ff		      .byte.b	$ff
    833  2073					      repend
    834  2074		       ff		      .byte.b	$ff
    833  2074					      repend
    834  2075		       ff		      .byte.b	$ff
    833  2075					      repend
    834  2076		       ff		      .byte.b	$ff
    833  2076					      repend
    834  2077		       ff		      .byte.b	$ff
    833  2077					      repend
    834  2078		       ff		      .byte.b	$ff
    833  2078					      repend
    834  2079		       ff		      .byte.b	$ff
    833  2079					      repend
    834  207a		       ff		      .byte.b	$ff
    833  207a					      repend
    834  207b		       ff		      .byte.b	$ff
    833  207b					      repend
    834  207c		       ff		      .byte.b	$ff
    833  207c					      repend
    834  207d		       ff		      .byte.b	$ff
    833  207d					      repend
    834  207e		       ff		      .byte.b	$ff
    833  207e					      repend
    834  207f		       ff		      .byte.b	$ff
    833  207f					      repend
    834  2080		       ff		      .byte.b	$ff
    833  2080					      repend
    834  2081		       ff		      .byte.b	$ff
    833  2081					      repend
    834  2082		       ff		      .byte.b	$ff
    833  2082					      repend
    834  2083		       ff		      .byte.b	$ff
    833  2083					      repend
    834  2084		       ff		      .byte.b	$ff
    833  2084					      repend
    834  2085		       ff		      .byte.b	$ff
    833  2085					      repend
    834  2086		       ff		      .byte.b	$ff
    833  2086					      repend
    834  2087		       ff		      .byte.b	$ff
    833  2087					      repend
    834  2088		       ff		      .byte.b	$ff
    833  2088					      repend
    834  2089		       ff		      .byte.b	$ff
    833  2089					      repend
    834  208a		       ff		      .byte.b	$ff
    833  208a					      repend
    834  208b		       ff		      .byte.b	$ff
    833  208b					      repend
    834  208c		       ff		      .byte.b	$ff
    833  208c					      repend
    834  208d		       ff		      .byte.b	$ff
    833  208d					      repend
    834  208e		       ff		      .byte.b	$ff
    833  208e					      repend
    834  208f		       ff		      .byte.b	$ff
    833  208f					      repend
    834  2090		       ff		      .byte.b	$ff
    833  2090					      repend
    834  2091		       ff		      .byte.b	$ff
    833  2091					      repend
    834  2092		       ff		      .byte.b	$ff
    833  2092					      repend
    834  2093		       ff		      .byte.b	$ff
    833  2093					      repend
    834  2094		       ff		      .byte.b	$ff
    833  2094					      repend
    834  2095		       ff		      .byte.b	$ff
    833  2095					      repend
    834  2096		       ff		      .byte.b	$ff
    833  2096					      repend
    834  2097		       ff		      .byte.b	$ff
    833  2097					      repend
    834  2098		       ff		      .byte.b	$ff
    833  2098					      repend
    834  2099		       ff		      .byte.b	$ff
    833  2099					      repend
    834  209a		       ff		      .byte.b	$ff
    833  209a					      repend
    834  209b		       ff		      .byte.b	$ff
    833  209b					      repend
    834  209c		       ff		      .byte.b	$ff
    833  209c					      repend
    834  209d		       ff		      .byte.b	$ff
    833  209d					      repend
    834  209e		       ff		      .byte.b	$ff
    833  209e					      repend
    834  209f		       ff		      .byte.b	$ff
    833  209f					      repend
    834  20a0		       ff		      .byte.b	$ff
    833  20a0					      repend
    834  20a1		       ff		      .byte.b	$ff
    833  20a1					      repend
    834  20a2		       ff		      .byte.b	$ff
    833  20a2					      repend
    834  20a3		       ff		      .byte.b	$ff
    833  20a3					      repend
    834  20a4		       ff		      .byte.b	$ff
    833  20a4					      repend
    834  20a5		       ff		      .byte.b	$ff
    833  20a5					      repend
    834  20a6		       ff		      .byte.b	$ff
    833  20a6					      repend
    834  20a7		       ff		      .byte.b	$ff
    833  20a7					      repend
    834  20a8		       ff		      .byte.b	$ff
    833  20a8					      repend
    834  20a9		       ff		      .byte.b	$ff
    833  20a9					      repend
    834  20aa		       ff		      .byte.b	$ff
    833  20aa					      repend
    834  20ab		       ff		      .byte.b	$ff
    833  20ab					      repend
    834  20ac		       ff		      .byte.b	$ff
    833  20ac					      repend
    834  20ad		       ff		      .byte.b	$ff
    833  20ad					      repend
    834  20ae		       ff		      .byte.b	$ff
    833  20ae					      repend
    834  20af		       ff		      .byte.b	$ff
    833  20af					      repend
    834  20b0		       ff		      .byte.b	$ff
    833  20b0					      repend
    834  20b1		       ff		      .byte.b	$ff
    833  20b1					      repend
    834  20b2		       ff		      .byte.b	$ff
    833  20b2					      repend
    834  20b3		       ff		      .byte.b	$ff
    833  20b3					      repend
    834  20b4		       ff		      .byte.b	$ff
    833  20b4					      repend
    834  20b5		       ff		      .byte.b	$ff
    833  20b5					      repend
    834  20b6		       ff		      .byte.b	$ff
    833  20b6					      repend
    834  20b7		       ff		      .byte.b	$ff
    833  20b7					      repend
    834  20b8		       ff		      .byte.b	$ff
    833  20b8					      repend
    834  20b9		       ff		      .byte.b	$ff
    833  20b9					      repend
    834  20ba		       ff		      .byte.b	$ff
    833  20ba					      repend
    834  20bb		       ff		      .byte.b	$ff
    833  20bb					      repend
    834  20bc		       ff		      .byte.b	$ff
    833  20bc					      repend
    834  20bd		       ff		      .byte.b	$ff
    833  20bd					      repend
    834  20be		       ff		      .byte.b	$ff
    833  20be					      repend
    834  20bf		       ff		      .byte.b	$ff
    833  20bf					      repend
    834  20c0		       ff		      .byte.b	$ff
    833  20c0					      repend
    834  20c1		       ff		      .byte.b	$ff
    833  20c1					      repend
    834  20c2		       ff		      .byte.b	$ff
    833  20c2					      repend
    834  20c3		       ff		      .byte.b	$ff
    833  20c3					      repend
    834  20c4		       ff		      .byte.b	$ff
    833  20c4					      repend
    834  20c5		       ff		      .byte.b	$ff
    833  20c5					      repend
    834  20c6		       ff		      .byte.b	$ff
    833  20c6					      repend
    834  20c7		       ff		      .byte.b	$ff
    833  20c7					      repend
    834  20c8		       ff		      .byte.b	$ff
    833  20c8					      repend
    834  20c9		       ff		      .byte.b	$ff
    833  20c9					      repend
    834  20ca		       ff		      .byte.b	$ff
    833  20ca					      repend
    834  20cb		       ff		      .byte.b	$ff
    833  20cb					      repend
    834  20cc		       ff		      .byte.b	$ff
    833  20cc					      repend
    834  20cd		       ff		      .byte.b	$ff
    833  20cd					      repend
    834  20ce		       ff		      .byte.b	$ff
    833  20ce					      repend
    834  20cf		       ff		      .byte.b	$ff
    833  20cf					      repend
    834  20d0		       ff		      .byte.b	$ff
    833  20d0					      repend
    834  20d1		       ff		      .byte.b	$ff
    833  20d1					      repend
    834  20d2		       ff		      .byte.b	$ff
    833  20d2					      repend
    834  20d3		       ff		      .byte.b	$ff
    833  20d3					      repend
    834  20d4		       ff		      .byte.b	$ff
    833  20d4					      repend
    834  20d5		       ff		      .byte.b	$ff
    833  20d5					      repend
    834  20d6		       ff		      .byte.b	$ff
    833  20d6					      repend
    834  20d7		       ff		      .byte.b	$ff
    833  20d7					      repend
    834  20d8		       ff		      .byte.b	$ff
    833  20d8					      repend
    834  20d9		       ff		      .byte.b	$ff
    833  20d9					      repend
    834  20da		       ff		      .byte.b	$ff
    833  20da					      repend
    834  20db		       ff		      .byte.b	$ff
    833  20db					      repend
    834  20dc		       ff		      .byte.b	$ff
    833  20dc					      repend
    834  20dd		       ff		      .byte.b	$ff
    833  20dd					      repend
    834  20de		       ff		      .byte.b	$ff
    833  20de					      repend
    834  20df		       ff		      .byte.b	$ff
    833  20df					      repend
    834  20e0		       ff		      .byte.b	$ff
    833  20e0					      repend
    834  20e1		       ff		      .byte.b	$ff
    833  20e1					      repend
    834  20e2		       ff		      .byte.b	$ff
    833  20e2					      repend
    834  20e3		       ff		      .byte.b	$ff
    833  20e3					      repend
    834  20e4		       ff		      .byte.b	$ff
    833  20e4					      repend
    834  20e5		       ff		      .byte.b	$ff
    833  20e5					      repend
    834  20e6		       ff		      .byte.b	$ff
    833  20e6					      repend
    834  20e7		       ff		      .byte.b	$ff
    833  20e7					      repend
    834  20e8		       ff		      .byte.b	$ff
    833  20e8					      repend
    834  20e9		       ff		      .byte.b	$ff
    833  20e9					      repend
    834  20ea		       ff		      .byte.b	$ff
    833  20ea					      repend
    834  20eb		       ff		      .byte.b	$ff
    833  20eb					      repend
    834  20ec		       ff		      .byte.b	$ff
    833  20ec					      repend
    834  20ed		       ff		      .byte.b	$ff
    833  20ed					      repend
    834  20ee		       ff		      .byte.b	$ff
    833  20ee					      repend
    834  20ef		       ff		      .byte.b	$ff
    833  20ef					      repend
    834  20f0		       ff		      .byte.b	$ff
    833  20f0					      repend
    834  20f1		       ff		      .byte.b	$ff
    833  20f1					      repend
    834  20f2		       ff		      .byte.b	$ff
    833  20f2					      repend
    834  20f3		       ff		      .byte.b	$ff
    833  20f3					      repend
    834  20f4		       ff		      .byte.b	$ff
    833  20f4					      repend
    834  20f5		       ff		      .byte.b	$ff
    833  20f5					      repend
    834  20f6		       ff		      .byte.b	$ff
    833  20f6					      repend
    834  20f7		       ff		      .byte.b	$ff
    833  20f7					      repend
    834  20f8		       ff		      .byte.b	$ff
    833  20f8					      repend
    834  20f9		       ff		      .byte.b	$ff
    833  20f9					      repend
    834  20fa		       ff		      .byte.b	$ff
    833  20fa					      repend
    834  20fb		       ff		      .byte.b	$ff
    833  20fb					      repend
    834  20fc		       ff		      .byte.b	$ff
    833  20fc					      repend
    834  20fd		       ff		      .byte.b	$ff
    833  20fd					      repend
    834  20fe		       ff		      .byte.b	$ff
    833  20fe					      repend
    834  20ff		       ff		      .byte.b	$ff
    835  2100					      repend
    836  2100				   .
    837  2100							; 
    838  2100
    839  2100				   .L087		;  temp1  =  temp1
    840  2100
    841  2100		       a5 9c		      LDA	temp1
    842  2102		       85 9c		      STA	temp1
    843  2104				   .
    844  2104							; 
    845  2104
    846  2104				   ._MainLoopSetup
    847  2104							; _MainLoopSetup
    848  2104
    849  2104				   .
    850  2104							; 
    851  2104
    852  2104				   .
    853  2104							; 
    854  2104
    855  2104				   .L088		;  bits0_DebounceReset{0}  =  1
    856  2104
    857  2104		       a5 ed		      LDA	bits0_DebounceReset
    858  2106		       09 01		      ORA	#1
    859  2108		       85 ed		      STA	bits0_DebounceReset
    860  210a				   .L089		;  bits1_DebounceFireButton{1}  =  1
    861  210a
    862  210a		       a5 ed		      LDA	bits1_DebounceFireButton
    863  210c		       09 02		      ORA	#2
    864  210e		       85 ed		      STA	bits1_DebounceFireButton
    865  2110				   .
    866  2110							; 
    867  2110
    868  2110				   .
    869  2110							; 
    870  2110
    871  2110				   .L090		;  bits2_GameOverFlag{2}  =  0
    872  2110
    873  2110		       a5 ed		      LDA	bits2_GameOverFlag
    874  2112		       29 fb		      AND	#251
    875  2114		       85 ed		      STA	bits2_GameOverFlag
    876  2116				   .
    877  2116							; 
    878  2116
    879  2116				   .
    880  2116							; 
    881  2116
    882  2116				   .L091		;  eatSound = 0
    883  2116
    884  2116		       a9 00		      LDA	#0
    885  2118		       85 d9		      STA	eatSound
    886  211a				   .L092		;  crashSound = 0
    887  211a
    888  211a		       a9 00		      LDA	#0
    889  211c		       85 d9		      STA	crashSound
    890  211e				   .
    891  211e							; 
    892  211e
    893  211e				   .
    894  211e							; 
    895  211e
    896  211e				   .L093		;  foodX = 0
    897  211e
    898  211e		       a9 00		      LDA	#0
    899  2120		       85 d4		      STA	foodX
    900  2122				   .L094		;  foodY = 0
    901  2122
    902  2122		       a9 00		      LDA	#0
    903  2124		       85 d5		      STA	foodY
    904  2126				   .
    905  2126							; 
    906  2126
    907  2126				   .
    908  2126							; 
    909  2126
    910  2126				   .L095		;  headX  =  5
    911  2126
    912  2126		       a9 05		      LDA	#5
    913  2128		       85 eb		      STA	headX
    914  212a				   .L096		;  headY  =  5
    915  212a
    916  212a		       a9 05		      LDA	#5
    917  212c		       85 ec		      STA	headY
    918  212e				   .
    919  212e							; 
    920  212e
    921  212e				   .
    922  212e							; 
    923  212e
    924  212e				   .L097		;  headDir  =	EAST
    925  212e
    926  212e		       a9 55		      LDA	#EAST
    927  2130		       85 d7		      STA	headDir
    928  2132				   .
    929  2132							; 
    930  2132
    931  2132				   .
    932  2132							; 
    933  2132
    934  2132				   .L098		;  length = 1
    935  2132
    936  2132		       a9 01		      LDA	#1
    937  2134		       85 df		      STA	length
    938  2136				   .
    939  2136							; 
    940  2136
    941  2136				   .
    942  2136							; 
    943  2136
    944  2136				   .L099		;  grown = 2
    945  2136
    946  2136		       a9 02		      LDA	#2
    947  2138		       85 da		      STA	grown
    948  213a				   .
    949  213a							; 
    950  213a
    951  213a				   .
    952  213a							; 
    953  213a
    954  213a				   .L0100		;  tailStart  =  0
    955  213a
    956  213a		       a9 00		      LDA	#0
    957  213c		       85 db		      STA	tailStart
    958  213e				   .L0101		;  tailEnd  =	0
    959  213e
    960  213e		       a9 00		      LDA	#0
    961  2140		       85 de		      STA	tailEnd
    962  2142				   .
    963  2142							; 
    964  2142
    965  2142				   .
    966  2142							; 
    967  2142
    968  2142				   .L0102		;  tailX  =  headX - 1
    969  2142
    970  2142		       a5 eb		      LDA	headX
    971  2144		       38		      SEC
    972  2145		       e9 01		      SBC	#1
    973  2147		       85 dc		      STA	tailX
    974  2149				   .L0103		;  tailY  =  headY
    975  2149
    976  2149		       a5 ec		      LDA	headY
    977  214b		       85 dd		      STA	tailY
    978  214d				   .
    979  214d							; 
    980  214d
    981  214d				   .
    982  214d							; 
    983  214d
    984  214d				   .L0104		;  directions[tailStart]  =  headDir
    985  214d
    986  214d		       a5 d7		      LDA	headDir
    987  214f		       a6 db		      LDX	tailStart
    988  2151		       95 a4		      STA	directions,x
    989  2153				   .
    990  2153							; 
    991  2153
    992  2153				   .
    993  2153							; 
    994  2153
    995  2153				   .L0105		;  score  =  0
    996  2153
    997  2153		       a9 00		      LDA	#$00
    998  2155		       85 95		      STA	score+2
    999  2157		       a9 00		      LDA	#$00
   1000  2159		       85 94		      STA	score+1
   1001  215b		       a9 00		      LDA	#$00
   1002  215d		       85 93		      STA	score
   1003  215f				   .
   1004  215f							; 
   1005  215f
   1006  215f				   .
   1007  215f							; 
   1008  215f
   1009  215f				   .L0106		;  speed  =  0
   1010  215f
   1011  215f		       a9 00		      LDA	#0
   1012  2161		       85 e6		      STA	speed
   1013  2163				   .L0107		;  counter  =	0
   1014  2163
   1015  2163		       a9 00		      LDA	#0
   1016  2165		       85 d6		      STA	counter
   1017  2167				   .
   1018  2167							; 
   1019  2167
   1020  2167				   .
   1021  2167							; 
   1022  2167
   1023  2167				   .L0108		;  pfclear
   1024  2167
   1025  2167		       a9 00		      LDA	#0
   1026  2169		       85 ee		      sta	temp7
   1027  216b		       a9 31		      lda	#>(ret_point2-1)
   1028  216d		       48		      pha
   1029  216e		       a9 80		      lda	#<(ret_point2-1)
   1030  2170		       48		      pha
   1031  2171		       a9 f3		      lda	#>(pfclear-1)
   1032  2173		       48		      pha
   1033  2174		       a9 97		      lda	#<(pfclear-1)
   1034  2176		       48		      pha
   1035  2177		       a5 ee		      lda	temp7
   1036  2179		       48		      pha
   1037  217a		       8a		      txa
   1038  217b		       48		      pha
   1039  217c		       a2 08		      ldx	#8
   1040  217e		       4c eb ff 	      jmp	BS_jsr
   1041  2181				   ret_point2
   1042  2181				   .
   1043  2181							; 
   1044  2181
   1045  2181				   .
   1046  2181							; 
   1047  2181
   1048  2181				   .L0109		;  pfhline 0 0 31 on
   1049  2181
   1050  2181		       a2 00		      LDX	#0
   1051  2183		       a9 1f		      LDA	#31
   1052  2185		       85 9e		      STA	temp3
   1053  2187		       a0 00		      LDY	#0
   1054  2189		       a9 00		      LDA	#0
   1055  218b		       85 ee		      sta	temp7
   1056  218d		       a9 31		      lda	#>(ret_point3-1)
   1057  218f		       48		      pha
   1058  2190		       a9 a2		      lda	#<(ret_point3-1)
   1059  2192		       48		      pha
   1060  2193		       a9 f3		      lda	#>(pfhline-1)
   1061  2195		       48		      pha
   1062  2196		       a9 f3		      lda	#<(pfhline-1)
   1063  2198		       48		      pha
   1064  2199		       a5 ee		      lda	temp7
   1065  219b		       48		      pha
   1066  219c		       8a		      txa
   1067  219d		       48		      pha
   1068  219e		       a2 08		      ldx	#8
   1069  21a0		       4c eb ff 	      jmp	BS_jsr
   1070  21a3				   ret_point3
   1071  21a3				   .L0110		;  pfhline 0 22 31 on
   1072  21a3
   1073  21a3		       a2 00		      LDX	#0
   1074  21a5		       a9 1f		      LDA	#31
   1075  21a7		       85 9e		      STA	temp3
   1076  21a9		       a0 16		      LDY	#22
   1077  21ab		       a9 00		      LDA	#0
   1078  21ad		       85 ee		      sta	temp7
   1079  21af		       a9 31		      lda	#>(ret_point4-1)
   1080  21b1		       48		      pha
   1081  21b2		       a9 c4		      lda	#<(ret_point4-1)
   1082  21b4		       48		      pha
   1083  21b5		       a9 f3		      lda	#>(pfhline-1)
   1084  21b7		       48		      pha
   1085  21b8		       a9 f3		      lda	#<(pfhline-1)
   1086  21ba		       48		      pha
   1087  21bb		       a5 ee		      lda	temp7
   1088  21bd		       48		      pha
   1089  21be		       8a		      txa
   1090  21bf		       48		      pha
   1091  21c0		       a2 08		      ldx	#8
   1092  21c2		       4c eb ff 	      jmp	BS_jsr
   1093  21c5				   ret_point4
   1094  21c5				   .L0111		;  pfvline 0 1 21 on
   1095  21c5
   1096  21c5		       a2 00		      LDX	#0
   1097  21c7		       a9 15		      LDA	#21
   1098  21c9		       85 9e		      STA	temp3
   1099  21cb		       a0 01		      LDY	#1
   1100  21cd		       a9 00		      LDA	#0
   1101  21cf		       85 ee		      sta	temp7
   1102  21d1		       a9 31		      lda	#>(ret_point5-1)
   1103  21d3		       48		      pha
   1104  21d4		       a9 e6		      lda	#<(ret_point5-1)
   1105  21d6		       48		      pha
   1106  21d7		       a9 f4		      lda	#>(pfvline-1)
   1107  21d9		       48		      pha
   1108  21da		       a9 0a		      lda	#<(pfvline-1)
   1109  21dc		       48		      pha
   1110  21dd		       a5 ee		      lda	temp7
   1111  21df		       48		      pha
   1112  21e0		       8a		      txa
   1113  21e1		       48		      pha
   1114  21e2		       a2 08		      ldx	#8
   1115  21e4		       4c eb ff 	      jmp	BS_jsr
   1116  21e7				   ret_point5
   1117  21e7				   .L0112		;  pfvline 31 1 21 on
   1118  21e7
   1119  21e7		       a2 00		      LDX	#0
   1120  21e9		       a9 15		      LDA	#21
   1121  21eb		       85 9e		      STA	temp3
   1122  21ed		       a0 01		      LDY	#1
   1123  21ef		       a9 1f		      LDA	#31
   1124  21f1		       85 ee		      sta	temp7
   1125  21f3		       a9 32		      lda	#>(ret_point6-1)
   1126  21f5		       48		      pha
   1127  21f6		       a9 08		      lda	#<(ret_point6-1)
   1128  21f8		       48		      pha
   1129  21f9		       a9 f4		      lda	#>(pfvline-1)
   1130  21fb		       48		      pha
   1131  21fc		       a9 0a		      lda	#<(pfvline-1)
   1132  21fe		       48		      pha
   1133  21ff		       a5 ee		      lda	temp7
   1134  2201		       48		      pha
   1135  2202		       8a		      txa
   1136  2203		       48		      pha
   1137  2204		       a2 08		      ldx	#8
   1138  2206		       4c eb ff 	      jmp	BS_jsr
   1139  2209				   ret_point6
   1140  2209				   .
   1141  2209							; 
   1142  2209
   1143  2209				   .
   1144  2209							; 
   1145  2209
   1146  2209				   .L0113		;  player0:
   1147  2209
   1148  2209		       a2 2b		      LDX	#<playerL0113_0
   1149  220b		       86 8a		      STX	player0pointerlo
   1150  220d		       a9 f6		      LDA	#>playerL0113_0
   1151  220f		       85 8b		      STA	player0pointerhi
   1152  2211		       a9 07		      LDA	#7
   1153  2213		       85 8e		      STA	player0height
   1154  2215				   .
   1155  2215							; 
   1156  2215
   1157  2215				   ._MainLoop
   1158  2215							; _MainLoop
   1159  2215
   1160  2215				   .
   1161  2215							; 
   1162  2215
   1163  2215				   .L0114		;  if switchbw then COLUP0  =	FOOD_NTSC_COLOR else COLUP0  =	FOOD_PAL_COLOR
   1164  2215
   1165  2215		       a9 08		      lda	#8
   1166  2217		       2c 82 02 	      bit	SWCHB
   1167  221a		       d0 07		      BNE	.skipL0114
   1168  221c				   .condpart9
   1169  221c		       a9 4a		      LDA	#FOOD_NTSC_COLOR
   1170  221e		       85 06		      STA	COLUP0
   1171  2220		       4c 27 32 	      jmp	.skipelse4
   1172  2223				   .skipL0114
   1173  2223		       a9 6a		      LDA	#FOOD_PAL_COLOR
   1174  2225		       85 06		      STA	COLUP0
   1175  2227				   .skipelse4
   1176  2227				   .
   1177  2227							; 
   1178  2227
   1179  2227				   .L0115		;  bits1_DebounceFireButton{1}  =  0
   1180  2227
   1181  2227		       a5 ed		      LDA	bits1_DebounceFireButton
   1182  2229		       29 fd		      AND	#253
   1183  222b		       85 ed		      STA	bits1_DebounceFireButton
   1184  222d				   .
   1185  222d							; 
   1186  222d
   1187  222d				   .L0116		;  drawscreen
   1188  222d
   1189  222d		       85 ee		      sta	temp7
   1190  222f		       a9 32		      lda	#>(ret_point7-1)
   1191  2231		       48		      pha
   1192  2232		       a9 44		      lda	#<(ret_point7-1)
   1193  2234		       48		      pha
   1194  2235		       a9 f5		      lda	#>(drawscreen-1)
   1195  2237		       48		      pha
   1196  2238		       a9 8a		      lda	#<(drawscreen-1)
   1197  223a		       48		      pha
   1198  223b		       a5 ee		      lda	temp7
   1199  223d		       48		      pha
   1200  223e		       8a		      txa
   1201  223f		       48		      pha
   1202  2240		       a2 08		      ldx	#8
   1203  2242		       4c eb ff 	      jmp	BS_jsr
   1204  2245				   ret_point7
   1205  2245				   .
   1206  2245							; 
   1207  2245
   1208  2245				   .
   1209  2245							; 
   1210  2245
   1211  2245				   .L0117		;  if !switchreset then bits0_DebounceReset{0}  =  0  :  goto _SkipMainReset
   1212  2245
   1213  2245		       a9 01		      lda	#1
   1214  2247		       2c 82 02 	      bit	SWCHB
   1215  224a		       f0 09		      BEQ	.skipL0117
   1216  224c				   .condpart10
   1217  224c		       a5 ed		      LDA	bits0_DebounceReset
   1218  224e		       29 fe		      AND	#254
   1219  2250		       85 ed		      STA	bits0_DebounceReset
   1220  2252		       4c 75 32 	      jmp	._SkipMainReset
   1221  2255
   1222  2255				   .skipL0117
   1223  2255				   .
   1224  2255							; 
   1225  2255
   1226  2255				   .
   1227  2255							; 
   1228  2255
   1229  2255				   .L0118		;  if bits0_DebounceReset{0} then goto _SkipMainReset
   1230  2255
   1231  2255		       a5 ed		      LDA	bits0_DebounceReset
   1232  2257		       4a		      LSR
   1233  2258		       90 03		      BCC	.skipL0118
   1234  225a				   .condpart11
   1235  225a		       4c 75 32 	      jmp	._SkipMainReset
   1236  225d
   1237  225d				   .skipL0118
   1238  225d				   .
   1239  225d							; 
   1240  225d
   1241  225d				   .
   1242  225d							; 
   1243  225d
   1244  225d				   .L0119		;  bits2_GameOverFlag{2}  =  0
   1245  225d
   1246  225d		       a5 ed		      LDA	bits2_GameOverFlag
   1247  225f		       29 fb		      AND	#251
   1248  2261		       85 ed		      STA	bits2_GameOverFlag
   1249  2263				   .
   1250  2263							; 
   1251  2263
   1252  2263				   .
   1253  2263							; 
   1254  2263
   1255  2263				   .L0120		;  goto _GameInit bank1
   1256  2263
   1257  2263		       85 ee		      sta	temp7
   1258  2265		       a9 11		      lda	#>(._GameInit-1)
   1259  2267		       48		      pha
   1260  2268		       a9 0f		      lda	#<(._GameInit-1)
   1261  226a		       48		      pha
   1262  226b		       a5 ee		      lda	temp7
   1263  226d		       48		      pha
   1264  226e		       8a		      txa
   1265  226f		       48		      pha
   1266  2270		       a2 01		      ldx	#1
   1267  2272		       4c eb ff 	      jmp	BS_jsr
   1268  2275				   .
   1269  2275							; 
   1270  2275
   1271  2275				   .
   1272  2275							; 
   1273  2275
   1274  2275				   ._SkipMainReset
   1275  2275							; _SkipMainReset
   1276  2275
   1277  2275				   .
   1278  2275							; 
   1279  2275
   1280  2275				   .
   1281  2275							; 
   1282  2275
   1283  2275				   .L0121		;  if bits2_GameOverFlag{2} then goto _GameOverSetup bank3
   1284  2275
   1285  2275		       a5 ed		      LDA	bits2_GameOverFlag
   1286  2277		       29 04		      AND	#4
   1287  2279		       f0 12		      BEQ	.skipL0121
   1288  227b				   .condpart12
   1289  227b		       85 ee		      sta	temp7
   1290  227d		       a9 52		      lda	#>(._GameOverSetup-1)
   1291  227f		       48		      pha
   1292  2280		       a9 f0		      lda	#<(._GameOverSetup-1)
   1293  2282		       48		      pha
   1294  2283		       a5 ee		      lda	temp7
   1295  2285		       48		      pha
   1296  2286		       8a		      txa
   1297  2287		       48		      pha
   1298  2288		       a2 03		      ldx	#3
   1299  228a		       4c eb ff 	      jmp	BS_jsr
   1300  228d				   .skipL0121
   1301  228d				   .
   1302  228d							; 
   1303  228d
   1304  228d				   .L0122		;  if switchbw then COLUPF  =	FOREG_NTSC_COLOR else COLUPF  =  FOREG_PAL_COLOR
   1305  228d
   1306  228d		       a9 08		      lda	#8
   1307  228f		       2c 82 02 	      bit	SWCHB
   1308  2292		       d0 07		      BNE	.skipL0122
   1309  2294				   .condpart13
   1310  2294		       a9 ca		      LDA	#FOREG_NTSC_COLOR
   1311  2296		       85 08		      STA	COLUPF
   1312  2298		       4c 9f 32 	      jmp	.skipelse5
   1313  229b				   .skipL0122
   1314  229b		       a9 5a		      LDA	#FOREG_PAL_COLOR
   1315  229d		       85 08		      STA	COLUPF
   1316  229f				   .skipelse5
   1317  229f				   .L0123		;  if switchbw then COLUBK  =	BACKG_NTSC_COLOR else COLUBK  =  BACKG_PAL_COLOR
   1318  229f
   1319  229f		       a9 08		      lda	#8
   1320  22a1		       2c 82 02 	      bit	SWCHB
   1321  22a4		       d0 07		      BNE	.skipL0123
   1322  22a6				   .condpart14
   1323  22a6		       a9 00		      LDA	#BACKG_NTSC_COLOR
   1324  22a8		       85 09		      STA	COLUBK
   1325  22aa		       4c b1 32 	      jmp	.skipelse6
   1326  22ad				   .skipL0123
   1327  22ad		       a9 00		      LDA	#BACKG_PAL_COLOR
   1328  22af		       85 09		      STA	COLUBK
   1329  22b1				   .skipelse6
   1330  22b1				   .
   1331  22b1							; 
   1332  22b1
   1333  22b1				   .
   1334  22b1							; 
   1335  22b1
   1336  22b1				   .L0124		;  pfpixel headX headY on
   1337  22b1
   1338  22b1		       a2 00		      LDX	#0
   1339  22b3		       a4 ec		      LDY	headY
   1340  22b5		       a5 eb		      LDA	headX
   1341  22b7		       85 ee		      sta	temp7
   1342  22b9		       a9 32		      lda	#>(ret_point8-1)
   1343  22bb		       48		      pha
   1344  22bc		       a9 ce		      lda	#<(ret_point8-1)
   1345  22be		       48		      pha
   1346  22bf		       a9 f3		      lda	#>(pfpixel-1)
   1347  22c1		       48		      pha
   1348  22c2		       a9 c3		      lda	#<(pfpixel-1)
   1349  22c4		       48		      pha
   1350  22c5		       a5 ee		      lda	temp7
   1351  22c7		       48		      pha
   1352  22c8		       8a		      txa
   1353  22c9		       48		      pha
   1354  22ca		       a2 08		      ldx	#8
   1355  22cc		       4c eb ff 	      jmp	BS_jsr
   1356  22cf				   ret_point8
   1357  22cf				   .
   1358  22cf							; 
   1359  22cf
   1360  22cf				   .
   1361  22cf							; 
   1362  22cf
   1363  22cf				   .L0125		;  if grown = 0 then pfpixel tailX tailY off
   1364  22cf
   1365  22cf		       a5 da		      LDA	grown
   1366  22d1		       c9 00		      CMP	#0
   1367  22d3		       d0 1e		      BNE	.skipL0125
   1368  22d5				   .condpart15
   1369  22d5		       a2 01		      LDX	#1
   1370  22d7		       a4 dd		      LDY	tailY
   1371  22d9		       a5 dc		      LDA	tailX
   1372  22db		       85 ee		      sta	temp7
   1373  22dd		       a9 32		      lda	#>(ret_point9-1)
   1374  22df		       48		      pha
   1375  22e0		       a9 f2		      lda	#<(ret_point9-1)
   1376  22e2		       48		      pha
   1377  22e3		       a9 f3		      lda	#>(pfpixel-1)
   1378  22e5		       48		      pha
   1379  22e6		       a9 c3		      lda	#<(pfpixel-1)
   1380  22e8		       48		      pha
   1381  22e9		       a5 ee		      lda	temp7
   1382  22eb		       48		      pha
   1383  22ec		       8a		      txa
   1384  22ed		       48		      pha
   1385  22ee		       a2 08		      ldx	#8
   1386  22f0		       4c eb ff 	      jmp	BS_jsr
   1387  22f3				   ret_point9
   1388  22f3				   .skipL0125
   1389  22f3				   .
   1390  22f3							; 
   1391  22f3
   1392  22f3				   .
   1393  22f3							; 
   1394  22f3
   1395  22f3				   .L0126		;  if foodX = 0  &&  foodY = 0 then gosub _UpdateFood bank3
   1396  22f3
   1397  22f3		       a5 d4		      LDA	foodX
   1398  22f5		       c9 00		      CMP	#0
   1399  22f7		       d0 1e		      BNE	.skipL0126
   1400  22f9				   .condpart16
   1401  22f9		       a5 d5		      LDA	foodY
   1402  22fb		       c9 00		      CMP	#0
   1403  22fd		       d0 18		      BNE	.skip16then
   1404  22ff				   .condpart17
   1405  22ff		       85 ee		      sta	temp7
   1406  2301		       a9 33		      lda	#>(ret_point10-1)
   1407  2303		       48		      pha
   1408  2304		       a9 16		      lda	#<(ret_point10-1)
   1409  2306		       48		      pha
   1410  2307		       a9 52		      lda	#>(._UpdateFood-1)
   1411  2309		       48		      pha
   1412  230a		       a9 51		      lda	#<(._UpdateFood-1)
   1413  230c		       48		      pha
   1414  230d		       a5 ee		      lda	temp7
   1415  230f		       48		      pha
   1416  2310		       8a		      txa
   1417  2311		       48		      pha
   1418  2312		       a2 03		      ldx	#3
   1419  2314		       4c eb ff 	      jmp	BS_jsr
   1420  2317				   ret_point10
   1421  2317				   .skip16then
   1422  2317				   .skipL0126
   1423  2317				   .
   1424  2317							; 
   1425  2317
   1426  2317				   .L0127		;  if eatSound = 0 then goto _SkipSound1
   1427  2317
   1428  2317		       a5 d9		      LDA	eatSound
   1429  2319		       c9 00		      CMP	#0
   1430  231b		       d0 03		      BNE	.skipL0127
   1431  231d				   .condpart18
   1432  231d		       4c 2e 33 	      jmp	._SkipSound1
   1433  2320
   1434  2320				   .skipL0127
   1435  2320				   .L0128		;  AUDV0  =  8  :  AUDC0  =  4  :  AUDF0  =  19
   1436  2320
   1437  2320		       a9 08		      LDA	#8
   1438  2322		       85 19		      STA	AUDV0
   1439  2324		       a9 04		      LDA	#4
   1440  2326		       85 15		      STA	AUDC0
   1441  2328		       a9 13		      LDA	#19
   1442  232a		       85 17		      STA	AUDF0
   1443  232c				   .L0129		;  eatSound  =  eatSound - 1
   1444  232c
   1445  232c		       c6 d9		      DEC	eatSound
   1446  232e				   ._SkipSound1
   1447  232e							; _SkipSound1
   1448  232e
   1449  232e				   .L0130		;  if !eatSound then AUDV0  =	0
   1450  232e
   1451  232e		       a5 d9		      LDA	eatSound
   1452  2330		       d0 04		      BNE	.skipL0130
   1453  2332				   .condpart19
   1454  2332		       a9 00		      LDA	#0
   1455  2334		       85 19		      STA	AUDV0
   1456  2336				   .skipL0130
   1457  2336				   .
   1458  2336							; 
   1459  2336
   1460  2336				   .L0131		;  counter  =	counter + 1
   1461  2336
   1462  2336		       e6 d6		      INC	counter
   1463  2338				   .L0132		;  if counter	>  speed then gosub _UpdateSnake bank3
   1464  2338
   1465  2338		       a5 e6		      LDA	speed
   1466  233a		       c5 d6		      CMP	counter
   1467  233c		       b0 18		      BCS	.skipL0132
   1468  233e				   .condpart20
   1469  233e		       85 ee		      sta	temp7
   1470  2340		       a9 33		      lda	#>(ret_point11-1)
   1471  2342		       48		      pha
   1472  2343		       a9 55		      lda	#<(ret_point11-1)
   1473  2345		       48		      pha
   1474  2346		       a9 51		      lda	#>(._UpdateSnake-1)
   1475  2348		       48		      pha
   1476  2349		       a9 0a		      lda	#<(._UpdateSnake-1)
   1477  234b		       48		      pha
   1478  234c		       a5 ee		      lda	temp7
   1479  234e		       48		      pha
   1480  234f		       8a		      txa
   1481  2350		       48		      pha
   1482  2351		       a2 03		      ldx	#3
   1483  2353		       4c eb ff 	      jmp	BS_jsr
   1484  2356				   ret_point11
   1485  2356				   .skipL0132
   1486  2356				   .L0133		;  if headX = foodX  &&  headY = foodY then gosub _UpdateEat bank3
   1487  2356
   1488  2356		       a5 eb		      LDA	headX
   1489  2358		       c5 d4		      CMP	foodX
   1490  235a		       d0 1e		      BNE	.skipL0133
   1491  235c				   .condpart21
   1492  235c		       a5 ec		      LDA	headY
   1493  235e		       c5 d5		      CMP	foodY
   1494  2360		       d0 18		      BNE	.skip21then
   1495  2362				   .condpart22
   1496  2362		       85 ee		      sta	temp7
   1497  2364		       a9 33		      lda	#>(ret_point12-1)
   1498  2366		       48		      pha
   1499  2367		       a9 79		      lda	#<(ret_point12-1)
   1500  2369		       48		      pha
   1501  236a		       a9 52		      lda	#>(._UpdateEat-1)
   1502  236c		       48		      pha
   1503  236d		       a9 b4		      lda	#<(._UpdateEat-1)
   1504  236f		       48		      pha
   1505  2370		       a5 ee		      lda	temp7
   1506  2372		       48		      pha
   1507  2373		       8a		      txa
   1508  2374		       48		      pha
   1509  2375		       a2 03		      ldx	#3
   1510  2377		       4c eb ff 	      jmp	BS_jsr
   1511  237a				   ret_point12
   1512  237a				   .skip21then
   1513  237a				   .skipL0133
   1514  237a				   .
   1515  237a							; 
   1516  237a
   1517  237a				   .
   1518  237a							; 
   1519  237a
   1520  237a				   .L0134		;  if joy0up  &&  headDir <> SOUTH then headDir = NORTH
   1521  237a
   1522  237a		       a9 10		      lda	#$10
   1523  237c		       2c 80 02 	      bit	SWCHA
   1524  237f		       d0 0a		      BNE	.skipL0134
   1525  2381				   .condpart23
   1526  2381		       a5 d7		      LDA	headDir
   1527  2383		       c9 aa		      CMP	#SOUTH
   1528  2385		       f0 04		      BEQ	.skip23then
   1529  2387				   .condpart24
   1530  2387		       a9 00		      LDA	#NORTH
   1531  2389		       85 d7		      STA	headDir
   1532  238b				   .skip23then
   1533  238b				   .skipL0134
   1534  238b				   .L0135		;  if joy0down  &&  headDir <> NORTH then headDir = SOUTH
   1535  238b
   1536  238b		       a9 20		      lda	#$20
   1537  238d		       2c 80 02 	      bit	SWCHA
   1538  2390		       d0 0a		      BNE	.skipL0135
   1539  2392				   .condpart25
   1540  2392		       a5 d7		      LDA	headDir
   1541  2394		       c9 00		      CMP	#NORTH
   1542  2396		       f0 04		      BEQ	.skip25then
   1543  2398				   .condpart26
   1544  2398		       a9 aa		      LDA	#SOUTH
   1545  239a		       85 d7		      STA	headDir
   1546  239c				   .skip25then
   1547  239c				   .skipL0135
   1548  239c				   .L0136		;  if joy0left  &&  headDir <> EAST then headDir = WEST
   1549  239c
   1550  239c		       2c 80 02 	      bit	SWCHA
   1551  239f		       70 0a		      BVS	.skipL0136
   1552  23a1				   .condpart27
   1553  23a1		       a5 d7		      LDA	headDir
   1554  23a3		       c9 55		      CMP	#EAST
   1555  23a5		       f0 04		      BEQ	.skip27then
   1556  23a7				   .condpart28
   1557  23a7		       a9 ff		      LDA	#WEST
   1558  23a9		       85 d7		      STA	headDir
   1559  23ab				   .skip27then
   1560  23ab				   .skipL0136
   1561  23ab				   .L0137		;  if joy0right  &&  headDir <> WEST then headDir = EAST
   1562  23ab
   1563  23ab		       2c 80 02 	      bit	SWCHA
   1564  23ae		       30 0a		      BMI	.skipL0137
   1565  23b0				   .condpart29
   1566  23b0		       a5 d7		      LDA	headDir
   1567  23b2		       c9 ff		      CMP	#WEST
   1568  23b4		       f0 04		      BEQ	.skip29then
   1569  23b6				   .condpart30
   1570  23b6		       a9 55		      LDA	#EAST
   1571  23b8		       85 d7		      STA	headDir
   1572  23ba				   .skip29then
   1573  23ba				   .skipL0137
   1574  23ba				   .
   1575  23ba							; 
   1576  23ba
   1577  23ba				   .
   1578  23ba							; 
   1579  23ba
   1580  23ba				   .
   1581  23ba							; 
   1582  23ba
   1583  23ba				   .
   1584  23ba							; 
   1585  23ba
   1586  23ba				   .L0138		;  goto _MainLoop
   1587  23ba
   1588  23ba		       4c 15 32 	      jmp	._MainLoop
   1589  23bd
   1590  23bd				   .
   1591  23bd							; 
   1592  23bd
   1593  23bd				   .
   1594  23bd							; 
   1595  23bd
   1596  23bd				   .
   1597  23bd							; 
   1598  23bd
   1599  23bd				   .
   1600  23bd							; 
   1601  23bd
   1602  23bd				   .
   1603  23bd							; 
   1604  23bd
   1605  23bd				   .
   1606  23bd							; 
   1607  23bd
   1608  23bd				   .
   1609  23bd							; 
   1610  23bd
   1611  23bd				   .L0139		;  bank 3
   1612  23bd
   1613  23bd					      if	ECHO2
      3095 bytes of ROM space left in bank 2
   1614  23bd					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   1615  23bd					      endif
   1616  23bd		       00 01	   ECHO2      =	1
   1617  2fd4					      ORG	$2FF4-bscode_length
   1618  2fd4					      RORG	$3FF4-bscode_length
   1619  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   1620  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1621  2fd6				  -	      stx	FASTFETCH
   1622  2fd6					      endif
   1623  2fd6		       9a		      txs
   1624  2fd7				  -	      if	bankswitch == 64
   1625  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1626  2fd7					      else
   1627  2fd7		       a9 f3		      lda	#>(start-1)
   1628  2fd9					      endif
   1629  2fd9		       48		      pha
   1630  2fda		       a9 59		      lda	#<(start-1)
   1631  2fdc		       48		      pha
   1632  2fdd		       48		      pha
   1633  2fde		       8a		      txa
   1634  2fdf		       48		      pha
   1635  2fe0		       ba		      tsx
   1636  2fe1					      if	bankswitch != 64
   1637  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   1638  2fe3		       2a		      rol
   1639  2fe4		       2a		      rol
   1640  2fe5		       2a		      rol
   1641  2fe6		       2a		      rol
   1642  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1643  2fe9		       aa		      tax
   1644  2fea		       e8		      inx
   1645  2feb				  -	      else
   1646  2feb				  -	      lda	4,x	; get high byte of return address
   1647  2feb				  -	      tay
   1648  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1649  2feb				  -	      sta	4,x
   1650  2feb				  -	      tya
   1651  2feb				  -	      lsr
   1652  2feb				  -	      lsr
   1653  2feb				  -	      lsr
   1654  2feb				  -	      lsr
   1655  2feb				  -	      tax
   1656  2feb				  -	      inx
   1657  2feb					      endif
   1658  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   1659  2fee		       68		      pla
   1660  2fef		       aa		      tax
   1661  2ff0		       68		      pla
   1662  2ff1		       60		      rts
   1663  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1664  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1665  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1666  2ff2					      endif
   1667  2ffc					      ORG	$2FFC
   1668  2ffc					      RORG	$3FFC
   1669  2ffc		       d4 3f		      .word.w	(start_bank2 & $ffff)
   1670  2ffe		       d4 3f		      .word.w	(start_bank2 & $ffff)
   1671  3000					      ORG	$3000
   1672  3000					      RORG	$5000
   1673  3000					      repeat	256
   1674  3000		       ff		      .byte.b	$ff
   1673  3000					      repend
   1674  3001		       ff		      .byte.b	$ff
   1673  3001					      repend
   1674  3002		       ff		      .byte.b	$ff
   1673  3002					      repend
   1674  3003		       ff		      .byte.b	$ff
   1673  3003					      repend
   1674  3004		       ff		      .byte.b	$ff
   1673  3004					      repend
   1674  3005		       ff		      .byte.b	$ff
   1673  3005					      repend
   1674  3006		       ff		      .byte.b	$ff
   1673  3006					      repend
   1674  3007		       ff		      .byte.b	$ff
   1673  3007					      repend
   1674  3008		       ff		      .byte.b	$ff
   1673  3008					      repend
   1674  3009		       ff		      .byte.b	$ff
   1673  3009					      repend
   1674  300a		       ff		      .byte.b	$ff
   1673  300a					      repend
   1674  300b		       ff		      .byte.b	$ff
   1673  300b					      repend
   1674  300c		       ff		      .byte.b	$ff
   1673  300c					      repend
   1674  300d		       ff		      .byte.b	$ff
   1673  300d					      repend
   1674  300e		       ff		      .byte.b	$ff
   1673  300e					      repend
   1674  300f		       ff		      .byte.b	$ff
   1673  300f					      repend
   1674  3010		       ff		      .byte.b	$ff
   1673  3010					      repend
   1674  3011		       ff		      .byte.b	$ff
   1673  3011					      repend
   1674  3012		       ff		      .byte.b	$ff
   1673  3012					      repend
   1674  3013		       ff		      .byte.b	$ff
   1673  3013					      repend
   1674  3014		       ff		      .byte.b	$ff
   1673  3014					      repend
   1674  3015		       ff		      .byte.b	$ff
   1673  3015					      repend
   1674  3016		       ff		      .byte.b	$ff
   1673  3016					      repend
   1674  3017		       ff		      .byte.b	$ff
   1673  3017					      repend
   1674  3018		       ff		      .byte.b	$ff
   1673  3018					      repend
   1674  3019		       ff		      .byte.b	$ff
   1673  3019					      repend
   1674  301a		       ff		      .byte.b	$ff
   1673  301a					      repend
   1674  301b		       ff		      .byte.b	$ff
   1673  301b					      repend
   1674  301c		       ff		      .byte.b	$ff
   1673  301c					      repend
   1674  301d		       ff		      .byte.b	$ff
   1673  301d					      repend
   1674  301e		       ff		      .byte.b	$ff
   1673  301e					      repend
   1674  301f		       ff		      .byte.b	$ff
   1673  301f					      repend
   1674  3020		       ff		      .byte.b	$ff
   1673  3020					      repend
   1674  3021		       ff		      .byte.b	$ff
   1673  3021					      repend
   1674  3022		       ff		      .byte.b	$ff
   1673  3022					      repend
   1674  3023		       ff		      .byte.b	$ff
   1673  3023					      repend
   1674  3024		       ff		      .byte.b	$ff
   1673  3024					      repend
   1674  3025		       ff		      .byte.b	$ff
   1673  3025					      repend
   1674  3026		       ff		      .byte.b	$ff
   1673  3026					      repend
   1674  3027		       ff		      .byte.b	$ff
   1673  3027					      repend
   1674  3028		       ff		      .byte.b	$ff
   1673  3028					      repend
   1674  3029		       ff		      .byte.b	$ff
   1673  3029					      repend
   1674  302a		       ff		      .byte.b	$ff
   1673  302a					      repend
   1674  302b		       ff		      .byte.b	$ff
   1673  302b					      repend
   1674  302c		       ff		      .byte.b	$ff
   1673  302c					      repend
   1674  302d		       ff		      .byte.b	$ff
   1673  302d					      repend
   1674  302e		       ff		      .byte.b	$ff
   1673  302e					      repend
   1674  302f		       ff		      .byte.b	$ff
   1673  302f					      repend
   1674  3030		       ff		      .byte.b	$ff
   1673  3030					      repend
   1674  3031		       ff		      .byte.b	$ff
   1673  3031					      repend
   1674  3032		       ff		      .byte.b	$ff
   1673  3032					      repend
   1674  3033		       ff		      .byte.b	$ff
   1673  3033					      repend
   1674  3034		       ff		      .byte.b	$ff
   1673  3034					      repend
   1674  3035		       ff		      .byte.b	$ff
   1673  3035					      repend
   1674  3036		       ff		      .byte.b	$ff
   1673  3036					      repend
   1674  3037		       ff		      .byte.b	$ff
   1673  3037					      repend
   1674  3038		       ff		      .byte.b	$ff
   1673  3038					      repend
   1674  3039		       ff		      .byte.b	$ff
   1673  3039					      repend
   1674  303a		       ff		      .byte.b	$ff
   1673  303a					      repend
   1674  303b		       ff		      .byte.b	$ff
   1673  303b					      repend
   1674  303c		       ff		      .byte.b	$ff
   1673  303c					      repend
   1674  303d		       ff		      .byte.b	$ff
   1673  303d					      repend
   1674  303e		       ff		      .byte.b	$ff
   1673  303e					      repend
   1674  303f		       ff		      .byte.b	$ff
   1673  303f					      repend
   1674  3040		       ff		      .byte.b	$ff
   1673  3040					      repend
   1674  3041		       ff		      .byte.b	$ff
   1673  3041					      repend
   1674  3042		       ff		      .byte.b	$ff
   1673  3042					      repend
   1674  3043		       ff		      .byte.b	$ff
   1673  3043					      repend
   1674  3044		       ff		      .byte.b	$ff
   1673  3044					      repend
   1674  3045		       ff		      .byte.b	$ff
   1673  3045					      repend
   1674  3046		       ff		      .byte.b	$ff
   1673  3046					      repend
   1674  3047		       ff		      .byte.b	$ff
   1673  3047					      repend
   1674  3048		       ff		      .byte.b	$ff
   1673  3048					      repend
   1674  3049		       ff		      .byte.b	$ff
   1673  3049					      repend
   1674  304a		       ff		      .byte.b	$ff
   1673  304a					      repend
   1674  304b		       ff		      .byte.b	$ff
   1673  304b					      repend
   1674  304c		       ff		      .byte.b	$ff
   1673  304c					      repend
   1674  304d		       ff		      .byte.b	$ff
   1673  304d					      repend
   1674  304e		       ff		      .byte.b	$ff
   1673  304e					      repend
   1674  304f		       ff		      .byte.b	$ff
   1673  304f					      repend
   1674  3050		       ff		      .byte.b	$ff
   1673  3050					      repend
   1674  3051		       ff		      .byte.b	$ff
   1673  3051					      repend
   1674  3052		       ff		      .byte.b	$ff
   1673  3052					      repend
   1674  3053		       ff		      .byte.b	$ff
   1673  3053					      repend
   1674  3054		       ff		      .byte.b	$ff
   1673  3054					      repend
   1674  3055		       ff		      .byte.b	$ff
   1673  3055					      repend
   1674  3056		       ff		      .byte.b	$ff
   1673  3056					      repend
   1674  3057		       ff		      .byte.b	$ff
   1673  3057					      repend
   1674  3058		       ff		      .byte.b	$ff
   1673  3058					      repend
   1674  3059		       ff		      .byte.b	$ff
   1673  3059					      repend
   1674  305a		       ff		      .byte.b	$ff
   1673  305a					      repend
   1674  305b		       ff		      .byte.b	$ff
   1673  305b					      repend
   1674  305c		       ff		      .byte.b	$ff
   1673  305c					      repend
   1674  305d		       ff		      .byte.b	$ff
   1673  305d					      repend
   1674  305e		       ff		      .byte.b	$ff
   1673  305e					      repend
   1674  305f		       ff		      .byte.b	$ff
   1673  305f					      repend
   1674  3060		       ff		      .byte.b	$ff
   1673  3060					      repend
   1674  3061		       ff		      .byte.b	$ff
   1673  3061					      repend
   1674  3062		       ff		      .byte.b	$ff
   1673  3062					      repend
   1674  3063		       ff		      .byte.b	$ff
   1673  3063					      repend
   1674  3064		       ff		      .byte.b	$ff
   1673  3064					      repend
   1674  3065		       ff		      .byte.b	$ff
   1673  3065					      repend
   1674  3066		       ff		      .byte.b	$ff
   1673  3066					      repend
   1674  3067		       ff		      .byte.b	$ff
   1673  3067					      repend
   1674  3068		       ff		      .byte.b	$ff
   1673  3068					      repend
   1674  3069		       ff		      .byte.b	$ff
   1673  3069					      repend
   1674  306a		       ff		      .byte.b	$ff
   1673  306a					      repend
   1674  306b		       ff		      .byte.b	$ff
   1673  306b					      repend
   1674  306c		       ff		      .byte.b	$ff
   1673  306c					      repend
   1674  306d		       ff		      .byte.b	$ff
   1673  306d					      repend
   1674  306e		       ff		      .byte.b	$ff
   1673  306e					      repend
   1674  306f		       ff		      .byte.b	$ff
   1673  306f					      repend
   1674  3070		       ff		      .byte.b	$ff
   1673  3070					      repend
   1674  3071		       ff		      .byte.b	$ff
   1673  3071					      repend
   1674  3072		       ff		      .byte.b	$ff
   1673  3072					      repend
   1674  3073		       ff		      .byte.b	$ff
   1673  3073					      repend
   1674  3074		       ff		      .byte.b	$ff
   1673  3074					      repend
   1674  3075		       ff		      .byte.b	$ff
   1673  3075					      repend
   1674  3076		       ff		      .byte.b	$ff
   1673  3076					      repend
   1674  3077		       ff		      .byte.b	$ff
   1673  3077					      repend
   1674  3078		       ff		      .byte.b	$ff
   1673  3078					      repend
   1674  3079		       ff		      .byte.b	$ff
   1673  3079					      repend
   1674  307a		       ff		      .byte.b	$ff
   1673  307a					      repend
   1674  307b		       ff		      .byte.b	$ff
   1673  307b					      repend
   1674  307c		       ff		      .byte.b	$ff
   1673  307c					      repend
   1674  307d		       ff		      .byte.b	$ff
   1673  307d					      repend
   1674  307e		       ff		      .byte.b	$ff
   1673  307e					      repend
   1674  307f		       ff		      .byte.b	$ff
   1673  307f					      repend
   1674  3080		       ff		      .byte.b	$ff
   1673  3080					      repend
   1674  3081		       ff		      .byte.b	$ff
   1673  3081					      repend
   1674  3082		       ff		      .byte.b	$ff
   1673  3082					      repend
   1674  3083		       ff		      .byte.b	$ff
   1673  3083					      repend
   1674  3084		       ff		      .byte.b	$ff
   1673  3084					      repend
   1674  3085		       ff		      .byte.b	$ff
   1673  3085					      repend
   1674  3086		       ff		      .byte.b	$ff
   1673  3086					      repend
   1674  3087		       ff		      .byte.b	$ff
   1673  3087					      repend
   1674  3088		       ff		      .byte.b	$ff
   1673  3088					      repend
   1674  3089		       ff		      .byte.b	$ff
   1673  3089					      repend
   1674  308a		       ff		      .byte.b	$ff
   1673  308a					      repend
   1674  308b		       ff		      .byte.b	$ff
   1673  308b					      repend
   1674  308c		       ff		      .byte.b	$ff
   1673  308c					      repend
   1674  308d		       ff		      .byte.b	$ff
   1673  308d					      repend
   1674  308e		       ff		      .byte.b	$ff
   1673  308e					      repend
   1674  308f		       ff		      .byte.b	$ff
   1673  308f					      repend
   1674  3090		       ff		      .byte.b	$ff
   1673  3090					      repend
   1674  3091		       ff		      .byte.b	$ff
   1673  3091					      repend
   1674  3092		       ff		      .byte.b	$ff
   1673  3092					      repend
   1674  3093		       ff		      .byte.b	$ff
   1673  3093					      repend
   1674  3094		       ff		      .byte.b	$ff
   1673  3094					      repend
   1674  3095		       ff		      .byte.b	$ff
   1673  3095					      repend
   1674  3096		       ff		      .byte.b	$ff
   1673  3096					      repend
   1674  3097		       ff		      .byte.b	$ff
   1673  3097					      repend
   1674  3098		       ff		      .byte.b	$ff
   1673  3098					      repend
   1674  3099		       ff		      .byte.b	$ff
   1673  3099					      repend
   1674  309a		       ff		      .byte.b	$ff
   1673  309a					      repend
   1674  309b		       ff		      .byte.b	$ff
   1673  309b					      repend
   1674  309c		       ff		      .byte.b	$ff
   1673  309c					      repend
   1674  309d		       ff		      .byte.b	$ff
   1673  309d					      repend
   1674  309e		       ff		      .byte.b	$ff
   1673  309e					      repend
   1674  309f		       ff		      .byte.b	$ff
   1673  309f					      repend
   1674  30a0		       ff		      .byte.b	$ff
   1673  30a0					      repend
   1674  30a1		       ff		      .byte.b	$ff
   1673  30a1					      repend
   1674  30a2		       ff		      .byte.b	$ff
   1673  30a2					      repend
   1674  30a3		       ff		      .byte.b	$ff
   1673  30a3					      repend
   1674  30a4		       ff		      .byte.b	$ff
   1673  30a4					      repend
   1674  30a5		       ff		      .byte.b	$ff
   1673  30a5					      repend
   1674  30a6		       ff		      .byte.b	$ff
   1673  30a6					      repend
   1674  30a7		       ff		      .byte.b	$ff
   1673  30a7					      repend
   1674  30a8		       ff		      .byte.b	$ff
   1673  30a8					      repend
   1674  30a9		       ff		      .byte.b	$ff
   1673  30a9					      repend
   1674  30aa		       ff		      .byte.b	$ff
   1673  30aa					      repend
   1674  30ab		       ff		      .byte.b	$ff
   1673  30ab					      repend
   1674  30ac		       ff		      .byte.b	$ff
   1673  30ac					      repend
   1674  30ad		       ff		      .byte.b	$ff
   1673  30ad					      repend
   1674  30ae		       ff		      .byte.b	$ff
   1673  30ae					      repend
   1674  30af		       ff		      .byte.b	$ff
   1673  30af					      repend
   1674  30b0		       ff		      .byte.b	$ff
   1673  30b0					      repend
   1674  30b1		       ff		      .byte.b	$ff
   1673  30b1					      repend
   1674  30b2		       ff		      .byte.b	$ff
   1673  30b2					      repend
   1674  30b3		       ff		      .byte.b	$ff
   1673  30b3					      repend
   1674  30b4		       ff		      .byte.b	$ff
   1673  30b4					      repend
   1674  30b5		       ff		      .byte.b	$ff
   1673  30b5					      repend
   1674  30b6		       ff		      .byte.b	$ff
   1673  30b6					      repend
   1674  30b7		       ff		      .byte.b	$ff
   1673  30b7					      repend
   1674  30b8		       ff		      .byte.b	$ff
   1673  30b8					      repend
   1674  30b9		       ff		      .byte.b	$ff
   1673  30b9					      repend
   1674  30ba		       ff		      .byte.b	$ff
   1673  30ba					      repend
   1674  30bb		       ff		      .byte.b	$ff
   1673  30bb					      repend
   1674  30bc		       ff		      .byte.b	$ff
   1673  30bc					      repend
   1674  30bd		       ff		      .byte.b	$ff
   1673  30bd					      repend
   1674  30be		       ff		      .byte.b	$ff
   1673  30be					      repend
   1674  30bf		       ff		      .byte.b	$ff
   1673  30bf					      repend
   1674  30c0		       ff		      .byte.b	$ff
   1673  30c0					      repend
   1674  30c1		       ff		      .byte.b	$ff
   1673  30c1					      repend
   1674  30c2		       ff		      .byte.b	$ff
   1673  30c2					      repend
   1674  30c3		       ff		      .byte.b	$ff
   1673  30c3					      repend
   1674  30c4		       ff		      .byte.b	$ff
   1673  30c4					      repend
   1674  30c5		       ff		      .byte.b	$ff
   1673  30c5					      repend
   1674  30c6		       ff		      .byte.b	$ff
   1673  30c6					      repend
   1674  30c7		       ff		      .byte.b	$ff
   1673  30c7					      repend
   1674  30c8		       ff		      .byte.b	$ff
   1673  30c8					      repend
   1674  30c9		       ff		      .byte.b	$ff
   1673  30c9					      repend
   1674  30ca		       ff		      .byte.b	$ff
   1673  30ca					      repend
   1674  30cb		       ff		      .byte.b	$ff
   1673  30cb					      repend
   1674  30cc		       ff		      .byte.b	$ff
   1673  30cc					      repend
   1674  30cd		       ff		      .byte.b	$ff
   1673  30cd					      repend
   1674  30ce		       ff		      .byte.b	$ff
   1673  30ce					      repend
   1674  30cf		       ff		      .byte.b	$ff
   1673  30cf					      repend
   1674  30d0		       ff		      .byte.b	$ff
   1673  30d0					      repend
   1674  30d1		       ff		      .byte.b	$ff
   1673  30d1					      repend
   1674  30d2		       ff		      .byte.b	$ff
   1673  30d2					      repend
   1674  30d3		       ff		      .byte.b	$ff
   1673  30d3					      repend
   1674  30d4		       ff		      .byte.b	$ff
   1673  30d4					      repend
   1674  30d5		       ff		      .byte.b	$ff
   1673  30d5					      repend
   1674  30d6		       ff		      .byte.b	$ff
   1673  30d6					      repend
   1674  30d7		       ff		      .byte.b	$ff
   1673  30d7					      repend
   1674  30d8		       ff		      .byte.b	$ff
   1673  30d8					      repend
   1674  30d9		       ff		      .byte.b	$ff
   1673  30d9					      repend
   1674  30da		       ff		      .byte.b	$ff
   1673  30da					      repend
   1674  30db		       ff		      .byte.b	$ff
   1673  30db					      repend
   1674  30dc		       ff		      .byte.b	$ff
   1673  30dc					      repend
   1674  30dd		       ff		      .byte.b	$ff
   1673  30dd					      repend
   1674  30de		       ff		      .byte.b	$ff
   1673  30de					      repend
   1674  30df		       ff		      .byte.b	$ff
   1673  30df					      repend
   1674  30e0		       ff		      .byte.b	$ff
   1673  30e0					      repend
   1674  30e1		       ff		      .byte.b	$ff
   1673  30e1					      repend
   1674  30e2		       ff		      .byte.b	$ff
   1673  30e2					      repend
   1674  30e3		       ff		      .byte.b	$ff
   1673  30e3					      repend
   1674  30e4		       ff		      .byte.b	$ff
   1673  30e4					      repend
   1674  30e5		       ff		      .byte.b	$ff
   1673  30e5					      repend
   1674  30e6		       ff		      .byte.b	$ff
   1673  30e6					      repend
   1674  30e7		       ff		      .byte.b	$ff
   1673  30e7					      repend
   1674  30e8		       ff		      .byte.b	$ff
   1673  30e8					      repend
   1674  30e9		       ff		      .byte.b	$ff
   1673  30e9					      repend
   1674  30ea		       ff		      .byte.b	$ff
   1673  30ea					      repend
   1674  30eb		       ff		      .byte.b	$ff
   1673  30eb					      repend
   1674  30ec		       ff		      .byte.b	$ff
   1673  30ec					      repend
   1674  30ed		       ff		      .byte.b	$ff
   1673  30ed					      repend
   1674  30ee		       ff		      .byte.b	$ff
   1673  30ee					      repend
   1674  30ef		       ff		      .byte.b	$ff
   1673  30ef					      repend
   1674  30f0		       ff		      .byte.b	$ff
   1673  30f0					      repend
   1674  30f1		       ff		      .byte.b	$ff
   1673  30f1					      repend
   1674  30f2		       ff		      .byte.b	$ff
   1673  30f2					      repend
   1674  30f3		       ff		      .byte.b	$ff
   1673  30f3					      repend
   1674  30f4		       ff		      .byte.b	$ff
   1673  30f4					      repend
   1674  30f5		       ff		      .byte.b	$ff
   1673  30f5					      repend
   1674  30f6		       ff		      .byte.b	$ff
   1673  30f6					      repend
   1674  30f7		       ff		      .byte.b	$ff
   1673  30f7					      repend
   1674  30f8		       ff		      .byte.b	$ff
   1673  30f8					      repend
   1674  30f9		       ff		      .byte.b	$ff
   1673  30f9					      repend
   1674  30fa		       ff		      .byte.b	$ff
   1673  30fa					      repend
   1674  30fb		       ff		      .byte.b	$ff
   1673  30fb					      repend
   1674  30fc		       ff		      .byte.b	$ff
   1673  30fc					      repend
   1674  30fd		       ff		      .byte.b	$ff
   1673  30fd					      repend
   1674  30fe		       ff		      .byte.b	$ff
   1673  30fe					      repend
   1674  30ff		       ff		      .byte.b	$ff
   1675  3100					      repend
   1676  3100				   .
   1677  3100							; 
   1678  3100
   1679  3100				   .L0140		;  temp1  =  temp1
   1680  3100
   1681  3100		       a5 9c		      LDA	temp1
   1682  3102		       85 9c		      STA	temp1
   1683  3104				   .
   1684  3104							; 
   1685  3104
   1686  3104				   .L0141		;  data MASKS
   1687  3104
   1688  3104		       4c 0b 51 	      JMP	.skipL0141
   1689  3107				   MASKS
   1690  3107		       03 0c 30 c0	      .byte.b	%00000011, %00001100, %00110000, %11000000
   1691  310b
   1692  310b				   .skipL0141
   1693  310b				   .
   1694  310b							; 
   1695  310b
   1696  310b				   ._UpdateSnake
   1697  310b							; _UpdateSnake
   1698  310b
   1699  310b				   .L0142		;  counter = 0
   1700  310b
   1701  310b		       a9 00		      LDA	#0
   1702  310d		       85 d6		      STA	counter
   1703  310f				   .
   1704  310f							; 
   1705  310f
   1706  310f				   .L0143		;  if grown > 0 then grown = grown - 1  :  length = length + 1 else gosub _UpdateTail
   1707  310f
   1708  310f		       a9 00		      LDA	#0
   1709  3111		       c5 da		      CMP	grown
   1710  3113		       b0 07		      BCS	.skipL0143
   1711  3115				   .condpart31
   1712  3115		       c6 da		      DEC	grown
   1713  3117		       e6 df		      INC	length
   1714  3119		       4c 1f 51 	      jmp	.skipelse7
   1715  311c				   .skipL0143
   1716  311c		       20 da 51 	      jsr	._UpdateTail
   1717  311f
   1718  311f				   .skipelse7
   1719  311f				   .
   1720  311f							; 
   1721  311f
   1722  311f				   .
   1723  311f							; 
   1724  311f
   1725  311f				   .L0144		;  speed  =   ( SNAKE_MAX_LEN - length )  / 16
   1726  311f
   1727  311f							; complex statement detected
   1728  311f		       a9 c0		      LDA	#SNAKE_MAX_LEN
   1729  3121		       38		      SEC
   1730  3122		       e5 df		      SBC	length
   1731  3124		       4a		      lsr
   1732  3125		       4a		      lsr
   1733  3126		       4a		      lsr
   1734  3127		       4a		      lsr
   1735  3128		       85 e6		      STA	speed
   1736  312a				   .
   1737  312a							; 
   1738  312a
   1739  312a				   .L0145		;  gosub _UpdateHead
   1740  312a
   1741  312a		       20 3a 51 	      jsr	._UpdateHead
   1742  312d
   1743  312d				   .
   1744  312d							; 
   1745  312d
   1746  312d				   .
   1747  312d							; 
   1748  312d
   1749  312d				   .
   1750  312d							; 
   1751  312d
   1752  312d				   .
   1753  312d							; 
   1754  312d
   1755  312d				   .
   1756  312d							; 
   1757  312d
   1758  312d				   .
   1759  312d							; 
   1760  312d
   1761  312d				   .L0146		;  return
   1762  312d
   1763  312d		       ba		      tsx
   1764  312e		       b5 02		      lda	2,x	; check return address
   1765  3130		       49 51		      eor	#(>*)	; vs. current PCH
   1766  3132		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   1767  3134		       f0 03		      beq	*+5	; if equal, do normal return
   1768  3136		       4c dd ff 	      JMP	BS_return
   1769  3139		       60		      RTS
   1770  313a				   .
   1771  313a							; 
   1772  313a
   1773  313a				   ._UpdateHead
   1774  313a							; _UpdateHead
   1775  313a
   1776  313a				   .L0147		;  if headDir	=  NORTH then headY  =	headY - 1
   1777  313a
   1778  313a		       a5 d7		      LDA	headDir
   1779  313c		       c9 00		      CMP	#NORTH
   1780  313e		       d0 02		      BNE	.skipL0147
   1781  3140				   .condpart32
   1782  3140		       c6 ec		      DEC	headY
   1783  3142				   .skipL0147
   1784  3142				   .L0148		;  if headDir	=  EAST then headX  =  headX + 1
   1785  3142
   1786  3142		       a5 d7		      LDA	headDir
   1787  3144		       c9 55		      CMP	#EAST
   1788  3146		       d0 02		      BNE	.skipL0148
   1789  3148				   .condpart33
   1790  3148		       e6 eb		      INC	headX
   1791  314a				   .skipL0148
   1792  314a				   .L0149		;  if headDir	=  SOUTH then headY  =	headY + 1
   1793  314a
   1794  314a		       a5 d7		      LDA	headDir
   1795  314c		       c9 aa		      CMP	#SOUTH
   1796  314e		       d0 02		      BNE	.skipL0149
   1797  3150				   .condpart34
   1798  3150		       e6 ec		      INC	headY
   1799  3152				   .skipL0149
   1800  3152				   .L0150		;  if headDir	=  WEST then headX  =  headX - 1
   1801  3152
   1802  3152		       a5 d7		      LDA	headDir
   1803  3154		       c9 ff		      CMP	#WEST
   1804  3156		       d0 02		      BNE	.skipL0150
   1805  3158				   .condpart35
   1806  3158		       c6 eb		      DEC	headX
   1807  315a				   .skipL0150
   1808  315a				   .
   1809  315a							; 
   1810  315a
   1811  315a				   .L0151		;  tailStart = tailStart + 1
   1812  315a
   1813  315a		       e6 db		      INC	tailStart
   1814  315c				   .L0152		;  if tailStart = SNAKE_MAX_LEN then tailStart = 0
   1815  315c
   1816  315c		       a5 db		      LDA	tailStart
   1817  315e		       c9 c0		      CMP	#SNAKE_MAX_LEN
   1818  3160		       d0 04		      BNE	.skipL0152
   1819  3162				   .condpart36
   1820  3162		       a9 00		      LDA	#0
   1821  3164		       85 db		      STA	tailStart
   1822  3166				   .skipL0152
   1823  3166				   .
   1824  3166							; 
   1825  3166
   1826  3166				   .L0153		;  temp1  =  tailStart  /  4
   1827  3166
   1828  3166		       a5 db		      LDA	tailStart
   1829  3168		       4a		      lsr
   1830  3169		       4a		      lsr
   1831  316a		       85 9c		      STA	temp1
   1832  316c				   .L0154		;  temp2  =  tailStart  &  %00000011
   1833  316c
   1834  316c		       a5 db		      LDA	tailStart
   1835  316e		       29 03		      AND	#%00000011
   1836  3170		       85 9d		      STA	temp2
   1837  3172				   .
   1838  3172							; 
   1839  3172
   1840  3172				   .L0155		;  temp3  =  headDir  &  MASKS[temp2]
   1841  3172
   1842  3172		       a5 d7		      LDA	headDir
   1843  3174		       a6 9d		      LDX	temp2
   1844  3176		       3d 07 51 	      AND	MASKS,x
   1845  3179		       85 9e		      STA	temp3
   1846  317b				   .
   1847  317b							; 
   1848  317b
   1849  317b				   .L0156		;  directions[temp1]  =  directions[temp1]  &	 ( MASKS[temp2]  ^  %11111111 ) 
   1850  317b
   1851  317b							; complex statement detected
   1852  317b		       a6 9c		      LDX	temp1
   1853  317d		       b5 a4		      LDA	directions,x
   1854  317f		       48		      PHA
   1855  3180		       a6 9d		      LDX	temp2
   1856  3182		       bd 07 51 	      LDA	MASKS,x
   1857  3185		       49 ff		      EOR	#%11111111
   1858  3187		       ba		      TSX
   1859  3188		       e8		      INX
   1860  3189		       9a		      TXS
   1861  318a		       35 00		      AND	$00,x
   1862  318c		       a6 9c		      LDX	temp1
   1863  318e		       95 a4		      STA	directions,x
   1864  3190				   .L0157		;  directions[temp1]  =  directions[temp1]  |	temp3
   1865  3190
   1866  3190		       a6 9c		      LDX	temp1
   1867  3192		       b5 a4		      LDA	directions,x
   1868  3194		       05 9e		      ORA	temp3
   1869  3196		       a6 9c		      LDX	temp1
   1870  3198		       95 a4		      STA	directions,x
   1871  319a				   .
   1872  319a							; 
   1873  319a
   1874  319a				   .L0158		;  if headX = foodX  &&  headY = foodY then goto _SkipCollisionCheck
   1875  319a
   1876  319a		       a5 eb		      LDA	headX
   1877  319c		       c5 d4		      CMP	foodX
   1878  319e		       d0 09		      BNE	.skipL0158
   1879  31a0				   .condpart37
   1880  31a0		       a5 ec		      LDA	headY
   1881  31a2		       c5 d5		      CMP	foodY
   1882  31a4		       d0 03		      BNE	.skip37then
   1883  31a6				   .condpart38
   1884  31a6		       4c cd 51 	      jmp	._SkipCollisionCheck
   1885  31a9
   1886  31a9				   .skip37then
   1887  31a9				   .skipL0158
   1888  31a9				   .L0159		;  if pfread ( headX ,  headY )  then bits2_GameOverFlag{2}  =  1
   1889  31a9
   1890  31a9		       a5 eb		      LDA	headX
   1891  31ab		       a4 ec		      LDY	headY
   1892  31ad		       85 ee		      sta	temp7
   1893  31af		       a9 51		      lda	#>(ret_point13-1)
   1894  31b1		       48		      pha
   1895  31b2		       a9 c4		      lda	#<(ret_point13-1)
   1896  31b4		       48		      pha
   1897  31b5		       a9 f3		      lda	#>(pfread-1)
   1898  31b7		       48		      pha
   1899  31b8		       a9 b4		      lda	#<(pfread-1)
   1900  31ba		       48		      pha
   1901  31bb		       a5 ee		      lda	temp7
   1902  31bd		       48		      pha
   1903  31be		       8a		      txa
   1904  31bf		       48		      pha
   1905  31c0		       a2 08		      ldx	#8
   1906  31c2		       4c eb ff 	      jmp	BS_jsr
   1907  31c5				   ret_point13
   1908  31c5		       d0 06		      BNE	.skipL0159
   1909  31c7				   .condpart39
   1910  31c7		       a5 ed		      LDA	bits2_GameOverFlag
   1911  31c9		       09 04		      ORA	#4
   1912  31cb		       85 ed		      STA	bits2_GameOverFlag
   1913  31cd				   .skipL0159
   1914  31cd				   .
   1915  31cd							; 
   1916  31cd
   1917  31cd				   ._SkipCollisionCheck
   1918  31cd							; _SkipCollisionCheck
   1919  31cd
   1920  31cd				   .L0160		;  return
   1921  31cd
   1922  31cd		       ba		      tsx
   1923  31ce		       b5 02		      lda	2,x	; check return address
   1924  31d0		       49 51		      eor	#(>*)	; vs. current PCH
   1925  31d2		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   1926  31d4		       f0 03		      beq	*+5	; if equal, do normal return
   1927  31d6		       4c dd ff 	      JMP	BS_return
   1928  31d9		       60		      RTS
   1929  31da				   .
   1930  31da							; 
   1931  31da
   1932  31da				   ._UpdateTail
   1933  31da							; _UpdateTail
   1934  31da
   1935  31da				   .
   1936  31da							; 
   1937  31da
   1938  31da				   .L0161		;  temp1  =  tailEnd  /  4
   1939  31da
   1940  31da		       a5 de		      LDA	tailEnd
   1941  31dc		       4a		      lsr
   1942  31dd		       4a		      lsr
   1943  31de		       85 9c		      STA	temp1
   1944  31e0				   .L0162		;  temp2  =  tailEnd  &  %00000011
   1945  31e0
   1946  31e0		       a5 de		      LDA	tailEnd
   1947  31e2		       29 03		      AND	#%00000011
   1948  31e4		       85 9d		      STA	temp2
   1949  31e6				   .
   1950  31e6							; 
   1951  31e6
   1952  31e6				   .L0163		;  temp3  =  directions[temp1]  &  MASKS[temp2]
   1953  31e6
   1954  31e6		       a6 9c		      LDX	temp1
   1955  31e8		       b5 a4		      LDA	directions,x
   1956  31ea		       a6 9d		      LDX	temp2
   1957  31ec		       3d 07 51 	      AND	MASKS,x
   1958  31ef		       85 9e		      STA	temp3
   1959  31f1				   .
   1960  31f1							; 
   1961  31f1
   1962  31f1				   .L0164		;  if temp3  =  NORTH	&  MASKS[temp2] then tailY  =  tailY - 1
   1963  31f1
   1964  31f1							; complex condition detected
   1965  31f1		       a9 00		      LDA	#NORTH
   1966  31f3		       a6 9d		      LDX	temp2
   1967  31f5		       3d 07 51 	      AND	MASKS,x
   1968  31f8		       48		      PHA
   1969  31f9		       ba		      TSX
   1970  31fa		       68		      PLA
   1971  31fb		       a5 9e		      LDA	temp3
   1972  31fd		       d5 01		      CMP	1,x
   1973  31ff		       d0 02		      BNE	.skipL0164
   1974  3201				   .condpart40
   1975  3201		       c6 dd		      DEC	tailY
   1976  3203				   .skipL0164
   1977  3203				   .L0165		;  if temp3  =  EAST  &  MASKS[temp2] then tailX  =  tailX + 1
   1978  3203
   1979  3203							; complex condition detected
   1980  3203		       a9 55		      LDA	#EAST
   1981  3205		       a6 9d		      LDX	temp2
   1982  3207		       3d 07 51 	      AND	MASKS,x
   1983  320a		       48		      PHA
   1984  320b		       ba		      TSX
   1985  320c		       68		      PLA
   1986  320d		       a5 9e		      LDA	temp3
   1987  320f		       d5 01		      CMP	1,x
   1988  3211		       d0 02		      BNE	.skipL0165
   1989  3213				   .condpart41
   1990  3213		       e6 dc		      INC	tailX
   1991  3215				   .skipL0165
   1992  3215				   .L0166		;  if temp3  =  SOUTH	&  MASKS[temp2] then tailY  =  tailY + 1
   1993  3215
   1994  3215							; complex condition detected
   1995  3215		       a9 aa		      LDA	#SOUTH
   1996  3217		       a6 9d		      LDX	temp2
   1997  3219		       3d 07 51 	      AND	MASKS,x
   1998  321c		       48		      PHA
   1999  321d		       ba		      TSX
   2000  321e		       68		      PLA
   2001  321f		       a5 9e		      LDA	temp3
   2002  3221		       d5 01		      CMP	1,x
   2003  3223		       d0 02		      BNE	.skipL0166
   2004  3225				   .condpart42
   2005  3225		       e6 dd		      INC	tailY
   2006  3227				   .skipL0166
   2007  3227				   .L0167		;  if temp3  =  WEST  &  MASKS[temp2] then tailX  =  tailX - 1
   2008  3227
   2009  3227							; complex condition detected
   2010  3227		       a9 ff		      LDA	#WEST
   2011  3229		       a6 9d		      LDX	temp2
   2012  322b		       3d 07 51 	      AND	MASKS,x
   2013  322e		       48		      PHA
   2014  322f		       ba		      TSX
   2015  3230		       68		      PLA
   2016  3231		       a5 9e		      LDA	temp3
   2017  3233		       d5 01		      CMP	1,x
   2018  3235		       d0 02		      BNE	.skipL0167
   2019  3237				   .condpart43
   2020  3237		       c6 dc		      DEC	tailX
   2021  3239				   .skipL0167
   2022  3239				   .
   2023  3239							; 
   2024  3239
   2025  3239				   .L0168		;  tailEnd = tailEnd + 1
   2026  3239
   2027  3239		       e6 de		      INC	tailEnd
   2028  323b				   .L0169		;  if tailEnd = SNAKE_MAX_LEN then tailEnd = 0
   2029  323b
   2030  323b		       a5 de		      LDA	tailEnd
   2031  323d		       c9 c0		      CMP	#SNAKE_MAX_LEN
   2032  323f		       d0 04		      BNE	.skipL0169
   2033  3241				   .condpart44
   2034  3241		       a9 00		      LDA	#0
   2035  3243		       85 de		      STA	tailEnd
   2036  3245				   .skipL0169
   2037  3245				   .
   2038  3245							; 
   2039  3245
   2040  3245				   .L0170		;  return
   2041  3245
   2042  3245		       ba		      tsx
   2043  3246		       b5 02		      lda	2,x	; check return address
   2044  3248		       49 52		      eor	#(>*)	; vs. current PCH
   2045  324a		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   2046  324c		       f0 03		      beq	*+5	; if equal, do normal return
   2047  324e		       4c dd ff 	      JMP	BS_return
   2048  3251		       60		      RTS
   2049  3252				   .
   2050  3252							; 
   2051  3252
   2052  3252				   ._UpdateFood
   2053  3252							; _UpdateFood
   2054  3252
   2055  3252				   .
   2056  3252							; 
   2057  3252
   2058  3252				   .
   2059  3252							; 
   2060  3252
   2061  3252				   .L0171		;  foodX  =   ( rand & 31 ) 
   2062  3252
   2063  3252							; complex statement detected
   2064  3252		       a5 a2		      lda	rand
   2065  3254		       4a		      lsr
   2066  3255				  -	      ifconst	rand16
   2067  3255				  -	      rol	rand16
   2068  3255					      endif
   2069  3255		       90 02		      bcc	*+4
   2070  3257		       49 b4		      eor	#$B4
   2071  3259		       85 a2		      sta	rand
   2072  325b				  -	      ifconst	rand16
   2073  325b				  -	      eor	rand16
   2074  325b					      endif
   2075  325b		       29 1f		      AND	#31
   2076  325d		       85 d4		      STA	foodX
   2077  325f				   .L0172		;  foodY  =   ( rand & 23 ) 
   2078  325f
   2079  325f							; complex statement detected
   2080  325f		       a5 a2		      lda	rand
   2081  3261		       4a		      lsr
   2082  3262				  -	      ifconst	rand16
   2083  3262				  -	      rol	rand16
   2084  3262					      endif
   2085  3262		       90 02		      bcc	*+4
   2086  3264		       49 b4		      eor	#$B4
   2087  3266		       85 a2		      sta	rand
   2088  3268				  -	      ifconst	rand16
   2089  3268				  -	      eor	rand16
   2090  3268					      endif
   2091  3268		       29 17		      AND	#23
   2092  326a		       85 d5		      STA	foodY
   2093  326c				   .
   2094  326c							; 
   2095  326c
   2096  326c				   .
   2097  326c							; 
   2098  326c
   2099  326c				   .L0173		;  if foodY  =  23 then goto _UpdateFood
   2100  326c
   2101  326c		       a5 d5		      LDA	foodY
   2102  326e		       c9 17		      CMP	#23
   2103  3270		       d0 03		      BNE	.skipL0173
   2104  3272				   .condpart45
   2105  3272		       4c 52 52 	      jmp	._UpdateFood
   2106  3275
   2107  3275				   .skipL0173
   2108  3275				   .
   2109  3275							; 
   2110  3275
   2111  3275				   .
   2112  3275							; 
   2113  3275
   2114  3275				   .L0174		;  if pfread ( foodX , foodY )  then goto _UpdateFood
   2115  3275
   2116  3275		       a5 d4		      LDA	foodX
   2117  3277		       a4 d5		      LDY	foodY
   2118  3279		       85 ee		      sta	temp7
   2119  327b		       a9 52		      lda	#>(ret_point14-1)
   2120  327d		       48		      pha
   2121  327e		       a9 90		      lda	#<(ret_point14-1)
   2122  3280		       48		      pha
   2123  3281		       a9 f3		      lda	#>(pfread-1)
   2124  3283		       48		      pha
   2125  3284		       a9 b4		      lda	#<(pfread-1)
   2126  3286		       48		      pha
   2127  3287		       a5 ee		      lda	temp7
   2128  3289		       48		      pha
   2129  328a		       8a		      txa
   2130  328b		       48		      pha
   2131  328c		       a2 08		      ldx	#8
   2132  328e		       4c eb ff 	      jmp	BS_jsr
   2133  3291				   ret_point14
   2134  3291		       d0 03		      BNE	.skipL0174
   2135  3293				   .condpart46
   2136  3293		       4c 52 52 	      jmp	._UpdateFood
   2137  3296
   2138  3296				   .skipL0174
   2139  3296				   .
   2140  3296							; 
   2141  3296
   2142  3296				   .
   2143  3296							; 
   2144  3296
   2145  3296				   .L0175		;  player0x  =  foodX * 4 + 17
   2146  3296
   2147  3296							; complex statement detected
   2148  3296		       a5 d4		      LDA	foodX
   2149  3298		       0a		      asl
   2150  3299		       0a		      asl
   2151  329a		       18		      CLC
   2152  329b		       69 11		      ADC	#17
   2153  329d		       85 80		      STA	player0x
   2154  329f				   .L0176		;  player0y  =  foodY * 4 + 4
   2155  329f
   2156  329f							; complex statement detected
   2157  329f		       a5 d5		      LDA	foodY
   2158  32a1		       0a		      asl
   2159  32a2		       0a		      asl
   2160  32a3		       18		      CLC
   2161  32a4		       69 04		      ADC	#4
   2162  32a6		       85 85		      STA	player0y
   2163  32a8				   .
   2164  32a8							; 
   2165  32a8
   2166  32a8				   .L0177		;  return
   2167  32a8
   2168  32a8		       ba		      tsx
   2169  32a9		       b5 02		      lda	2,x	; check return address
   2170  32ab		       49 52		      eor	#(>*)	; vs. current PCH
   2171  32ad		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   2172  32af		       f0 03		      beq	*+5	; if equal, do normal return
   2173  32b1		       4c dd ff 	      JMP	BS_return
   2174  32b4		       60		      RTS
   2175  32b5				   .
   2176  32b5							; 
   2177  32b5
   2178  32b5				   ._UpdateEat
   2179  32b5							; _UpdateEat
   2180  32b5
   2181  32b5				   .L0178		;  score = score + 1
   2182  32b5
   2183  32b5		       f8		      SED
   2184  32b6		       18		      CLC
   2185  32b7		       a5 95		      LDA	score+2
   2186  32b9		       69 01		      ADC	#$01
   2187  32bb		       85 95		      STA	score+2
   2188  32bd		       a5 94		      LDA	score+1
   2189  32bf		       69 00		      ADC	#$00
   2190  32c1		       85 94		      STA	score+1
   2191  32c3		       a5 93		      LDA	score
   2192  32c5		       69 00		      ADC	#$00
   2193  32c7		       85 93		      STA	score
   2194  32c9		       d8		      CLD
   2195  32ca				   .
   2196  32ca							; 
   2197  32ca
   2198  32ca				   .
   2199  32ca							; 
   2200  32ca
   2201  32ca				   .L0179		;  if length + grown  =  SNAKE_MAX_LEN then goto _SkipGrownIncrement
   2202  32ca
   2203  32ca							; complex condition detected
   2204  32ca		       a5 df		      LDA	length
   2205  32cc		       18		      CLC
   2206  32cd		       65 da		      ADC	grown
   2207  32cf		       c9 c0		      CMP	#SNAKE_MAX_LEN
   2208  32d1		       d0 03		      BNE	.skipL0179
   2209  32d3				   .condpart47
   2210  32d3		       4c d8 52 	      jmp	._SkipGrownIncrement
   2211  32d6
   2212  32d6				   .skipL0179
   2213  32d6				   .
   2214  32d6							; 
   2215  32d6
   2216  32d6				   .
   2217  32d6							; 
   2218  32d6
   2219  32d6				   .L0180		;  grown = grown + 1
   2220  32d6
   2221  32d6		       e6 da		      INC	grown
   2222  32d8				   .
   2223  32d8							; 
   2224  32d8
   2225  32d8				   .
   2226  32d8							; 
   2227  32d8
   2228  32d8				   .
   2229  32d8							; 
   2230  32d8
   2231  32d8				   .
   2232  32d8							; 
   2233  32d8
   2234  32d8				   .
   2235  32d8							; 
   2236  32d8
   2237  32d8				   ._SkipGrownIncrement
   2238  32d8							; _SkipGrownIncrement
   2239  32d8
   2240  32d8				   .
   2241  32d8							; 
   2242  32d8
   2243  32d8				   .L0181		;  eatSound  =  6
   2244  32d8
   2245  32d8		       a9 06		      LDA	#6
   2246  32da		       85 d9		      STA	eatSound
   2247  32dc				   .
   2248  32dc							; 
   2249  32dc
   2250  32dc				   .L0182		;  foodX = 0
   2251  32dc
   2252  32dc		       a9 00		      LDA	#0
   2253  32de		       85 d4		      STA	foodX
   2254  32e0				   .L0183		;  foodY = 0
   2255  32e0
   2256  32e0		       a9 00		      LDA	#0
   2257  32e2		       85 d5		      STA	foodY
   2258  32e4				   .
   2259  32e4							; 
   2260  32e4
   2261  32e4				   .L0184		;  return
   2262  32e4
   2263  32e4		       ba		      tsx
   2264  32e5		       b5 02		      lda	2,x	; check return address
   2265  32e7		       49 52		      eor	#(>*)	; vs. current PCH
   2266  32e9		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   2267  32eb		       f0 03		      beq	*+5	; if equal, do normal return
   2268  32ed		       4c dd ff 	      JMP	BS_return
   2269  32f0		       60		      RTS
   2270  32f1				   .
   2271  32f1							; 
   2272  32f1
   2273  32f1				   .
   2274  32f1							; 
   2275  32f1
   2276  32f1				   .
   2277  32f1							; 
   2278  32f1
   2279  32f1				   .
   2280  32f1							; 
   2281  32f1
   2282  32f1				   .
   2283  32f1							; 
   2284  32f1
   2285  32f1				   ._GameOverSetup
   2286  32f1							; _GameOverSetup
   2287  32f1
   2288  32f1				   .
   2289  32f1							; 
   2290  32f1
   2291  32f1				   .
   2292  32f1							; 
   2293  32f1
   2294  32f1				   .L0185		;  player0x  =  0  :  player0y  =  0
   2295  32f1
   2296  32f1		       a9 00		      LDA	#0
   2297  32f3		       85 80		      STA	player0x
   2298  32f5		       85 85		      STA	player0y
   2299  32f7				   .
   2300  32f7							; 
   2301  32f7
   2302  32f7				   .
   2303  32f7							; 
   2304  32f7
   2305  32f7				   .L0186		;  bits0_DebounceReset{0}  =  1
   2306  32f7
   2307  32f7		       a5 ed		      LDA	bits0_DebounceReset
   2308  32f9		       09 01		      ORA	#1
   2309  32fb		       85 ed		      STA	bits0_DebounceReset
   2310  32fd				   .
   2311  32fd							; 
   2312  32fd
   2313  32fd				   .
   2314  32fd							; 
   2315  32fd
   2316  32fd				   .L0187		;  crashSound = 8
   2317  32fd
   2318  32fd		       a9 08		      LDA	#8
   2319  32ff		       85 d9		      STA	crashSound
   2320  3301				   .
   2321  3301							; 
   2322  3301
   2323  3301				   .
   2324  3301							; 
   2325  3301
   2326  3301				   .L0188		;  shaking_effect  =  25
   2327  3301
   2328  3301		       a9 19		      LDA	#25
   2329  3303		       85 e1		      STA	shaking_effect
   2330  3305				   .
   2331  3305							; 
   2332  3305
   2333  3305				   .
   2334  3305							; 
   2335  3305
   2336  3305				   .L0189		;  if score1  >  highScore1 then goto __New_High_Score
   2337  3305
   2338  3305		       a5 e3		      LDA	highScore1
   2339  3307		       c5 93		      CMP	score1
   2340  3309		       b0 03		      BCS	.skipL0189
   2341  330b				   .condpart48
   2342  330b		       4c 3e 53 	      jmp	.__New_High_Score
   2343  330e
   2344  330e				   .skipL0189
   2345  330e				   .L0190		;  if score1  <  highScore1 then goto __Skip_High_Score
   2346  330e
   2347  330e		       a5 93		      LDA	score1
   2348  3310		       c5 e3		      CMP	highScore1
   2349  3312		       b0 03		      BCS	.skipL0190
   2350  3314				   .condpart49
   2351  3314		       4c d0 53 	      jmp	.__Skip_High_Score
   2352  3317
   2353  3317				   .skipL0190
   2354  3317				   .
   2355  3317							; 
   2356  3317
   2357  3317				   .L0191		;  if score2  >  highScore2 then goto __New_High_Score
   2358  3317
   2359  3317		       a5 e4		      LDA	highScore2
   2360  3319		       c5 94		      CMP	score2
   2361  331b		       b0 03		      BCS	.skipL0191
   2362  331d				   .condpart50
   2363  331d		       4c 3e 53 	      jmp	.__New_High_Score
   2364  3320
   2365  3320				   .skipL0191
   2366  3320				   .L0192		;  if score2  <  highScore2 then goto __Skip_High_Score
   2367  3320
   2368  3320		       a5 94		      LDA	score2
   2369  3322		       c5 e4		      CMP	highScore2
   2370  3324		       b0 03		      BCS	.skipL0192
   2371  3326				   .condpart51
   2372  3326		       4c d0 53 	      jmp	.__Skip_High_Score
   2373  3329
   2374  3329				   .skipL0192
   2375  3329				   .
   2376  3329							; 
   2377  3329
   2378  3329				   .L0193		;  if score3  >  highScore3 then goto __New_High_Score
   2379  3329
   2380  3329		       a5 e5		      LDA	highScore3
   2381  332b		       c5 95		      CMP	score3
   2382  332d		       b0 03		      BCS	.skipL0193
   2383  332f				   .condpart52
   2384  332f		       4c 3e 53 	      jmp	.__New_High_Score
   2385  3332
   2386  3332				   .skipL0193
   2387  3332				   .L0194		;  if score3  <  highScore3 then goto __Skip_High_Score
   2388  3332
   2389  3332		       a5 95		      LDA	score3
   2390  3334		       c5 e5		      CMP	highScore3
   2391  3336		       b0 03		      BCS	.skipL0194
   2392  3338				   .condpart53
   2393  3338		       4c d0 53 	      jmp	.__Skip_High_Score
   2394  333b
   2395  333b				   .skipL0194
   2396  333b				   .
   2397  333b							; 
   2398  333b
   2399  333b				   .L0195		;  goto __Skip_High_Score
   2400  333b
   2401  333b		       4c d0 53 	      jmp	.__Skip_High_Score
   2402  333e
   2403  333e				   .
   2404  333e							; 
   2405  333e
   2406  333e				   .__New_High_Score
   2407  333e							; __New_High_Score
   2408  333e
   2409  333e				   .
   2410  333e							; 
   2411  333e
   2412  333e				   .
   2413  333e							; 
   2414  333e
   2415  333e				   .L0196		;  bits3_TitleSoundFlag{3}  =	1
   2416  333e
   2417  333e		       a5 ed		      LDA	bits3_TitleSoundFlag
   2418  3340		       09 08		      ORA	#8
   2419  3342		       85 ed		      STA	bits3_TitleSoundFlag
   2420  3344				   .
   2421  3344							; 
   2422  3344
   2423  3344				   .L0197		;  highScore1	=  score1
   2424  3344
   2425  3344		       a5 93		      LDA	score1
   2426  3346		       85 e3		      STA	highScore1
   2427  3348				   .L0198		;  highScore2	=  score2
   2428  3348
   2429  3348		       a5 94		      LDA	score2
   2430  334a		       85 e4		      STA	highScore2
   2431  334c				   .L0199		;  highScore3	=  score3
   2432  334c
   2433  334c		       a5 95		      LDA	score3
   2434  334e		       85 e5		      STA	highScore3
   2435  3350				   .
   2436  3350							; 
   2437  3350
   2438  3350				   .L0200		;  playfield:
   2439  3350
   2440  3350					      ifconst	pfres
   2441  3350		       a2 5f		      ldx	#(24>pfres)*(pfres*pfwidth-1)+(24<=pfres)*95
   2442  3352				  -	      else
   2443  3352				  -	      ldx	#((24*pfwidth-1)*((24*pfwidth-1)<47))+(47*((24*pfwidth-1)>=47))
   2444  3352					      endif
   2445  3352		       4c b5 53 	      jmp	pflabel0
   2446  3355				   PF_data0
   2447  3355		       00 00		      .byte.b	%00000000, %00000000
   2448  3357					      if	(pfwidth>2)
   2449  3357		       00 00		      .byte.b	%00000000, %00000000
   2450  3359					      endif
   2451  3359		       00 00		      .byte.b	%00000000, %00000000
   2452  335b					      if	(pfwidth>2)
   2453  335b		       00 00		      .byte.b	%00000000, %00000000
   2454  335d					      endif
   2455  335d		       00 00		      .byte.b	%00000000, %00000000
   2456  335f					      if	(pfwidth>2)
   2457  335f		       00 00		      .byte.b	%00000000, %00000000
   2458  3361					      endif
   2459  3361		       00 d2		      .byte.b	%00000000, %11010010
   2460  3363					      if	(pfwidth>2)
   2461  3363		       a2 00		      .byte.b	%10100010, %00000000
   2462  3365					      endif
   2463  3365		       00 56		      .byte.b	%00000000, %01010110
   2464  3367					      if	(pfwidth>2)
   2465  3367		       22 00		      .byte.b	%00100010, %00000000
   2466  3369					      endif
   2467  3369		       00 da		      .byte.b	%00000000, %11011010
   2468  336b					      if	(pfwidth>2)
   2469  336b		       2a 00		      .byte.b	%00101010, %00000000
   2470  336d					      endif
   2471  336d		       00 52		      .byte.b	%00000000, %01010010
   2472  336f					      if	(pfwidth>2)
   2473  336f		       2a 00		      .byte.b	%00101010, %00000000
   2474  3371					      endif
   2475  3371		       00 d2		      .byte.b	%00000000, %11010010
   2476  3373					      if	(pfwidth>2)
   2477  3373		       94 00		      .byte.b	%10010100, %00000000
   2478  3375					      endif
   2479  3375		       00 00		      .byte.b	%00000000, %00000000
   2480  3377					      if	(pfwidth>2)
   2481  3377		       00 00		      .byte.b	%00000000, %00000000
   2482  3379					      endif
   2483  3379		       00 aa		      .byte.b	%00000000, %10101010
   2484  337b					      if	(pfwidth>2)
   2485  337b		       ea 00		      .byte.b	%11101010, %00000000
   2486  337d					      endif
   2487  337d		       00 aa		      .byte.b	%00000000, %10101010
   2488  337f					      if	(pfwidth>2)
   2489  337f		       0a 00		      .byte.b	%00001010, %00000000
   2490  3381					      endif
   2491  3381		       00 ae		      .byte.b	%00000000, %10101110
   2492  3383					      if	(pfwidth>2)
   2493  3383		       6e 00		      .byte.b	%01101110, %00000000
   2494  3385					      endif
   2495  3385		       00 aa		      .byte.b	%00000000, %10101010
   2496  3387					      if	(pfwidth>2)
   2497  3387		       2a 00		      .byte.b	%00101010, %00000000
   2498  3389					      endif
   2499  3389		       00 aa		      .byte.b	%00000000, %10101010
   2500  338b					      if	(pfwidth>2)
   2501  338b		       ea 00		      .byte.b	%11101010, %00000000
   2502  338d					      endif
   2503  338d		       00 00		      .byte.b	%00000000, %00000000
   2504  338f					      if	(pfwidth>2)
   2505  338f		       00 00		      .byte.b	%00000000, %00000000
   2506  3391					      endif
   2507  3391		       03 dd		      .byte.b	%00000011, %11011101
   2508  3393					      if	(pfwidth>2)
   2509  3393		       bd 03		      .byte.b	%10111101, %00000011
   2510  3395					      endif
   2511  3395		       02 44		      .byte.b	%00000010, %01000100
   2512  3397					      if	(pfwidth>2)
   2513  3397		       a5 00		      .byte.b	%10100101, %00000000
   2514  3399					      endif
   2515  3399		       03 45		      .byte.b	%00000011, %01000101
   2516  339b					      if	(pfwidth>2)
   2517  339b		       b9 01		      .byte.b	%10111001, %00000001
   2518  339d					      endif
   2519  339d		       00 45		      .byte.b	%00000000, %01000101
   2520  339f					      if	(pfwidth>2)
   2521  339f		       a5 00		      .byte.b	%10100101, %00000000
   2522  33a1					      endif
   2523  33a1		       03 dd		      .byte.b	%00000011, %11011101
   2524  33a3					      if	(pfwidth>2)
   2525  33a3		       a5 03		      .byte.b	%10100101, %00000011
   2526  33a5					      endif
   2527  33a5		       00 00		      .byte.b	%00000000, %00000000
   2528  33a7					      if	(pfwidth>2)
   2529  33a7		       00 00		      .byte.b	%00000000, %00000000
   2530  33a9					      endif
   2531  33a9		       00 00		      .byte.b	%00000000, %00000000
   2532  33ab					      if	(pfwidth>2)
   2533  33ab		       00 00		      .byte.b	%00000000, %00000000
   2534  33ad					      endif
   2535  33ad		       00 00		      .byte.b	%00000000, %00000000
   2536  33af					      if	(pfwidth>2)
   2537  33af		       00 00		      .byte.b	%00000000, %00000000
   2538  33b1					      endif
   2539  33b1		       00 00		      .byte.b	%00000000, %00000000
   2540  33b3					      if	(pfwidth>2)
   2541  33b3		       00 00		      .byte.b	%00000000, %00000000
   2542  33b5					      endif
   2543  33b5				   pflabel0
   2544  33b5		       bd 55 53 	      lda	PF_data0,x
   2545  33b8		       9d 20 10 	      sta	playfield-128,x
   2546  33bb		       ca		      dex
   2547  33bc		       10 f7		      bpl	pflabel0
   2548  33be				   .
   2549  33be							; 
   2550  33be
   2551  33be				   .
   2552  33be							; 
   2553  33be
   2554  33be				   .L0201		;  goto _GameOverLoop bank3
   2555  33be
   2556  33be		       85 ee		      sta	temp7
   2557  33c0		       a9 54		      lda	#>(._GameOverLoop-1)
   2558  33c2		       48		      pha
   2559  33c3		       a9 3d		      lda	#<(._GameOverLoop-1)
   2560  33c5		       48		      pha
   2561  33c6		       a5 ee		      lda	temp7
   2562  33c8		       48		      pha
   2563  33c9		       8a		      txa
   2564  33ca		       48		      pha
   2565  33cb		       a2 03		      ldx	#3
   2566  33cd		       4c eb ff 	      jmp	BS_jsr
   2567  33d0				   .
   2568  33d0							; 
   2569  33d0
   2570  33d0				   .__Skip_High_Score
   2571  33d0							; __Skip_High_Score
   2572  33d0
   2573  33d0				   .
   2574  33d0							; 
   2575  33d0
   2576  33d0				   .L0202		;  playfield:
   2577  33d0
   2578  33d0					      ifconst	pfres
   2579  33d0		       a2 5f		      ldx	#(24>pfres)*(pfres*pfwidth-1)+(24<=pfres)*95
   2580  33d2				  -	      else
   2581  33d2				  -	      ldx	#((24*pfwidth-1)*((24*pfwidth-1)<47))+(47*((24*pfwidth-1)>=47))
   2582  33d2					      endif
   2583  33d2		       4c 35 54 	      jmp	pflabel1
   2584  33d5				   PF_data1
   2585  33d5		       00 00		      .byte.b	%00000000, %00000000
   2586  33d7					      if	(pfwidth>2)
   2587  33d7		       00 00		      .byte.b	%00000000, %00000000
   2588  33d9					      endif
   2589  33d9		       00 00		      .byte.b	%00000000, %00000000
   2590  33db					      if	(pfwidth>2)
   2591  33db		       00 00		      .byte.b	%00000000, %00000000
   2592  33dd					      endif
   2593  33dd		       00 00		      .byte.b	%00000000, %00000000
   2594  33df					      if	(pfwidth>2)
   2595  33df		       00 00		      .byte.b	%00000000, %00000000
   2596  33e1					      endif
   2597  33e1		       7e bf		      .byte.b	%01111110, %10111111
   2598  33e3					      if	(pfwidth>2)
   2599  33e3		       ff 7d		      .byte.b	%11111111, %01111101
   2600  33e5					      endif
   2601  33e5		       60 b3		      .byte.b	%01100000, %10110011
   2602  33e7					      if	(pfwidth>2)
   2603  33e7		       99 0d		      .byte.b	%10011001, %00001101
   2604  33e9					      endif
   2605  33e9		       6e bf		      .byte.b	%01101110, %10111111
   2606  33eb					      if	(pfwidth>2)
   2607  33eb		       99 3d		      .byte.b	%10011001, %00111101
   2608  33ed					      endif
   2609  33ed		       66 b3		      .byte.b	%01100110, %10110011
   2610  33ef					      if	(pfwidth>2)
   2611  33ef		       99 0d		      .byte.b	%10011001, %00001101
   2612  33f1					      endif
   2613  33f1		       7e b3		      .byte.b	%01111110, %10110011
   2614  33f3					      if	(pfwidth>2)
   2615  33f3		       99 7d		      .byte.b	%10011001, %01111101
   2616  33f5					      endif
   2617  33f5		       00 00		      .byte.b	%00000000, %00000000
   2618  33f7					      if	(pfwidth>2)
   2619  33f7		       00 00		      .byte.b	%00000000, %00000000
   2620  33f9					      endif
   2621  33f9		       1f cd		      .byte.b	%00011111, %11001101
   2622  33fb					      if	(pfwidth>2)
   2623  33fb		       7d 1f		      .byte.b	%01111101, %00011111
   2624  33fd					      endif
   2625  33fd		       19 cd		      .byte.b	%00011001, %11001101
   2626  33ff					      if	(pfwidth>2)
   2627  33ff		       61 19		      .byte.b	%01100001, %00011001
   2628  3401					      endif
   2629  3401		       19 cd		      .byte.b	%00011001, %11001101
   2630  3403					      if	(pfwidth>2)
   2631  3403		       79 0f		      .byte.b	%01111001, %00001111
   2632  3405					      endif
   2633  3405		       19 cd		      .byte.b	%00011001, %11001101
   2634  3407					      if	(pfwidth>2)
   2635  3407		       61 19		      .byte.b	%01100001, %00011001
   2636  3409					      endif
   2637  3409		       1f 31		      .byte.b	%00011111, %00110001
   2638  340b					      if	(pfwidth>2)
   2639  340b		       7d 19		      .byte.b	%01111101, %00011001
   2640  340d					      endif
   2641  340d		       00 00		      .byte.b	%00000000, %00000000
   2642  340f					      if	(pfwidth>2)
   2643  340f		       00 00		      .byte.b	%00000000, %00000000
   2644  3411					      endif
   2645  3411		       00 00		      .byte.b	%00000000, %00000000
   2646  3413					      if	(pfwidth>2)
   2647  3413		       00 00		      .byte.b	%00000000, %00000000
   2648  3415					      endif
   2649  3415		       00 00		      .byte.b	%00000000, %00000000
   2650  3417					      if	(pfwidth>2)
   2651  3417		       00 00		      .byte.b	%00000000, %00000000
   2652  3419					      endif
   2653  3419		       00 00		      .byte.b	%00000000, %00000000
   2654  341b					      if	(pfwidth>2)
   2655  341b		       00 00		      .byte.b	%00000000, %00000000
   2656  341d					      endif
   2657  341d		       00 00		      .byte.b	%00000000, %00000000
   2658  341f					      if	(pfwidth>2)
   2659  341f		       00 00		      .byte.b	%00000000, %00000000
   2660  3421					      endif
   2661  3421		       00 00		      .byte.b	%00000000, %00000000
   2662  3423					      if	(pfwidth>2)
   2663  3423		       00 00		      .byte.b	%00000000, %00000000
   2664  3425					      endif
   2665  3425		       00 00		      .byte.b	%00000000, %00000000
   2666  3427					      if	(pfwidth>2)
   2667  3427		       00 00		      .byte.b	%00000000, %00000000
   2668  3429					      endif
   2669  3429		       00 00		      .byte.b	%00000000, %00000000
   2670  342b					      if	(pfwidth>2)
   2671  342b		       00 00		      .byte.b	%00000000, %00000000
   2672  342d					      endif
   2673  342d		       00 00		      .byte.b	%00000000, %00000000
   2674  342f					      if	(pfwidth>2)
   2675  342f		       00 00		      .byte.b	%00000000, %00000000
   2676  3431					      endif
   2677  3431		       00 00		      .byte.b	%00000000, %00000000
   2678  3433					      if	(pfwidth>2)
   2679  3433		       00 00		      .byte.b	%00000000, %00000000
   2680  3435					      endif
   2681  3435				   pflabel1
   2682  3435		       bd d5 53 	      lda	PF_data1,x
   2683  3438		       9d 20 10 	      sta	playfield-128,x
   2684  343b		       ca		      dex
   2685  343c		       10 f7		      bpl	pflabel1
   2686  343e				   .
   2687  343e							; 
   2688  343e
   2689  343e				   ._GameOverLoop
   2690  343e							; _GameOverLoop
   2691  343e
   2692  343e				   .
   2693  343e							; 
   2694  343e
   2695  343e				   .
   2696  343e							; 
   2697  343e
   2698  343e				   .L0203		;  if switchbw then COLUPF  =	GAMEOVER_NTSC_FOREG else COLUPF  =  GAMEOVER_PAL_FOREG
   2699  343e
   2700  343e		       a9 08		      lda	#8
   2701  3440		       2c 82 02 	      bit	SWCHB
   2702  3443		       d0 07		      BNE	.skipL0203
   2703  3445				   .condpart54
   2704  3445		       a9 4e		      LDA	#GAMEOVER_NTSC_FOREG
   2705  3447		       85 08		      STA	COLUPF
   2706  3449		       4c 50 54 	      jmp	.skipelse8
   2707  344c				   .skipL0203
   2708  344c		       a9 6e		      LDA	#GAMEOVER_PAL_FOREG
   2709  344e		       85 08		      STA	COLUPF
   2710  3450				   .skipelse8
   2711  3450				   .L0204		;  if switchbw then COLUBK  =	GAMEOVER_NTSC_BACKG else COLUBK  =  GAMEOVER_PAL_BACKG
   2712  3450
   2713  3450		       a9 08		      lda	#8
   2714  3452		       2c 82 02 	      bit	SWCHB
   2715  3455		       d0 07		      BNE	.skipL0204
   2716  3457				   .condpart55
   2717  3457		       a9 00		      LDA	#GAMEOVER_NTSC_BACKG
   2718  3459		       85 09		      STA	COLUBK
   2719  345b		       4c 62 54 	      jmp	.skipelse9
   2720  345e				   .skipL0204
   2721  345e		       a9 00		      LDA	#GAMEOVER_PAL_BACKG
   2722  3460		       85 09		      STA	COLUBK
   2723  3462				   .skipelse9
   2724  3462				   .
   2725  3462							; 
   2726  3462
   2727  3462				   .
   2728  3462							; 
   2729  3462
   2730  3462				   .
   2731  3462							; 
   2732  3462
   2733  3462				   .
   2734  3462							; 
   2735  3462
   2736  3462				   .
   2737  3462							; 
   2738  3462
   2739  3462				   .L0205		;  if crashSound = 0 then goto _SkipSound2
   2740  3462
   2741  3462		       a5 d9		      LDA	crashSound
   2742  3464		       c9 00		      CMP	#0
   2743  3466		       d0 03		      BNE	.skipL0205
   2744  3468				   .condpart56
   2745  3468		       4c 79 54 	      jmp	._SkipSound2
   2746  346b
   2747  346b				   .skipL0205
   2748  346b				   .
   2749  346b							; 
   2750  346b
   2751  346b				   .L0206		;  AUDV0  =  8  :  AUDC0  =  3  :  AUDF0  =  19
   2752  346b
   2753  346b		       a9 08		      LDA	#8
   2754  346d		       85 19		      STA	AUDV0
   2755  346f		       a9 03		      LDA	#3
   2756  3471		       85 15		      STA	AUDC0
   2757  3473		       a9 13		      LDA	#19
   2758  3475		       85 17		      STA	AUDF0
   2759  3477				   .L0207		;  crashSound	=  crashSound - 1
   2760  3477
   2761  3477		       c6 d9		      DEC	crashSound
   2762  3479				   .
   2763  3479							; 
   2764  3479
   2765  3479				   ._SkipSound2
   2766  3479							; _SkipSound2
   2767  3479
   2768  3479				   .L0208		;  if !crashSound then AUDV0  =  0
   2769  3479
   2770  3479		       a5 d9		      LDA	crashSound
   2771  347b		       d0 04		      BNE	.skipL0208
   2772  347d				   .condpart57
   2773  347d		       a9 00		      LDA	#0
   2774  347f		       85 19		      STA	AUDV0
   2775  3481				   .skipL0208
   2776  3481				   .
   2777  3481							; 
   2778  3481
   2779  3481				   .L0209		;  frames  =  frames  +  1
   2780  3481
   2781  3481		       e6 e6		      INC	frames
   2782  3483				   .
   2783  3483							; 
   2784  3483
   2785  3483				   .
   2786  3483							; 
   2787  3483
   2788  3483				   .L0210		;  if shaking_effect  =  0 then goto _SkipShake
   2789  3483
   2790  3483		       a5 e1		      LDA	shaking_effect
   2791  3485		       c9 00		      CMP	#0
   2792  3487		       d0 03		      BNE	.skipL0210
   2793  3489				   .condpart58
   2794  3489		       4c 95 54 	      jmp	._SkipShake
   2795  348c
   2796  348c				   .skipL0210
   2797  348c				   .L0211		;  shakescreen  =  shakescreen + 32
   2798  348c
   2799  348c		       a5 e0		      LDA	shakescreen
   2800  348e		       18		      CLC
   2801  348f		       69 20		      ADC	#32
   2802  3491		       85 e0		      STA	shakescreen
   2803  3493				   .L0212		;  shaking_effect  =  shaking_effect - 1
   2804  3493
   2805  3493		       c6 e1		      DEC	shaking_effect
   2806  3495				   .
   2807  3495							; 
   2808  3495
   2809  3495				   ._SkipShake
   2810  3495							; _SkipShake
   2811  3495
   2812  3495				   .
   2813  3495							; 
   2814  3495
   2815  3495				   .
   2816  3495							; 
   2817  3495
   2818  3495				   .L0213		;  if frames  <  60 then goto _SkipCounter
   2819  3495
   2820  3495		       a5 e6		      LDA	frames
   2821  3497		       c9 3c		      CMP	#60
   2822  3499		       b0 03		      BCS	.skipL0213
   2823  349b				   .condpart59
   2824  349b		       4c c2 54 	      jmp	._SkipCounter
   2825  349e
   2826  349e				   .skipL0213
   2827  349e				   .
   2828  349e							; 
   2829  349e
   2830  349e				   .
   2831  349e							; 
   2832  349e
   2833  349e				   .L0214		;  frames  =  0
   2834  349e
   2835  349e		       a9 00		      LDA	#0
   2836  34a0		       85 e6		      STA	frames
   2837  34a2				   .
   2838  34a2							; 
   2839  34a2
   2840  34a2				   .
   2841  34a2							; 
   2842  34a2
   2843  34a2				   .L0215		;  seconds  =	seconds  +  1
   2844  34a2
   2845  34a2		       e6 d6		      INC	seconds
   2846  34a4				   .
   2847  34a4							; 
   2848  34a4
   2849  34a4				   .
   2850  34a4							; 
   2851  34a4
   2852  34a4				   .L0216		;  if seconds	=  5 then bits2_GameOverFlag{2}  =  0  :  goto _GameInit bank1
   2853  34a4
   2854  34a4		       a5 d6		      LDA	seconds
   2855  34a6		       c9 05		      CMP	#5
   2856  34a8		       d0 18		      BNE	.skipL0216
   2857  34aa				   .condpart60
   2858  34aa		       a5 ed		      LDA	bits2_GameOverFlag
   2859  34ac		       29 fb		      AND	#251
   2860  34ae		       85 ed		      STA	bits2_GameOverFlag
   2861  34b0		       85 ee		      sta	temp7
   2862  34b2		       a9 11		      lda	#>(._GameInit-1)
   2863  34b4		       48		      pha
   2864  34b5		       a9 0f		      lda	#<(._GameInit-1)
   2865  34b7		       48		      pha
   2866  34b8		       a5 ee		      lda	temp7
   2867  34ba		       48		      pha
   2868  34bb		       8a		      txa
   2869  34bc		       48		      pha
   2870  34bd		       a2 01		      ldx	#1
   2871  34bf		       4c eb ff 	      jmp	BS_jsr
   2872  34c2				   .skipL0216
   2873  34c2				   .
   2874  34c2							; 
   2875  34c2
   2876  34c2				   .
   2877  34c2							; 
   2878  34c2
   2879  34c2				   ._SkipCounter
   2880  34c2							; _SkipCounter
   2881  34c2
   2882  34c2				   .
   2883  34c2							; 
   2884  34c2
   2885  34c2				   .L0217		;  drawscreen
   2886  34c2
   2887  34c2		       85 ee		      sta	temp7
   2888  34c4		       a9 54		      lda	#>(ret_point15-1)
   2889  34c6		       48		      pha
   2890  34c7		       a9 d9		      lda	#<(ret_point15-1)
   2891  34c9		       48		      pha
   2892  34ca		       a9 f5		      lda	#>(drawscreen-1)
   2893  34cc		       48		      pha
   2894  34cd		       a9 8a		      lda	#<(drawscreen-1)
   2895  34cf		       48		      pha
   2896  34d0		       a5 ee		      lda	temp7
   2897  34d2		       48		      pha
   2898  34d3		       8a		      txa
   2899  34d4		       48		      pha
   2900  34d5		       a2 08		      ldx	#8
   2901  34d7		       4c eb ff 	      jmp	BS_jsr
   2902  34da				   ret_point15
   2903  34da				   .
   2904  34da							; 
   2905  34da
   2906  34da				   .L0218		;  if !switchreset  &&  !joy0fire then bits0_DebounceReset{0}	=  0  :  goto _SkipGameOverReset
   2907  34da
   2908  34da		       a9 01		      lda	#1
   2909  34dc		       2c 82 02 	      bit	SWCHB
   2910  34df		       f0 0d		      BEQ	.skipL0218
   2911  34e1				   .condpart61
   2912  34e1		       24 0c		      bit	INPT4
   2913  34e3		       10 09		      BPL	.skip61then
   2914  34e5				   .condpart62
   2915  34e5		       a5 ed		      LDA	bits0_DebounceReset
   2916  34e7		       29 fe		      AND	#254
   2917  34e9		       85 ed		      STA	bits0_DebounceReset
   2918  34eb		       4c 08 55 	      jmp	._SkipGameOverReset
   2919  34ee
   2920  34ee				   .skip61then
   2921  34ee				   .skipL0218
   2922  34ee				   .
   2923  34ee							; 
   2924  34ee
   2925  34ee				   .L0219		;  if bits0_DebounceReset{0} then goto _SkipGameOverReset
   2926  34ee
   2927  34ee		       a5 ed		      LDA	bits0_DebounceReset
   2928  34f0		       4a		      LSR
   2929  34f1		       90 03		      BCC	.skipL0219
   2930  34f3				   .condpart63
   2931  34f3		       4c 08 55 	      jmp	._SkipGameOverReset
   2932  34f6
   2933  34f6				   .skipL0219
   2934  34f6				   .
   2935  34f6							; 
   2936  34f6
   2937  34f6				   .L0220		;  goto _GameInit bank1
   2938  34f6
   2939  34f6		       85 ee		      sta	temp7
   2940  34f8		       a9 11		      lda	#>(._GameInit-1)
   2941  34fa		       48		      pha
   2942  34fb		       a9 0f		      lda	#<(._GameInit-1)
   2943  34fd		       48		      pha
   2944  34fe		       a5 ee		      lda	temp7
   2945  3500		       48		      pha
   2946  3501		       8a		      txa
   2947  3502		       48		      pha
   2948  3503		       a2 01		      ldx	#1
   2949  3505		       4c eb ff 	      jmp	BS_jsr
   2950  3508				   .
   2951  3508							; 
   2952  3508
   2953  3508				   .
   2954  3508							; 
   2955  3508
   2956  3508				   ._SkipGameOverReset
   2957  3508							; _SkipGameOverReset
   2958  3508
   2959  3508				   .
   2960  3508							; 
   2961  3508
   2962  3508				   .L0221		;  goto _GameOverLoop
   2963  3508
   2964  3508		       4c 3e 54 	      jmp	._GameOverLoop
   2965  350b
   2966  350b				   .
   2967  350b							; 
   2968  350b
   2969  350b				   .
   2970  350b							; 
   2971  350b
   2972  350b				   .
   2973  350b							; 
   2974  350b
   2975  350b				   .
   2976  350b							; 
   2977  350b
   2978  350b				   .
   2979  350b							; 
   2980  350b
   2981  350b				   .
   2982  350b							; 
   2983  350b
   2984  350b				   .L0222		;  bank 4
   2985  350b
   2986  350b					      if	ECHO3
      2761 bytes of ROM space left in bank 3
   2987  350b					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   2988  350b					      endif
   2989  350b		       00 01	   ECHO3      =	1
   2990  3fd4					      ORG	$3FF4-bscode_length
   2991  3fd4					      RORG	$5FF4-bscode_length
   2992  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   2993  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2994  3fd6				  -	      stx	FASTFETCH
   2995  3fd6					      endif
   2996  3fd6		       9a		      txs
   2997  3fd7				  -	      if	bankswitch == 64
   2998  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2999  3fd7					      else
   3000  3fd7		       a9 f3		      lda	#>(start-1)
   3001  3fd9					      endif
   3002  3fd9		       48		      pha
   3003  3fda		       a9 59		      lda	#<(start-1)
   3004  3fdc		       48		      pha
   3005  3fdd		       48		      pha
   3006  3fde		       8a		      txa
   3007  3fdf		       48		      pha
   3008  3fe0		       ba		      tsx
   3009  3fe1					      if	bankswitch != 64
   3010  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   3011  3fe3		       2a		      rol
   3012  3fe4		       2a		      rol
   3013  3fe5		       2a		      rol
   3014  3fe6		       2a		      rol
   3015  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3016  3fe9		       aa		      tax
   3017  3fea		       e8		      inx
   3018  3feb				  -	      else
   3019  3feb				  -	      lda	4,x	; get high byte of return address
   3020  3feb				  -	      tay
   3021  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3022  3feb				  -	      sta	4,x
   3023  3feb				  -	      tya
   3024  3feb				  -	      lsr
   3025  3feb				  -	      lsr
   3026  3feb				  -	      lsr
   3027  3feb				  -	      lsr
   3028  3feb				  -	      tax
   3029  3feb				  -	      inx
   3030  3feb					      endif
   3031  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   3032  3fee		       68		      pla
   3033  3fef		       aa		      tax
   3034  3ff0		       68		      pla
   3035  3ff1		       60		      rts
   3036  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3037  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3038  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3039  3ff2					      endif
   3040  3ffc					      ORG	$3FFC
   3041  3ffc					      RORG	$5FFC
   3042  3ffc		       d4 5f		      .word.w	(start_bank3 & $ffff)
   3043  3ffe		       d4 5f		      .word.w	(start_bank3 & $ffff)
   3044  4000					      ORG	$4000
   3045  4000					      RORG	$7000
   3046  4000					      repeat	256
   3047  4000		       ff		      .byte.b	$ff
   3046  4000					      repend
   3047  4001		       ff		      .byte.b	$ff
   3046  4001					      repend
   3047  4002		       ff		      .byte.b	$ff
   3046  4002					      repend
   3047  4003		       ff		      .byte.b	$ff
   3046  4003					      repend
   3047  4004		       ff		      .byte.b	$ff
   3046  4004					      repend
   3047  4005		       ff		      .byte.b	$ff
   3046  4005					      repend
   3047  4006		       ff		      .byte.b	$ff
   3046  4006					      repend
   3047  4007		       ff		      .byte.b	$ff
   3046  4007					      repend
   3047  4008		       ff		      .byte.b	$ff
   3046  4008					      repend
   3047  4009		       ff		      .byte.b	$ff
   3046  4009					      repend
   3047  400a		       ff		      .byte.b	$ff
   3046  400a					      repend
   3047  400b		       ff		      .byte.b	$ff
   3046  400b					      repend
   3047  400c		       ff		      .byte.b	$ff
   3046  400c					      repend
   3047  400d		       ff		      .byte.b	$ff
   3046  400d					      repend
   3047  400e		       ff		      .byte.b	$ff
   3046  400e					      repend
   3047  400f		       ff		      .byte.b	$ff
   3046  400f					      repend
   3047  4010		       ff		      .byte.b	$ff
   3046  4010					      repend
   3047  4011		       ff		      .byte.b	$ff
   3046  4011					      repend
   3047  4012		       ff		      .byte.b	$ff
   3046  4012					      repend
   3047  4013		       ff		      .byte.b	$ff
   3046  4013					      repend
   3047  4014		       ff		      .byte.b	$ff
   3046  4014					      repend
   3047  4015		       ff		      .byte.b	$ff
   3046  4015					      repend
   3047  4016		       ff		      .byte.b	$ff
   3046  4016					      repend
   3047  4017		       ff		      .byte.b	$ff
   3046  4017					      repend
   3047  4018		       ff		      .byte.b	$ff
   3046  4018					      repend
   3047  4019		       ff		      .byte.b	$ff
   3046  4019					      repend
   3047  401a		       ff		      .byte.b	$ff
   3046  401a					      repend
   3047  401b		       ff		      .byte.b	$ff
   3046  401b					      repend
   3047  401c		       ff		      .byte.b	$ff
   3046  401c					      repend
   3047  401d		       ff		      .byte.b	$ff
   3046  401d					      repend
   3047  401e		       ff		      .byte.b	$ff
   3046  401e					      repend
   3047  401f		       ff		      .byte.b	$ff
   3046  401f					      repend
   3047  4020		       ff		      .byte.b	$ff
   3046  4020					      repend
   3047  4021		       ff		      .byte.b	$ff
   3046  4021					      repend
   3047  4022		       ff		      .byte.b	$ff
   3046  4022					      repend
   3047  4023		       ff		      .byte.b	$ff
   3046  4023					      repend
   3047  4024		       ff		      .byte.b	$ff
   3046  4024					      repend
   3047  4025		       ff		      .byte.b	$ff
   3046  4025					      repend
   3047  4026		       ff		      .byte.b	$ff
   3046  4026					      repend
   3047  4027		       ff		      .byte.b	$ff
   3046  4027					      repend
   3047  4028		       ff		      .byte.b	$ff
   3046  4028					      repend
   3047  4029		       ff		      .byte.b	$ff
   3046  4029					      repend
   3047  402a		       ff		      .byte.b	$ff
   3046  402a					      repend
   3047  402b		       ff		      .byte.b	$ff
   3046  402b					      repend
   3047  402c		       ff		      .byte.b	$ff
   3046  402c					      repend
   3047  402d		       ff		      .byte.b	$ff
   3046  402d					      repend
   3047  402e		       ff		      .byte.b	$ff
   3046  402e					      repend
   3047  402f		       ff		      .byte.b	$ff
   3046  402f					      repend
   3047  4030		       ff		      .byte.b	$ff
   3046  4030					      repend
   3047  4031		       ff		      .byte.b	$ff
   3046  4031					      repend
   3047  4032		       ff		      .byte.b	$ff
   3046  4032					      repend
   3047  4033		       ff		      .byte.b	$ff
   3046  4033					      repend
   3047  4034		       ff		      .byte.b	$ff
   3046  4034					      repend
   3047  4035		       ff		      .byte.b	$ff
   3046  4035					      repend
   3047  4036		       ff		      .byte.b	$ff
   3046  4036					      repend
   3047  4037		       ff		      .byte.b	$ff
   3046  4037					      repend
   3047  4038		       ff		      .byte.b	$ff
   3046  4038					      repend
   3047  4039		       ff		      .byte.b	$ff
   3046  4039					      repend
   3047  403a		       ff		      .byte.b	$ff
   3046  403a					      repend
   3047  403b		       ff		      .byte.b	$ff
   3046  403b					      repend
   3047  403c		       ff		      .byte.b	$ff
   3046  403c					      repend
   3047  403d		       ff		      .byte.b	$ff
   3046  403d					      repend
   3047  403e		       ff		      .byte.b	$ff
   3046  403e					      repend
   3047  403f		       ff		      .byte.b	$ff
   3046  403f					      repend
   3047  4040		       ff		      .byte.b	$ff
   3046  4040					      repend
   3047  4041		       ff		      .byte.b	$ff
   3046  4041					      repend
   3047  4042		       ff		      .byte.b	$ff
   3046  4042					      repend
   3047  4043		       ff		      .byte.b	$ff
   3046  4043					      repend
   3047  4044		       ff		      .byte.b	$ff
   3046  4044					      repend
   3047  4045		       ff		      .byte.b	$ff
   3046  4045					      repend
   3047  4046		       ff		      .byte.b	$ff
   3046  4046					      repend
   3047  4047		       ff		      .byte.b	$ff
   3046  4047					      repend
   3047  4048		       ff		      .byte.b	$ff
   3046  4048					      repend
   3047  4049		       ff		      .byte.b	$ff
   3046  4049					      repend
   3047  404a		       ff		      .byte.b	$ff
   3046  404a					      repend
   3047  404b		       ff		      .byte.b	$ff
   3046  404b					      repend
   3047  404c		       ff		      .byte.b	$ff
   3046  404c					      repend
   3047  404d		       ff		      .byte.b	$ff
   3046  404d					      repend
   3047  404e		       ff		      .byte.b	$ff
   3046  404e					      repend
   3047  404f		       ff		      .byte.b	$ff
   3046  404f					      repend
   3047  4050		       ff		      .byte.b	$ff
   3046  4050					      repend
   3047  4051		       ff		      .byte.b	$ff
   3046  4051					      repend
   3047  4052		       ff		      .byte.b	$ff
   3046  4052					      repend
   3047  4053		       ff		      .byte.b	$ff
   3046  4053					      repend
   3047  4054		       ff		      .byte.b	$ff
   3046  4054					      repend
   3047  4055		       ff		      .byte.b	$ff
   3046  4055					      repend
   3047  4056		       ff		      .byte.b	$ff
   3046  4056					      repend
   3047  4057		       ff		      .byte.b	$ff
   3046  4057					      repend
   3047  4058		       ff		      .byte.b	$ff
   3046  4058					      repend
   3047  4059		       ff		      .byte.b	$ff
   3046  4059					      repend
   3047  405a		       ff		      .byte.b	$ff
   3046  405a					      repend
   3047  405b		       ff		      .byte.b	$ff
   3046  405b					      repend
   3047  405c		       ff		      .byte.b	$ff
   3046  405c					      repend
   3047  405d		       ff		      .byte.b	$ff
   3046  405d					      repend
   3047  405e		       ff		      .byte.b	$ff
   3046  405e					      repend
   3047  405f		       ff		      .byte.b	$ff
   3046  405f					      repend
   3047  4060		       ff		      .byte.b	$ff
   3046  4060					      repend
   3047  4061		       ff		      .byte.b	$ff
   3046  4061					      repend
   3047  4062		       ff		      .byte.b	$ff
   3046  4062					      repend
   3047  4063		       ff		      .byte.b	$ff
   3046  4063					      repend
   3047  4064		       ff		      .byte.b	$ff
   3046  4064					      repend
   3047  4065		       ff		      .byte.b	$ff
   3046  4065					      repend
   3047  4066		       ff		      .byte.b	$ff
   3046  4066					      repend
   3047  4067		       ff		      .byte.b	$ff
   3046  4067					      repend
   3047  4068		       ff		      .byte.b	$ff
   3046  4068					      repend
   3047  4069		       ff		      .byte.b	$ff
   3046  4069					      repend
   3047  406a		       ff		      .byte.b	$ff
   3046  406a					      repend
   3047  406b		       ff		      .byte.b	$ff
   3046  406b					      repend
   3047  406c		       ff		      .byte.b	$ff
   3046  406c					      repend
   3047  406d		       ff		      .byte.b	$ff
   3046  406d					      repend
   3047  406e		       ff		      .byte.b	$ff
   3046  406e					      repend
   3047  406f		       ff		      .byte.b	$ff
   3046  406f					      repend
   3047  4070		       ff		      .byte.b	$ff
   3046  4070					      repend
   3047  4071		       ff		      .byte.b	$ff
   3046  4071					      repend
   3047  4072		       ff		      .byte.b	$ff
   3046  4072					      repend
   3047  4073		       ff		      .byte.b	$ff
   3046  4073					      repend
   3047  4074		       ff		      .byte.b	$ff
   3046  4074					      repend
   3047  4075		       ff		      .byte.b	$ff
   3046  4075					      repend
   3047  4076		       ff		      .byte.b	$ff
   3046  4076					      repend
   3047  4077		       ff		      .byte.b	$ff
   3046  4077					      repend
   3047  4078		       ff		      .byte.b	$ff
   3046  4078					      repend
   3047  4079		       ff		      .byte.b	$ff
   3046  4079					      repend
   3047  407a		       ff		      .byte.b	$ff
   3046  407a					      repend
   3047  407b		       ff		      .byte.b	$ff
   3046  407b					      repend
   3047  407c		       ff		      .byte.b	$ff
   3046  407c					      repend
   3047  407d		       ff		      .byte.b	$ff
   3046  407d					      repend
   3047  407e		       ff		      .byte.b	$ff
   3046  407e					      repend
   3047  407f		       ff		      .byte.b	$ff
   3046  407f					      repend
   3047  4080		       ff		      .byte.b	$ff
   3046  4080					      repend
   3047  4081		       ff		      .byte.b	$ff
   3046  4081					      repend
   3047  4082		       ff		      .byte.b	$ff
   3046  4082					      repend
   3047  4083		       ff		      .byte.b	$ff
   3046  4083					      repend
   3047  4084		       ff		      .byte.b	$ff
   3046  4084					      repend
   3047  4085		       ff		      .byte.b	$ff
   3046  4085					      repend
   3047  4086		       ff		      .byte.b	$ff
   3046  4086					      repend
   3047  4087		       ff		      .byte.b	$ff
   3046  4087					      repend
   3047  4088		       ff		      .byte.b	$ff
   3046  4088					      repend
   3047  4089		       ff		      .byte.b	$ff
   3046  4089					      repend
   3047  408a		       ff		      .byte.b	$ff
   3046  408a					      repend
   3047  408b		       ff		      .byte.b	$ff
   3046  408b					      repend
   3047  408c		       ff		      .byte.b	$ff
   3046  408c					      repend
   3047  408d		       ff		      .byte.b	$ff
   3046  408d					      repend
   3047  408e		       ff		      .byte.b	$ff
   3046  408e					      repend
   3047  408f		       ff		      .byte.b	$ff
   3046  408f					      repend
   3047  4090		       ff		      .byte.b	$ff
   3046  4090					      repend
   3047  4091		       ff		      .byte.b	$ff
   3046  4091					      repend
   3047  4092		       ff		      .byte.b	$ff
   3046  4092					      repend
   3047  4093		       ff		      .byte.b	$ff
   3046  4093					      repend
   3047  4094		       ff		      .byte.b	$ff
   3046  4094					      repend
   3047  4095		       ff		      .byte.b	$ff
   3046  4095					      repend
   3047  4096		       ff		      .byte.b	$ff
   3046  4096					      repend
   3047  4097		       ff		      .byte.b	$ff
   3046  4097					      repend
   3047  4098		       ff		      .byte.b	$ff
   3046  4098					      repend
   3047  4099		       ff		      .byte.b	$ff
   3046  4099					      repend
   3047  409a		       ff		      .byte.b	$ff
   3046  409a					      repend
   3047  409b		       ff		      .byte.b	$ff
   3046  409b					      repend
   3047  409c		       ff		      .byte.b	$ff
   3046  409c					      repend
   3047  409d		       ff		      .byte.b	$ff
   3046  409d					      repend
   3047  409e		       ff		      .byte.b	$ff
   3046  409e					      repend
   3047  409f		       ff		      .byte.b	$ff
   3046  409f					      repend
   3047  40a0		       ff		      .byte.b	$ff
   3046  40a0					      repend
   3047  40a1		       ff		      .byte.b	$ff
   3046  40a1					      repend
   3047  40a2		       ff		      .byte.b	$ff
   3046  40a2					      repend
   3047  40a3		       ff		      .byte.b	$ff
   3046  40a3					      repend
   3047  40a4		       ff		      .byte.b	$ff
   3046  40a4					      repend
   3047  40a5		       ff		      .byte.b	$ff
   3046  40a5					      repend
   3047  40a6		       ff		      .byte.b	$ff
   3046  40a6					      repend
   3047  40a7		       ff		      .byte.b	$ff
   3046  40a7					      repend
   3047  40a8		       ff		      .byte.b	$ff
   3046  40a8					      repend
   3047  40a9		       ff		      .byte.b	$ff
   3046  40a9					      repend
   3047  40aa		       ff		      .byte.b	$ff
   3046  40aa					      repend
   3047  40ab		       ff		      .byte.b	$ff
   3046  40ab					      repend
   3047  40ac		       ff		      .byte.b	$ff
   3046  40ac					      repend
   3047  40ad		       ff		      .byte.b	$ff
   3046  40ad					      repend
   3047  40ae		       ff		      .byte.b	$ff
   3046  40ae					      repend
   3047  40af		       ff		      .byte.b	$ff
   3046  40af					      repend
   3047  40b0		       ff		      .byte.b	$ff
   3046  40b0					      repend
   3047  40b1		       ff		      .byte.b	$ff
   3046  40b1					      repend
   3047  40b2		       ff		      .byte.b	$ff
   3046  40b2					      repend
   3047  40b3		       ff		      .byte.b	$ff
   3046  40b3					      repend
   3047  40b4		       ff		      .byte.b	$ff
   3046  40b4					      repend
   3047  40b5		       ff		      .byte.b	$ff
   3046  40b5					      repend
   3047  40b6		       ff		      .byte.b	$ff
   3046  40b6					      repend
   3047  40b7		       ff		      .byte.b	$ff
   3046  40b7					      repend
   3047  40b8		       ff		      .byte.b	$ff
   3046  40b8					      repend
   3047  40b9		       ff		      .byte.b	$ff
   3046  40b9					      repend
   3047  40ba		       ff		      .byte.b	$ff
   3046  40ba					      repend
   3047  40bb		       ff		      .byte.b	$ff
   3046  40bb					      repend
   3047  40bc		       ff		      .byte.b	$ff
   3046  40bc					      repend
   3047  40bd		       ff		      .byte.b	$ff
   3046  40bd					      repend
   3047  40be		       ff		      .byte.b	$ff
   3046  40be					      repend
   3047  40bf		       ff		      .byte.b	$ff
   3046  40bf					      repend
   3047  40c0		       ff		      .byte.b	$ff
   3046  40c0					      repend
   3047  40c1		       ff		      .byte.b	$ff
   3046  40c1					      repend
   3047  40c2		       ff		      .byte.b	$ff
   3046  40c2					      repend
   3047  40c3		       ff		      .byte.b	$ff
   3046  40c3					      repend
   3047  40c4		       ff		      .byte.b	$ff
   3046  40c4					      repend
   3047  40c5		       ff		      .byte.b	$ff
   3046  40c5					      repend
   3047  40c6		       ff		      .byte.b	$ff
   3046  40c6					      repend
   3047  40c7		       ff		      .byte.b	$ff
   3046  40c7					      repend
   3047  40c8		       ff		      .byte.b	$ff
   3046  40c8					      repend
   3047  40c9		       ff		      .byte.b	$ff
   3046  40c9					      repend
   3047  40ca		       ff		      .byte.b	$ff
   3046  40ca					      repend
   3047  40cb		       ff		      .byte.b	$ff
   3046  40cb					      repend
   3047  40cc		       ff		      .byte.b	$ff
   3046  40cc					      repend
   3047  40cd		       ff		      .byte.b	$ff
   3046  40cd					      repend
   3047  40ce		       ff		      .byte.b	$ff
   3046  40ce					      repend
   3047  40cf		       ff		      .byte.b	$ff
   3046  40cf					      repend
   3047  40d0		       ff		      .byte.b	$ff
   3046  40d0					      repend
   3047  40d1		       ff		      .byte.b	$ff
   3046  40d1					      repend
   3047  40d2		       ff		      .byte.b	$ff
   3046  40d2					      repend
   3047  40d3		       ff		      .byte.b	$ff
   3046  40d3					      repend
   3047  40d4		       ff		      .byte.b	$ff
   3046  40d4					      repend
   3047  40d5		       ff		      .byte.b	$ff
   3046  40d5					      repend
   3047  40d6		       ff		      .byte.b	$ff
   3046  40d6					      repend
   3047  40d7		       ff		      .byte.b	$ff
   3046  40d7					      repend
   3047  40d8		       ff		      .byte.b	$ff
   3046  40d8					      repend
   3047  40d9		       ff		      .byte.b	$ff
   3046  40d9					      repend
   3047  40da		       ff		      .byte.b	$ff
   3046  40da					      repend
   3047  40db		       ff		      .byte.b	$ff
   3046  40db					      repend
   3047  40dc		       ff		      .byte.b	$ff
   3046  40dc					      repend
   3047  40dd		       ff		      .byte.b	$ff
   3046  40dd					      repend
   3047  40de		       ff		      .byte.b	$ff
   3046  40de					      repend
   3047  40df		       ff		      .byte.b	$ff
   3046  40df					      repend
   3047  40e0		       ff		      .byte.b	$ff
   3046  40e0					      repend
   3047  40e1		       ff		      .byte.b	$ff
   3046  40e1					      repend
   3047  40e2		       ff		      .byte.b	$ff
   3046  40e2					      repend
   3047  40e3		       ff		      .byte.b	$ff
   3046  40e3					      repend
   3047  40e4		       ff		      .byte.b	$ff
   3046  40e4					      repend
   3047  40e5		       ff		      .byte.b	$ff
   3046  40e5					      repend
   3047  40e6		       ff		      .byte.b	$ff
   3046  40e6					      repend
   3047  40e7		       ff		      .byte.b	$ff
   3046  40e7					      repend
   3047  40e8		       ff		      .byte.b	$ff
   3046  40e8					      repend
   3047  40e9		       ff		      .byte.b	$ff
   3046  40e9					      repend
   3047  40ea		       ff		      .byte.b	$ff
   3046  40ea					      repend
   3047  40eb		       ff		      .byte.b	$ff
   3046  40eb					      repend
   3047  40ec		       ff		      .byte.b	$ff
   3046  40ec					      repend
   3047  40ed		       ff		      .byte.b	$ff
   3046  40ed					      repend
   3047  40ee		       ff		      .byte.b	$ff
   3046  40ee					      repend
   3047  40ef		       ff		      .byte.b	$ff
   3046  40ef					      repend
   3047  40f0		       ff		      .byte.b	$ff
   3046  40f0					      repend
   3047  40f1		       ff		      .byte.b	$ff
   3046  40f1					      repend
   3047  40f2		       ff		      .byte.b	$ff
   3046  40f2					      repend
   3047  40f3		       ff		      .byte.b	$ff
   3046  40f3					      repend
   3047  40f4		       ff		      .byte.b	$ff
   3046  40f4					      repend
   3047  40f5		       ff		      .byte.b	$ff
   3046  40f5					      repend
   3047  40f6		       ff		      .byte.b	$ff
   3046  40f6					      repend
   3047  40f7		       ff		      .byte.b	$ff
   3046  40f7					      repend
   3047  40f8		       ff		      .byte.b	$ff
   3046  40f8					      repend
   3047  40f9		       ff		      .byte.b	$ff
   3046  40f9					      repend
   3047  40fa		       ff		      .byte.b	$ff
   3046  40fa					      repend
   3047  40fb		       ff		      .byte.b	$ff
   3046  40fb					      repend
   3047  40fc		       ff		      .byte.b	$ff
   3046  40fc					      repend
   3047  40fd		       ff		      .byte.b	$ff
   3046  40fd					      repend
   3047  40fe		       ff		      .byte.b	$ff
   3046  40fe					      repend
   3047  40ff		       ff		      .byte.b	$ff
   3048  4100					      repend
   3049  4100				   .
   3050  4100							; 
   3051  4100
   3052  4100				   .L0223		;  temp1  =  temp1
   3053  4100
   3054  4100		       a5 9c		      LDA	temp1
   3055  4102		       85 9c		      STA	temp1
   3056  4104				   .
   3057  4104							; 
   3058  4104
   3059  4104				   .L0224		;  asm
   3060  4104
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  4104					      include	"titlescreen/asm/titlescreen.asm"
      1  4104
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  4104					      include	"titlescreen/asm/layoutmacros.asm"
      1  4104
      2  4104							; the macro's used in the "titlescreen_layout.asm" file
      3  4104
      4  4104					      MAC	draw_96x2_1
      5  4104				   mk_96x2_1_on =	1
      6  4104					      jsr	draw_bmp_96x2_1
      7  4104					      ENDM
      8  4104
      9  4104					      MAC	draw_96x2_2
     10  4104				   mk_96x2_2_on =	1
     11  4104					      jsr	draw_bmp_96x2_2
     12  4104					      ENDM
     13  4104
     14  4104					      MAC	draw_96x2_3
     15  4104				   mk_96x2_3_on =	1
     16  4104					      jsr	draw_bmp_96x2_3
     17  4104					      ENDM
     18  4104
     19  4104					      MAC	draw_96x2_4
     20  4104				   mk_96x2_4_on =	1
     21  4104					      jsr	draw_bmp_96x2_4
     22  4104					      ENDM
     23  4104
     24  4104					      MAC	draw_96x2_5
     25  4104				   mk_96x2_5_on =	1
     26  4104					      jsr	draw_bmp_96x2_5
     27  4104					      ENDM
     28  4104
     29  4104					      MAC	draw_96x2_6
     30  4104				   mk_96x2_6_on =	1
     31  4104					      jsr	draw_bmp_96x2_6
     32  4104					      ENDM
     33  4104
     34  4104					      MAC	draw_96x2_7
     35  4104				   mk_96x2_7_on =	1
     36  4104					      jsr	draw_bmp_96x2_7
     37  4104					      ENDM
     38  4104
     39  4104					      MAC	draw_96x2_8
     40  4104				   mk_96x2_8_on =	1
     41  4104					      jsr	draw_bmp_96x2_8
     42  4104					      ENDM
     43  4104
     44  4104					      MAC	draw_48x1_1
     45  4104				   mk_48x1_X_on =	1
     46  4104				   mk_48x1_1_on =	1
     47  4104					      jsr	draw_bmp_48x1_1
     48  4104					      ENDM
     49  4104
     50  4104					      MAC	draw_48x1_2
     51  4104				   mk_48x1_X_on =	1
     52  4104				   mk_48x1_2_on =	1
     53  4104					      jsr	draw_bmp_48x1_2
     54  4104					      ENDM
     55  4104
     56  4104					      MAC	draw_48x1_3
     57  4104				   mk_48x1_X_on =	1
     58  4104				   mk_48x1_3_on =	1
     59  4104					      jsr	draw_bmp_48x1_3
     60  4104					      ENDM
     61  4104
     62  4104					      MAC	draw_48x1_4
     63  4104				   mk_48x1_X_on =	1
     64  4104				   mk_48x1_4_on =	1
     65  4104					      jsr	draw_bmp_48x1_4
     66  4104					      ENDM
     67  4104
     68  4104					      MAC	draw_48x1_5
     69  4104				   mk_48x1_X_on =	1
     70  4104				   mk_48x1_5_on =	1
     71  4104					      jsr	draw_bmp_48x1_5
     72  4104					      ENDM
     73  4104
     74  4104					      MAC	draw_48x1_6
     75  4104				   mk_48x1_X_on =	1
     76  4104				   mk_48x1_6_on =	1
     77  4104					      jsr	draw_bmp_48x1_6
     78  4104					      ENDM
     79  4104
     80  4104					      MAC	draw_48x1_7
     81  4104				   mk_48x1_X_on =	1
     82  4104				   mk_48x1_7_on =	1
     83  4104					      jsr	draw_bmp_48x1_7
     84  4104					      ENDM
     85  4104
     86  4104					      MAC	draw_48x1_8
     87  4104				   mk_48x1_X_on =	1
     88  4104				   mk_48x1_8_on =	1
     89  4104					      jsr	draw_bmp_48x1_8
     90  4104					      ENDM
     91  4104
     92  4104
     93  4104					      MAC	draw_48x2_1
     94  4104				   mk_48x2_X_on =	1
     95  4104				   mk_48x2_1_on =	1
     96  4104					      jsr	draw_bmp_48x2_1
     97  4104					      ENDM
     98  4104
     99  4104					      MAC	draw_48x2_2
    100  4104				   mk_48x2_X_on =	1
    101  4104				   mk_48x2_2_on =	1
    102  4104					      jsr	draw_bmp_48x2_2
    103  4104					      ENDM
    104  4104
    105  4104					      MAC	draw_48x2_3
    106  4104				   mk_48x2_X_on =	1
    107  4104				   mk_48x2_3_on =	1
    108  4104					      jsr	draw_bmp_48x2_3
    109  4104					      ENDM
    110  4104
    111  4104					      MAC	draw_48x2_4
    112  4104				   mk_48x2_X_on =	1
    113  4104				   mk_48x2_4_on =	1
    114  4104					      jsr	draw_bmp_48x2_4
    115  4104					      ENDM
    116  4104
    117  4104					      MAC	draw_48x2_5
    118  4104				   mk_48x2_X_on =	1
    119  4104				   mk_48x2_5_on =	1
    120  4104					      jsr	draw_bmp_48x2_5
    121  4104					      ENDM
    122  4104
    123  4104					      MAC	draw_48x2_6
    124  4104				   mk_48x2_X_on =	1
    125  4104				   mk_48x2_6_on =	1
    126  4104					      jsr	draw_bmp_48x2_6
    127  4104					      ENDM
    128  4104
    129  4104					      MAC	draw_48x2_7
    130  4104				   mk_48x2_X_on =	1
    131  4104				   mk_48x2_7_on =	1
    132  4104					      jsr	draw_bmp_48x2_7
    133  4104					      ENDM
    134  4104
    135  4104					      MAC	draw_48x2_8
    136  4104				   mk_48x2_X_on =	1
    137  4104				   mk_48x2_8_on =	1
    138  4104					      jsr	draw_bmp_48x2_8
    139  4104					      ENDM
    140  4104
    141  4104					      MAC	draw_player
    142  4104				   mk_player_on =	1
    143  4104					      jsr	draw_player_display
    144  4104					      ENDM
    145  4104
    146  4104					      MAC	draw_score
    147  4104				   mk_score_on =	1
    148  4104				   mk_48x1_X_on =	1
    149  4104					      jsr	draw_score_display
    150  4104					      ENDM
    151  4104
    152  4104					      MAC	draw_gameselect
    153  4104				   mk_gameselect_on =	1
    154  4104				   mk_48x1_X_on =	1
    155  4104					      jsr	draw_gameselect_display
    156  4104					      ENDM
    157  4104
    158  4104					      MAC	draw_space
    159  4104					      ldy	#{1}
    160  4104				   .loop
    161  4104					      sta	WSYNC
    162  4104					      dey
    163  4104					      bne	.loop
    164  4104					      ENDM
    165  4104
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  4104					      include	"titlescreen/asm/dpcfix.asm"
      1  4104							; reassign variables that DPC+ doesn't have
      2  4104
      3  4104				  -	      ifnconst	aux2
      4  4104				  -aux2       =	player2x
      5  4104					      endif
      6  4104				  -	      ifnconst	aux4
      7  4104				  -aux4       =	player4x
      8  4104					      endif
      9  4104				  -	      ifnconst	aux5
     10  4104				  -aux5       =	player5x
     11  4104					      endif
     12  4104				  -	      ifnconst	aux6
     13  4104				  -aux6       =	player6x
     14  4104					      endif
     15  4104
     16  4104				  -	      ifnconst	player0pointer
     17  4104				  -player0pointer =	player2y
     18  4104					      endif
     19  4104				  -	      ifnconst	player1pointer
     20  4104				  -player1pointer =	player2height	; to player3height
     21  4104					      endif
     22  4104				  -	      ifnconst	player1color
     23  4104				  -player1color =	player4height	; to player5height
     24  4104					      endif
     25  4104				  -	      ifnconst	scorepointers
     26  4104				  -scorepointers =	player6height	; to NUSIZ8
     27  4104					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  4104					      include	"titlescreen/titlescreen_layout.asm"
      1  4104
      2  4104							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  4104							; in the order they were listed.
      4  4104							;
      5  4104							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  4104							; it won't use any rom space.
      7  4104
      8  4104					      MAC	titlescreenlayout
      9  4104
     10  4104							;draw_96x2_1
     11  4104							;draw_96x2_2
     12  4104							;draw_96x2_3
     13  4104
     14  4104					      draw_48x2_1		; title
     15  4104
     16  4104							; draw_48x1_1 ; head-only
     17  4104					      draw_48x1_2		;  body and title
     18  4104
     19  4104					      draw_space	5
     20  4104					      draw_48x1_3
     21  4104
     22  4104							;draw_48x2_2
     23  4104							;draw_48x2_3
     24  4104							;draw_player
     25  4104
     26  4104							;draw_gameselect
     27  4104
     28  4104					      draw_space	5
     29  4104					      draw_score
     30  4104					      ENDM
     31  4104
     32  4104							; minikernel choices are:
     33  4104							; 
     34  4104							; draw_48x1_1, draw_48x1_2, draw_48x1_3 
     35  4104							;	The first, second, and third 48-wide single-line bitmap minikernels
     36  4104							;
     37  4104							; draw_48x2_1, draw_48x2_2, draw_48x2_3 
     38  4104							;	The first, second, and third 48-wide double-line bitmap minikernels
     39  4104							;
     40  4104							; draw_96x2_1, draw_96x2_2, draw_96x2_3 
     41  4104							;	The first, second, and third 96-wide double-line bitmap minikernels
     42  4104							;
     43  4104							; draw_gameselect
     44  4104							;	The game selection display minikernel
     45  4104							;
     46  4104							; draw_score
     47  4104							;	A minikernel that draws the score
     48  4104							;
     49  4104							; draw_space 10
     50  4104							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  4104
      6  4104				   .titledrawscreen
      7  4104				   title_eat_overscan
      8  4104							;bB runs in overscan. Wait for the overscan to run out...
      9  4104		       18		      clc
     10  4105		       ad 84 02 	      lda	INTIM
     11  4108		       30 fa		      bmi	title_eat_overscan
     12  410a		       4c 0d 71 	      jmp	title_do_vertical_sync
     13  410d
     14  410d				   title_do_vertical_sync
     15  410d		       a9 02		      lda	#2
     16  410f		       85 02		      sta	WSYNC	;one line with VSYNC
     17  4111		       85 00		      sta	VSYNC	;enable VSYNC
     18  4113		       85 02		      sta	WSYNC	;one line with VSYNC
     19  4115		       85 02		      sta	WSYNC	;one line with VSYNC
     20  4117		       a9 00		      lda	#0
     21  4119		       85 02		      sta	WSYNC	;one line with VSYNC
     22  411b		       85 00		      sta	VSYNC	;turn off VSYNC
     23  411d
     24  411d							;lda #42+128
     25  411d				  -	      ifnconst	vblank_time
     26  411d				  -	      lda	#42+128
     27  411d					      else
     28  411d		       a9 ab		      lda	#vblank_time+128
     29  411f					      endif
     30  411f
     31  411f		       8d 96 02 	      sta	TIM64T
     32  4122
     33  4122		       00 82	   titleframe =	missile0x
     34  4122		       e6 82		      inc	titleframe	; increment the frame counter
     35  4124
     36  4124				  -	      ifconst	.title_vblank
     37  4124				  -	      jsr	.title_vblank
     38  4124					      endif
     39  4124
     40  4124				   title_vblank_loop
     41  4124		       ad 84 02 	      lda	INTIM
     42  4127		       30 fb		      bmi	title_vblank_loop
     43  4129		       a9 00		      lda	#0
     44  412b		       85 02		      sta	WSYNC
     45  412d		       85 01		      sta	VBLANK
     46  412f		       85 1d		      sta	ENAM0
     47  4131		       85 1f		      sta	ENABL
     48  4133
     49  4133				   title_playfield
     50  4133
     51  4133							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  4133
     53  4133		       a9 e6		      lda	#230
     54  4135		       8d 96 02 	      sta	TIM64T
     55  4138
     56  4138		       a9 01		      lda	#1
     57  413a		       85 0a		      sta	CTRLPF
     58  413c		       18		      clc
     59  413d
     60  413d		       a9 00		      lda	#0
     61  413f		       85 02		      sta	WSYNC
     62  4141		       ad 8b 71 	      lda	titlescreencolor
     63  4144		       85 09		      sta	COLUBK
     64  4146
      0  4146					      titlescreenlayout
      1  4146
      2  4146
      3  4146
      4  4146
      5  4146
      0  4146					      draw_48x2_1
      1  4146		       00 01	   mk_48x2_X_on =	1
      2  4146		       00 01	   mk_48x2_1_on =	1
      3  4146		       20 1d 72 	      jsr	draw_bmp_48x2_1
      7  4149
      8  4149
      0  4149					      draw_48x1_2
      1  4149		       00 01	   mk_48x1_X_on =	1
      2  4149		       00 01	   mk_48x1_2_on =	1
      3  4149		       20 8c 71 	      jsr	draw_bmp_48x1_2
     10  414c
      0  414c					      draw_space	5
      1  414c		       a0 05		      ldy	#5
      2  414e				   .loop
      3  414e		       85 02		      sta	WSYNC
      4  4150		       88		      dey
      5  4151		       d0 fb		      bne	.loop
      0  4153					      draw_48x1_3
      1  4153		       00 01	   mk_48x1_X_on =	1
      2  4153		       00 01	   mk_48x1_3_on =	1
      3  4153		       20 d6 71 	      jsr	draw_bmp_48x1_3
     13  4156
     14  4156
     15  4156
     16  4156
     17  4156
     18  4156
     19  4156
      0  4156					      draw_space	5
      1  4156		       a0 05		      ldy	#5
      2  4158				   .loop
      3  4158		       85 02		      sta	WSYNC
      4  415a		       88		      dey
      5  415b		       d0 fb		      bne	.loop
      0  415d					      draw_score
      1  415d		       00 01	   mk_score_on =	1
      2  415d		       00 01	   mk_48x1_X_on =	1
      3  415d		       20 91 73 	      jsr	draw_score_display
     66  4160
     67  4160		       4c 58 74 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     68  4163
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  4163					      include	"titlescreen/asm/position48.asm"
      1  4163
      2  4163				   position48
      3  4163
      4  4163							;postion P0 and P1
      5  4163
      6  4163		       85 02		      sta	WSYNC
      7  4165
      8  4165		       a9 90		      lda	#$90	;2
      9  4167		       85 20		      sta	HMP0	;3
     10  4169		       a9 a0		      lda	#$A0	;2
     11  416b		       85 21		      sta	HMP1	;3
     12  416d
     13  416d		       e6 9c		      inc	temp1
     14  416f		       c6 9c		      dec	temp1
     15  4171		       e6 9c		      inc	temp1
     16  4173		       c6 9c		      dec	temp1
     17  4175		       e6 9c		      inc	temp1
      0  4177					      sleep	2
      1  4177				   .CYCLES    SET	2
      2  4177
      3  4177				  -	      IF	.CYCLES < 2
      4  4177				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4177				  -	      ERR
      6  4177					      ENDIF
      7  4177
      8  4177				  -	      IF	.CYCLES & 1
      9  4177				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4177				  -	      nop	0
     11  4177				  -	      ELSE
     12  4177				  -	      bit	VSYNC
     13  4177				  -	      ENDIF
     14  4177				  -.CYCLES    SET	.CYCLES - 3
     15  4177					      ENDIF
     16  4177
     17  4177					      REPEAT	.CYCLES / 2
     18  4177		       ea		      nop
     19  4178					      REPEND
     19  4178		       85 10		      sta	RESP0	;  +3
     20  417a		       85 11		      sta	RESP1	;  +3
     21  417c		       c6 9c		      dec	temp1	;  +5
     22  417e		       e6 9c		      inc	temp1	;  +5
     23  4180		       c6 9c		      dec	temp1	;  +5
     24  4182		       e6 9c		      inc	temp1	;  +5
     25  4184		       c6 9c		      dec	temp1	;  +5
      0  4186					      sleep	3
      1  4186				   .CYCLES    SET	3
      2  4186
      3  4186				  -	      IF	.CYCLES < 2
      4  4186				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4186				  -	      ERR
      6  4186					      ENDIF
      7  4186
      8  4186					      IF	.CYCLES & 1
      9  4186					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4186		       04 00		      nop	0
     11  4188				  -	      ELSE
     12  4188				  -	      bit	VSYNC
     13  4188					      ENDIF
     14  4188				   .CYCLES    SET	.CYCLES - 3
     15  4188					      ENDIF
     16  4188
     17  4188				  -	      REPEAT	.CYCLES / 2
     18  4188				  -	      nop
     19  4188					      REPEND
     27  4188		       85 2a		      sta	HMOVE	; +76
     28  418a		       60		      RTS
     29  418b
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  418b					      include	"titlescreen/titlescreen_color.asm"
      1  418b
      2  418b							; This is where the titlescreen background color gets set. 
      3  418b							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  418b							; if you want to change the color on the fly.
      5  418b
      6  418b				  -	      ifnconst	titlescreencolor
      7  418b				  -titlescreencolor
      8  418b					      endif
      9  418b		       00		      .byte.b	$00
     10  418c
------- FILE titlescreen/asm/titlescreen.asm
     71  418c
     72  418c				  -	      ifconst	mk_48x1_1_on
     73  418c				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     74  418c					      endif		;mk_48x1_1_on
     75  418c
     76  418c					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 3
      0  418c					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  418c
      2  418c				   draw_bmp_48x1_2
      3  418c
      4  418c		       a9 00		      lda	#0
      5  418e		       85 1b		      sta	GRP0
      6  4190		       85 1c		      sta	GRP1
      7  4192
      8  4192		       a0 0b		      ldy	#11
      9  4194				   bmp_48x1_2_pointersetup
     10  4194		       b9 ca 71 	      lda	bmp_48x1_2_values,y
     11  4197		       99 96 00 	      sta	scorepointers,y
     12  419a		       88		      dey
     13  419b		       b9 ca 71 	      lda	bmp_48x1_2_values,y
     14  419e					      ifconst	bmp_48x1_2_index
     15  419e		       38		      sec
     16  419f		       e5 e2		      sbc	bmp_48x1_2_index
     17  41a1					      endif
     18  41a1		       99 96 00 	      sta	scorepointers,y
     19  41a4		       88		      dey
     20  41a5		       10 ed		      bpl	bmp_48x1_2_pointersetup
     21  41a7
     22  41a7		       a0 74		      ldy	(#bmp_48x1_2_window-1)
     23  41a9		       84 f1		      sty	aux2
     24  41ab
     25  41ab					      ifconst	bmp_48x1_2_background
     26  41ab		       ad 6d 74 	      lda	bmp_48x1_2_background
     27  41ae				  -	      else
     28  41ae				  -	      lda	titlescreencolor
     29  41ae					      endif
     30  41ae		       85 f3		      sta	aux4
     31  41b0
     32  41b0		       a5 e8		      lda	bmp_48x1_2_color
     33  41b2		       85 06		      sta	COLUP0	;3
     34  41b4		       85 07		      sta	COLUP1	;3
     35  41b6		       85 2b		      sta	HMCLR	;3
     36  41b8
     37  41b8		       ad 8b 71 	      lda	titlescreencolor
     38  41bb		       85 08		      sta	COLUPF
     39  41bd
     40  41bd					      ifconst	bmp_48x1_2_PF1
     41  41bd		       ad 6b 74 	      lda	bmp_48x1_2_PF1
     42  41c0				  -	      else
     43  41c0				  -	      lda	#0
     44  41c0				  -	      nop
     45  41c0					      endif
     46  41c0		       85 0e		      sta	PF1
     47  41c2
     48  41c2					      ifconst	bmp_48x1_2_PF2
     49  41c2		       ad 6c 74 	      lda	bmp_48x1_2_PF2
     50  41c5				  -	      else
     51  41c5				  -	      lda	#0
     52  41c5				  -	      nop
     53  41c5					      endif
     54  41c5		       85 0f		      sta	PF2
     55  41c7
     56  41c7		       4c 68 72 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  41ca
     58  41ca				   bmp_48x1_2_values
     59  41ca		       75 75		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  41cc		       75 76		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  41ce		       75 77		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  41d0		       75 78		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  41d2		       75 79		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  41d4		       75 7a		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  41d6
------- FILE titlescreen/asm/titlescreen.asm
     78  41d6					      endif		;mk_48x1_2_on
     79  41d6
     80  41d6					      ifconst	mk_48x1_3_on
------- FILE titlescreen/asm/48x1_3_kernel.asm LEVEL 3 PASS 3
      0  41d6					      include	"titlescreen/asm/48x1_3_kernel.asm"
      1  41d6
      2  41d6				   draw_bmp_48x1_3
      3  41d6
      4  41d6		       a9 00		      lda	#0
      5  41d8		       85 1b		      sta	GRP0
      6  41da		       85 1c		      sta	GRP1
      7  41dc
      8  41dc		       a0 0b		      ldy	#11
      9  41de				   bmp_48x1_3_pointersetup
     10  41de		       b9 11 72 	      lda	bmp_48x1_3_values,y
     11  41e1		       99 96 00 	      sta	scorepointers,y
     12  41e4		       88		      dey
     13  41e5		       b9 11 72 	      lda	bmp_48x1_3_values,y
     14  41e8				  -	      ifconst	bmp_48x1_3_index
     15  41e8				  -	      sec
     16  41e8				  -	      sbc	bmp_48x1_3_index
     17  41e8					      endif
     18  41e8		       99 96 00 	      sta	scorepointers,y
     19  41eb		       88		      dey
     20  41ec		       10 f0		      bpl	bmp_48x1_3_pointersetup
     21  41ee
     22  41ee		       a0 0a		      ldy	(#bmp_48x1_3_window-1)
     23  41f0		       84 f1		      sty	aux2
     24  41f2
     25  41f2					      ifconst	bmp_48x1_3_background
     26  41f2		       ad ee 7a 	      lda	bmp_48x1_3_background
     27  41f5				  -	      else
     28  41f5				  -	      lda	titlescreencolor
     29  41f5					      endif
     30  41f5		       85 f3		      sta	aux4
     31  41f7
     32  41f7		       a5 e7		      lda	bmp_48x1_3_color
     33  41f9		       85 06		      sta	COLUP0	;3
     34  41fb		       85 07		      sta	COLUP1	;3
     35  41fd		       85 2b		      sta	HMCLR	;3
     36  41ff
     37  41ff		       ad 8b 71 	      lda	titlescreencolor
     38  4202		       85 08		      sta	COLUPF
     39  4204
     40  4204					      ifconst	bmp_48x1_3_PF1
     41  4204		       ad ec 7a 	      lda	bmp_48x1_3_PF1
     42  4207				  -	      else
     43  4207				  -	      lda	#0
     44  4207				  -	      nop
     45  4207					      endif
     46  4207		       85 0e		      sta	PF1
     47  4209
     48  4209					      ifconst	bmp_48x1_3_PF2
     49  4209		       ad ed 7a 	      lda	bmp_48x1_3_PF2
     50  420c				  -	      else
     51  420c				  -	      lda	#0
     52  420c				  -	      nop
     53  420c					      endif
     54  420c		       85 0f		      sta	PF2
     55  420e
     56  420e		       4c 68 72 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  4211
     58  4211				   bmp_48x1_3_values
     59  4211		       ef 7a		      .word.w	(bmp_48x1_3_00+#bmp_48x1_3_height-#bmp_48x1_3_window)
     60  4213		       00 7b		      .word.w	(bmp_48x1_3_01+#bmp_48x1_3_height-#bmp_48x1_3_window)
     61  4215		       0b 7b		      .word.w	(bmp_48x1_3_02+#bmp_48x1_3_height-#bmp_48x1_3_window)
     62  4217		       16 7b		      .word.w	(bmp_48x1_3_03+#bmp_48x1_3_height-#bmp_48x1_3_window)
     63  4219		       21 7b		      .word.w	(bmp_48x1_3_04+#bmp_48x1_3_height-#bmp_48x1_3_window)
     64  421b		       2c 7b		      .word.w	(bmp_48x1_3_05+#bmp_48x1_3_height-#bmp_48x1_3_window)
     65  421d
------- FILE titlescreen/asm/titlescreen.asm
     82  421d					      endif		;mk_48x1_3_on
     83  421d
     84  421d				  -	      ifconst	mk_48x1_4_on
     85  421d				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     86  421d					      endif		;mk_48x1_4_on
     87  421d
     88  421d				  -	      ifconst	mk_48x1_5_on
     89  421d				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     90  421d					      endif		;mk_48x1_5_on
     91  421d
     92  421d				  -	      ifconst	mk_48x1_6_on
     93  421d				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     94  421d					      endif		;mk_48x1_6_on
     95  421d
     96  421d				  -	      ifconst	mk_48x1_7_on
     97  421d				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
     98  421d					      endif		;mk_48x1_7_on
     99  421d
    100  421d				  -	      ifconst	mk_48x1_8_on
    101  421d				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    102  421d					      endif		;mk_48x1_8_on
    103  421d
    104  421d					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  421d					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  421d
      2  421d				   draw_bmp_48x2_1
      3  421d
      4  421d		       a9 37		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  421f				  -	      ifconst	bmp_48x2_1_index
      6  421f				  -	      sec
      7  421f				  -	      sbc	bmp_48x2_1_index
      8  421f					      endif
      9  421f		       85 f4		      sta	aux5+0
     10  4221		       a9 7b		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  4223		       85 f5		      sta	aux5+1
     12  4225
     13  4225		       a0 0b		      ldy	#11
     14  4227				   bmp_48x2_1_pointersetup
     15  4227		       b9 5c 72 	      lda	bmp_48x2_1_values,y
     16  422a		       99 96 00 	      sta	scorepointers,y
     17  422d		       88		      dey
     18  422e		       b9 5c 72 	      lda	bmp_48x2_1_values,y
     19  4231				  -	      ifconst	bmp_48x2_1_index
     20  4231				  -	      sec
     21  4231				  -	      sbc	bmp_48x2_1_index
     22  4231					      endif
     23  4231		       99 96 00 	      sta	scorepointers,y
     24  4234		       88		      dey
     25  4235		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  4237
     27  4237
     28  4237		       a0 08		      ldy	#(bmp_48x2_1_window-1)
     29  4239		       84 f1		      sty	aux2
     30  423b
     31  423b		       c8		      iny
     32  423c		       b1 f4		      lda	(aux5),y
     33  423e		       88		      dey
     34  423f
     35  423f		       85 06		      sta	COLUP0	;3
     36  4241		       85 07		      sta	COLUP1	;3
     37  4243		       85 2b		      sta	HMCLR	;3
     38  4245
     39  4245		       ad 8b 71 	      lda	titlescreencolor
     40  4248		       85 08		      sta	COLUPF
     41  424a
     42  424a					      ifconst	bmp_48x2_1_background
     43  424a		       ad 44 7b 	      lda	bmp_48x2_1_background
     44  424d				  -	      else
     45  424d				  -	      lda	titlescreencolor
     46  424d					      endif
     47  424d		       85 f3		      sta	aux4
     48  424f					      ifconst	bmp_48x2_1_PF1
     49  424f		       ad 42 7b 	      lda	bmp_48x2_1_PF1
     50  4252				  -	      else
     51  4252				  -	      lda	#0
     52  4252				  -	      nop
     53  4252					      endif
     54  4252		       85 0e		      sta	PF1
     55  4254
     56  4254					      ifconst	bmp_48x2_1_PF2
     57  4254		       ad 43 7b 	      lda	bmp_48x2_1_PF2
     58  4257				  -	      else
     59  4257				  -	      lda	#0
     60  4257				  -	      nop
     61  4257					      endif
     62  4257		       85 0f		      sta	PF2
     63  4259
     64  4259		       4c e6 72 	      jmp	draw_bmp_48x2_X
     65  425c
     66  425c				   bmp_48x2_1_values
     67  425c		       45 7b		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  425e		       4f 7b		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  4260		       59 7b		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  4262		       63 7b		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  4264		       6d 7b		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  4266		       77 7b		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  4268
------- FILE titlescreen/asm/titlescreen.asm
    106  4268					      endif		;mk_48x2_1_on
    107  4268
    108  4268				  -	      ifconst	mk_48x2_2_on
    109  4268				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    110  4268					      endif		;mk_48x2_2_on
    111  4268
    112  4268				  -	      ifconst	mk_48x2_3_on
    113  4268				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    114  4268					      endif		;mk_48x2_3_on
    115  4268
    116  4268				  -	      ifconst	mk_48x2_4_on
    117  4268				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    118  4268					      endif		;mk_48x2_4_on
    119  4268
    120  4268				  -	      ifconst	mk_48x2_5_on
    121  4268				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    122  4268					      endif		;mk_48x2_5_on
    123  4268
    124  4268				  -	      ifconst	mk_48x2_6_on
    125  4268				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    126  4268					      endif		;mk_48x2_6_on
    127  4268
    128  4268				  -	      ifconst	mk_48x2_7_on
    129  4268				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    130  4268					      endif		;mk_48x2_7_on
    131  4268
    132  4268				  -	      ifconst	mk_48x2_8_on
    133  4268				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    134  4268					      endif		;mk_48x2_8_on
    135  4268
    136  4268					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  4268					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  4268				   draw_bmp_48x1_X
      2  4268
      3  4268		       a9 03		      lda	#3
      4  426a		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      5  426c		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
      6  426e
      7  426e		       ba		      tsx
      8  426f		       86 f6		      stx	stack1	;save the stack pointer
      9  4271
     10  4271		       20 63 71 	      jsr	position48
     11  4274
     12  4274		       a9 03		      lda	#3	;2
     13  4276		       85 25		      sta	VDELP0	;3
     14  4278		       85 26		      sta	VDELP1	;3
     15  427a
     16  427a		       a9 01		      lda	#1	;2
     17  427c		       85 0a		      sta	CTRLPF	;3
     18  427e
     19  427e							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  427e		       85 2b		      sta	HMCLR
     21  4280
     22  4280		       85 02		      sta	WSYNC
     23  4282		       e6 9c		      inc	temp1	;5
     24  4284		       c6 9c		      dec	temp1	;5
     25  4286		       e6 9c		      inc	temp1	;5
     26  4288		       c6 9c		      dec	temp1	;5
     27  428a		       e6 9c		      inc	temp1	;5
     28  428c		       c6 9c		      dec	temp1	;5
     29  428e		       e6 9c		      inc	temp1	;5
     30  4290		       c6 9c		      dec	temp1	;5
     31  4292		       e6 9c		      inc	temp1	;5
     32  4294		       c6 9c		      dec	temp1	;5
      0  4296					      sleep	5
      1  4296				   .CYCLES    SET	5
      2  4296
      3  4296				  -	      IF	.CYCLES < 2
      4  4296				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4296				  -	      ERR
      6  4296					      ENDIF
      7  4296
      8  4296					      IF	.CYCLES & 1
      9  4296					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4296		       04 00		      nop	0
     11  4298				  -	      ELSE
     12  4298				  -	      bit	VSYNC
     13  4298					      ENDIF
     14  4298				   .CYCLES    SET	.CYCLES - 3
     15  4298					      ENDIF
     16  4298
     17  4298					      REPEAT	.CYCLES / 2
     18  4298		       ea		      nop
     19  4299					      REPEND
     34  4299		       b3 96		      lax	(scorepointers+0),y	;5
     35  429b
     36  429b		       a5 f3		      lda	aux4	;3
     37  429d		       85 08		      sta	COLUPF	;3
     38  429f
     39  429f		       4c a7 72 	      jmp	pf48x1_X_loop_entry
     40  42a2
     41  42a2				  -	      if	>. != >[.+$27]
     42  42a2				  -	      align	256
     43  42a2					      endif
     44  42a2
     45  42a2				   pf48x1_X_loop
     46  42a2		       88		      dey
     47  42a3		       c6 f1		      dec	aux2
     48  42a5		       b3 96		      lax	(scorepointers+0),y	;5
     49  42a7				   pf48x1_X_loop_entry
     50  42a7		       85 02		      sta	WSYNC
     51  42a9		       b1 98		      lda	(scorepointers+2),y	;5
     52  42ab		       86 1b		      stx	GRP0	;3
     53  42ad		       85 1c		      sta	GRP1	;3
     54  42af		       b1 9a		      lda	(scorepointers+4),y	;5
      0  42b1					      sleep	2
      1  42b1				   .CYCLES    SET	2
      2  42b1
      3  42b1				  -	      IF	.CYCLES < 2
      4  42b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  42b1				  -	      ERR
      6  42b1					      ENDIF
      7  42b1
      8  42b1				  -	      IF	.CYCLES & 1
      9  42b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  42b1				  -	      nop	0
     11  42b1				  -	      ELSE
     12  42b1				  -	      bit	VSYNC
     13  42b1				  -	      ENDIF
     14  42b1				  -.CYCLES    SET	.CYCLES - 3
     15  42b1					      ENDIF
     16  42b1
     17  42b1					      REPEAT	.CYCLES / 2
     18  42b1		       ea		      nop
     19  42b2					      REPEND
     56  42b2		       85 1b		      sta	GRP0	;3
     57  42b4
     58  42b4		       b3 a0		      lax	(scorepointers+10),y	;5
     59  42b6		       b1 9e		      lda	(scorepointers+8),y	;5
     60  42b8		       85 f7		      sta	stack2	;3
     61  42ba		       b1 9c		      lda	(scorepointers+6),y	;5
     62  42bc		       a4 f7		      ldy	stack2	;3
     63  42be
     64  42be		       85 1c		      sta	GRP1	;3
     65  42c0		       84 1b		      sty	GRP0	;3
     66  42c2		       86 1c		      stx	GRP1	;3
     67  42c4		       84 1b		      sty	GRP0	;3
     68  42c6
     69  42c6		       a4 f1		      ldy	aux2	;3
     70  42c8		       d0 d8		      bne	pf48x1_X_loop	;2/3
     71  42ca
     72  42ca				   pf48x1_X_codeend
     73  42ca							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     74  42ca
     75  42ca		       a9 00		      lda	#0
     76  42cc		       85 1b		      sta	GRP0
     77  42ce		       85 1c		      sta	GRP1
     78  42d0		       85 1b		      sta	GRP0
     79  42d2		       85 1c		      sta	GRP1
     80  42d4		       85 1f		      sta	ENABL
     81  42d6		       85 1d		      sta	ENAM0
     82  42d8		       85 25		      sta	VDELP0
     83  42da		       85 26		      sta	VDELP1
     84  42dc		       85 0d		      sta	PF0
     85  42de		       85 0e		      sta	PF1
     86  42e0		       85 0f		      sta	PF2
     87  42e2
     88  42e2		       a6 f6		      ldx	stack1	;restore the stack pointer
     89  42e4		       9a		      txs
     90  42e5		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    138  42e6					      endif		;mk_48x1_X_on
    139  42e6
    140  42e6					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  42e6					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  42e6				   draw_bmp_48x2_X
      2  42e6
      3  42e6		       a9 00		      lda	#0
      4  42e8		       85 1b		      sta	GRP0
      5  42ea		       85 1c		      sta	GRP1
      6  42ec
      7  42ec		       a9 03		      lda	#3
      8  42ee		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  42f0		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  42f2
     11  42f2		       ba		      tsx
     12  42f3		       86 f6		      stx	stack1	;save the stack pointer
     13  42f5
     14  42f5		       20 63 71 	      jsr	position48
     15  42f8
     16  42f8		       a9 03		      lda	#3	;2
     17  42fa		       85 25		      sta	VDELP0	;3
     18  42fc		       85 26		      sta	VDELP1	;3
     19  42fe
     20  42fe		       a9 01		      lda	#1	;2
     21  4300		       85 0a		      sta	CTRLPF	;3
     22  4302
     23  4302							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  4302		       85 2b		      sta	HMCLR
     25  4304		       85 02		      sta	WSYNC
     26  4306
     27  4306
     28  4306							;sleep (63)		;63
     29  4306		       e6 9c		      inc	temp1
     30  4308		       c6 9c		      dec	temp1
     31  430a		       e6 9c		      inc	temp1
     32  430c		       c6 9c		      dec	temp1
     33  430e		       e6 9c		      inc	temp1
     34  4310		       c6 9c		      dec	temp1
     35  4312		       e6 9c		      inc	temp1
     36  4314		       c6 9c		      dec	temp1
     37  4316		       e6 9c		      inc	temp1
     38  4318		       c6 9c		      dec	temp1
     39  431a		       e6 9c		      inc	temp1
     40  431c		       c6 9c		      dec	temp1
      0  431e					      sleep	3
      1  431e				   .CYCLES    SET	3
      2  431e
      3  431e				  -	      IF	.CYCLES < 2
      4  431e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  431e				  -	      ERR
      6  431e					      ENDIF
      7  431e
      8  431e					      IF	.CYCLES & 1
      9  431e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  431e		       04 00		      nop	0
     11  4320				  -	      ELSE
     12  4320				  -	      bit	VSYNC
     13  4320					      ENDIF
     14  4320				   .CYCLES    SET	.CYCLES - 3
     15  4320					      ENDIF
     16  4320
     17  4320				  -	      REPEAT	.CYCLES / 2
     18  4320				  -	      nop
     19  4320					      REPEND
     42  4320
     43  4320		       a5 f3		      lda	aux4	;3
     44  4322		       85 08		      sta	COLUPF	;3
     45  4324
     46  4324		       4c 27 73 	      jmp	pf48x2_X_loop	;3
     47  4327
     48  4327				  -	      if	>. != >[.+$52]
     49  4327				  -	      align	256
     50  4327					      endif
     51  4327
     52  4327				   pf48x2_X_loop
     53  4327
     54  4327		       b1 96		      lda	(scorepointers+0),y	;5
     55  4329		       85 1b		      sta	GRP0	;3
     56  432b		       b1 98		      lda	(scorepointers+2),y	;5
     57  432d		       85 1c		      sta	GRP1	;3
     58  432f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  4331		       85 1b		      sta	GRP0	;3
     60  4333
     61  4333		       b3 a0		      lax	(scorepointers+10),y	;5
     62  4335		       b1 9e		      lda	(scorepointers+8),y	;5
     63  4337		       85 f7		      sta	stack2	;3
     64  4339		       b1 9c		      lda	(scorepointers+6),y	;5
     65  433b		       a4 f7		      ldy	stack2	;3
     66  433d
     67  433d		       85 1c		      sta	GRP1	;3
     68  433f		       84 1b		      sty	GRP0	;3
     69  4341		       86 1c		      stx	GRP1	;3
     70  4343		       84 1b		      sty	GRP0	;3
     71  4345
     72  4345		       a4 f1		      ldy	aux2	;3
     73  4347
     74  4347		       b1 f4		      lda	(aux5),y	;5
     75  4349		       85 91		      sta	missile0y	;3
     76  434b
      0  434b					      sleep	3
      1  434b				   .CYCLES    SET	3
      2  434b
      3  434b				  -	      IF	.CYCLES < 2
      4  434b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  434b				  -	      ERR
      6  434b					      ENDIF
      7  434b
      8  434b					      IF	.CYCLES & 1
      9  434b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  434b		       04 00		      nop	0
     11  434d				  -	      ELSE
     12  434d				  -	      bit	VSYNC
     13  434d					      ENDIF
     14  434d				   .CYCLES    SET	.CYCLES - 3
     15  434d					      ENDIF
     16  434d
     17  434d				  -	      REPEAT	.CYCLES / 2
     18  434d				  -	      nop
     19  434d					      REPEND
     78  434d
     79  434d		       c6 f1		      dec	aux2	;5
     80  434f
     81  434f
     82  434f		       b1 96		      lda	(scorepointers+0),y	;5
     83  4351		       85 1b		      sta	GRP0	;3
     84  4353		       b1 98		      lda	(scorepointers+2),y	;5
     85  4355		       85 1c		      sta	GRP1	;3
     86  4357		       b1 9a		      lda	(scorepointers+4),y	;5
     87  4359		       85 1b		      sta	GRP0	;3
     88  435b
     89  435b		       b3 a0		      lax	(scorepointers+10),y	;5
     90  435d		       b1 9e		      lda	(scorepointers+8),y	;5
     91  435f		       85 f7		      sta	stack2	;3
     92  4361		       b1 9c		      lda	(scorepointers+6),y	;5
     93  4363		       a4 f7		      ldy	stack2	;3
     94  4365
     95  4365		       85 1c		      sta	GRP1	;3
     96  4367		       84 1b		      sty	GRP0	;3
     97  4369		       86 1c		      stx	GRP1	;3
     98  436b		       84 1b		      sty	GRP0	;3
     99  436d
      0  436d					      sleep	4
      1  436d				   .CYCLES    SET	4
      2  436d
      3  436d				  -	      IF	.CYCLES < 2
      4  436d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  436d				  -	      ERR
      6  436d					      ENDIF
      7  436d
      8  436d				  -	      IF	.CYCLES & 1
      9  436d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  436d				  -	      nop	0
     11  436d				  -	      ELSE
     12  436d				  -	      bit	VSYNC
     13  436d				  -	      ENDIF
     14  436d				  -.CYCLES    SET	.CYCLES - 3
     15  436d					      ENDIF
     16  436d
     17  436d					      REPEAT	.CYCLES / 2
     18  436d		       ea		      nop
     17  436d					      REPEND
     18  436e		       ea		      nop
     19  436f					      REPEND
    101  436f
    102  436f		       a5 91		      lda	missile0y
    103  4371		       85 07		      sta	COLUP1
    104  4373		       85 06		      sta	COLUP0
    105  4375
    106  4375		       a4 f1		      ldy	aux2	;3
    107  4377		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  4379
    109  4379
    110  4379				   pf48x2_X_codeend
    111  4379							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  4379
    113  4379		       a9 00		      lda	#0
    114  437b		       85 1b		      sta	GRP0
    115  437d		       85 1c		      sta	GRP1
    116  437f		       85 1b		      sta	GRP0
    117  4381		       85 1c		      sta	GRP1
    118  4383		       85 25		      sta	VDELP0
    119  4385		       85 26		      sta	VDELP1
    120  4387		       85 0d		      sta	PF0
    121  4389		       85 0e		      sta	PF1
    122  438b		       85 0f		      sta	PF2
    123  438d
    124  438d		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  438f		       9a		      txs
    126  4390		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    142  4391					      endif		;mk_48x2_X_on
    143  4391
    144  4391
    145  4391				  -	      ifconst	mk_96x2_1_on
    146  4391				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    147  4391					      endif		;mk_96x2_1_on
    148  4391
    149  4391				  -	      ifconst	mk_96x2_2_on
    150  4391				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    151  4391					      endif		;mk_96x2_2_on
    152  4391
    153  4391				  -	      ifconst	mk_96x2_3_on
    154  4391				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    155  4391					      endif		;mk_96x2_3_on
    156  4391
    157  4391				  -	      ifconst	mk_96x2_4_on
    158  4391				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    159  4391					      endif		;mk_96x2_4_on
    160  4391
    161  4391				  -	      ifconst	mk_96x2_5_on
    162  4391				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    163  4391					      endif		;mk_96x2_5_on
    164  4391
    165  4391				  -	      ifconst	mk_96x2_6_on
    166  4391				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    167  4391					      endif		;mk_96x2_6_on
    168  4391
    169  4391				  -	      ifconst	mk_96x2_7_on
    170  4391				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    171  4391					      endif		;mk_96x2_7_on
    172  4391
    173  4391				  -	      ifconst	mk_96x2_8_on
    174  4391				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    175  4391					      endif		;mk_96x2_8_on
    176  4391
    177  4391					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  4391					      include	"titlescreen/asm/score_kernel.asm"
      1  4391							; The batari Basic score kernel
      2  4391							; This minikernel is not under the same license as the rest of the 
      3  4391							; titlescreen code. Refer to the bB license before you use this in
      4  4391							; a non-bB program.
      5  4391
      6  4391				   draw_score_display
      7  4391
      8  4391		       a7 95		      lax	score+2
      9  4393		       20 48 74 	      jsr	miniscorepointerset
     10  4396		       84 9b		      sty	scorepointers+5
     11  4398		       86 98		      stx	scorepointers+2
     12  439a		       a7 94		      lax	score+1
     13  439c		       20 48 74 	      jsr	miniscorepointerset
     14  439f		       84 9a		      sty	scorepointers+4
     15  43a1		       86 97		      stx	scorepointers+1
     16  43a3		       a7 93		      lax	score
     17  43a5		       20 48 74 	      jsr	miniscorepointerset
     18  43a8		       84 99		      sty	scorepointers+3
     19  43aa		       86 96		      stx	scorepointers
     20  43ac
     21  43ac		       a5 97		      lda	scorepointers+1
     22  43ae		       85 9c		      sta	temp1
     23  43b0
     24  43b0		       a5 99		      lda	scorepointers+3
     25  43b2		       85 9e		      sta	temp3
     26  43b4
     27  43b4
     28  43b4		       85 2b		      sta	HMCLR
     29  43b6		       ba		      tsx
     30  43b7		       86 f6		      stx	stack1
     31  43b9							;ldx #$10
     32  43b9		       a2 20		      ldx	#$20
     33  43bb		       86 20		      stx	HMP0
     34  43bd
     35  43bd		       a2 00		      ldx	#0
     36  43bf		       85 02		      sta	WSYNC
     37  43c1		       86 1b		      STx	GRP0
     38  43c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  43c5
     40  43c5		       a5 9b		      lda	scorepointers+5
     41  43c7		       95 a0		      sta	temp5,x
     42  43c9		       a9 7b		      lda	#>miniscoretable
     43  43cb		       85 97		      sta	scorepointers+1
     44  43cd		       85 99		      sta	scorepointers+3
     45  43cf		       95 9b		      sta	scorepointers+5,x
     46  43d1		       95 9d		      sta	temp2,x
     47  43d3		       95 9f		      sta	temp4,x
     48  43d5		       95 a1		      sta	temp6,x
     49  43d7
     50  43d7
     51  43d7		       a0 07		      LDY	#7
     52  43d9		       85 10		      STA	RESP0
     53  43db		       85 11		      STA	RESP1
     54  43dd
     55  43dd
     56  43dd		       a9 03		      LDA	#$03
     57  43df		       85 04		      STA	NUSIZ0
     58  43e1		       95 05		      STA	NUSIZ1,x
     59  43e3		       85 25		      STA	VDELP0
     60  43e5		       85 26		      STA	VDELP1
     61  43e7							;LDA #$20
     62  43e7		       a9 30		      LDA	#$30
     63  43e9		       85 21		      STA	HMP1
     64  43eb		       a5 a3		      LDA	scorecolor
     65  43ed		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  43ef				  -	      ifconst	score_kernel_fade
     67  43ef				  -	      and	score_kernel_fade
     68  43ef					      endif
     69  43ef
     70  43ef		       85 06		      STA	COLUP0
     71  43f1		       85 07		      STA	COLUP1
     72  43f3				  -	      ifconst	scorefade
     73  43f3				  -	      STA	stack2	; scorefade
     74  43f3					      endif
     75  43f3		       b1 96		      lda	(scorepointers),y
     76  43f5		       85 1b		      sta	GRP0
     77  43f7		       b1 9e		      lda	(scorepointers+8),y
     78  43f9		       85 02		      sta	WSYNC
      0  43fb					      sleep	2
      1  43fb				   .CYCLES    SET	2
      2  43fb
      3  43fb				  -	      IF	.CYCLES < 2
      4  43fb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  43fb				  -	      ERR
      6  43fb					      ENDIF
      7  43fb
      8  43fb				  -	      IF	.CYCLES & 1
      9  43fb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  43fb				  -	      nop	0
     11  43fb				  -	      ELSE
     12  43fb				  -	      bit	VSYNC
     13  43fb				  -	      ENDIF
     14  43fb				  -.CYCLES    SET	.CYCLES - 3
     15  43fb					      ENDIF
     16  43fb
     17  43fb					      REPEAT	.CYCLES / 2
     18  43fb		       ea		      nop
     19  43fc					      REPEND
     80  43fc		       4c 0b 74 	      jmp	beginscoreloop
     81  43ff
     82  43ff					      if	((<*)>$d4)
     83  4400		       00		      align	256	; kludge that potentially wastes space!  should be fixed!
     84  4400					      endif
     85  4400
     86  4400				   scoreloop2
     87  4400				  -	      ifconst	scorefade
     88  4400				  -	      lda	stack2
     89  4400				  -	      sta	COLUP0
     90  4400				  -	      sta	COLUP1
     91  4400					      else
      0  4400					      sleep	9
      1  4400				   .CYCLES    SET	9
      2  4400
      3  4400				  -	      IF	.CYCLES < 2
      4  4400				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4400				  -	      ERR
      6  4400					      ENDIF
      7  4400
      8  4400					      IF	.CYCLES & 1
      9  4400					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4400		       04 00		      nop	0
     11  4402				  -	      ELSE
     12  4402				  -	      bit	VSYNC
     13  4402					      ENDIF
     14  4402				   .CYCLES    SET	.CYCLES - 3
     15  4402					      ENDIF
     16  4402
     17  4402					      REPEAT	.CYCLES / 2
     18  4402		       ea		      nop
     17  4402					      REPEND
     18  4403		       ea		      nop
     17  4403					      REPEND
     18  4404		       ea		      nop
     19  4405					      REPEND
     93  4405					      endif
     94  4405		       b1 96		      lda	(scorepointers),y	;+5  68  204
     95  4407		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  4409		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     97  440b							; cycle 0
     98  440b				   beginscoreloop
     99  440b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  440d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
    101  440f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  4411		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
    103  4413		       9a		      txs
    104  4414		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
    105  4416
    106  4416				  -	      ifconst	scorefade
    107  4416				  -	      dec	stack2
    108  4416					      else
      0  4416					      sleep	5
      1  4416				   .CYCLES    SET	5
      2  4416
      3  4416				  -	      IF	.CYCLES < 2
      4  4416				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4416				  -	      ERR
      6  4416					      ENDIF
      7  4416
      8  4416					      IF	.CYCLES & 1
      9  4416					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4416		       04 00		      nop	0
     11  4418				  -	      ELSE
     12  4418				  -	      bit	VSYNC
     13  4418					      ENDIF
     14  4418				   .CYCLES    SET	.CYCLES - 3
     15  4418					      ENDIF
     16  4418
     17  4418					      REPEAT	.CYCLES / 2
     18  4418		       ea		      nop
     19  4419					      REPEND
    110  4419					      endif
      0  4419					      sleep	2
      1  4419				   .CYCLES    SET	2
      2  4419
      3  4419				  -	      IF	.CYCLES < 2
      4  4419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4419				  -	      ERR
      6  4419					      ENDIF
      7  4419
      8  4419				  -	      IF	.CYCLES & 1
      9  4419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4419				  -	      nop	0
     11  4419				  -	      ELSE
     12  4419				  -	      bit	VSYNC
     13  4419				  -	      ENDIF
     14  4419				  -.CYCLES    SET	.CYCLES - 3
     15  4419					      ENDIF
     16  4419
     17  4419					      REPEAT	.CYCLES / 2
     18  4419		       ea		      nop
     19  441a					      REPEND
    112  441a
    113  441a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  441c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  441e		       ba		      tsx
    116  441f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  4421		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  4423
    119  4423		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  4425		       88		      dey
    121  4426		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  4428
    123  4428
    124  4428		       a6 f6		      ldx	stack1
    125  442a		       9a		      txs
    126  442b		       a4 9c		      ldy	temp1
    127  442d		       84 97		      sty	scorepointers+1
    128  442f
    129  442f		       a9 00		      LDA	#0
    130  4431		       85 0e		      sta	PF1
    131  4433		       85 1b		      STA	GRP0
    132  4435		       85 1c		      STA	GRP1
    133  4437		       85 25		      STA	VDELP0
    134  4439		       85 26		      STA	VDELP1
    135  443b		       85 04		      STA	NUSIZ0
    136  443d		       85 05		      STA	NUSIZ1
    137  443f
    138  443f		       a4 9e		      ldy	temp3
    139  4441		       84 99		      sty	scorepointers+3
    140  4443
    141  4443		       a4 a0		      ldy	temp5
    142  4445		       84 9b		      sty	scorepointers+5
    143  4447		       60		      rts
    144  4448
    145  4448				   miniscorepointerset
    146  4448		       29 0f		      and	#$0F
    147  444a		       0a		      asl
    148  444b		       0a		      asl
    149  444c		       0a		      asl
    150  444d		       69 82		      adc	#<miniscoretable
    151  444f		       a8		      tay
    152  4450		       8a		      txa
    153  4451		       29 f0		      and	#$F0
    154  4453		       4a		      lsr
    155  4454		       69 82		      adc	#<miniscoretable
    156  4456		       aa		      tax
    157  4457		       60		      rts
    158  4458
------- FILE titlescreen/asm/titlescreen.asm
    179  4458					      endif		;mk_score_on
    180  4458
    181  4458				  -	      ifconst	mk_gameselect_on
    182  4458				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    183  4458					      endif		;mk_gameselect_on
    184  4458
    185  4458				   PFWAIT
    186  4458		       ad 84 02 	      lda	INTIM
    187  445b		       d0 fb		      bne	PFWAIT
    188  445d
    189  445d				   OVERSCAN
    190  445d							;lda #35+128 
    191  445d
    192  445d				  -	      ifnconst	overscan_time
    193  445d				  -	      lda	#35+128
    194  445d					      else
    195  445d		       a9 a1		      lda	#overscan_time+128-3-1
    196  445f					      endif
    197  445f		       8d 96 02 	      sta	TIM64T
    198  4462
    199  4462							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    200  4462				  -	      ifconst	player9height
    201  4462				  -	      ldy	#9
    202  4462				  -	      lda	#0
    203  4462				  -.playerheightfixloop
    204  4462				  -	      sta	player0height,y
    205  4462				  -	      ifconst	_NUSIZ1
    206  4462				  -	      sta	_NUSIZ1,y
    207  4462				  -	      endif
    208  4462				  -	      dey
    209  4462				  -	      bpl	.playerheightfixloop
    210  4462					      endif
    211  4462
    212  4462		       a9 c2		      lda	#%11000010
    213  4464		       85 02		      sta	WSYNC
    214  4466		       85 01		      sta	VBLANK
      0  4468					      RETURN
      1  4468				  -	      ifnconst	bankswitch
      2  4468				  -	      rts
      3  4468					      else
      4  4468		       4c dd ff 	      jmp	BS_return
      5  446b					      endif
    216  446b
    217  446b				  -	      ifconst	mk_48x1_1_on
    218  446b				  -	      include	"titlescreen/48x1_1_image.asm"
    219  446b					      endif
    220  446b					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 3
      0  446b					      include	"titlescreen/48x1_2_image.asm"
      1  446b
      2  446b							;*** The height of the displayed data...
      3  446b		       00 75	   bmp_48x1_2_window =	117
      4  446b
      5  446b							;*** The height of the bitmap data. This can be larger than 
      6  446b							;*** the displayed data height, if you're scrolling or animating 
      7  446b							;*** the data...
      8  446b		       00 ea	   bmp_48x1_2_height =	234
      9  446b
     10  446b				  -	      ifnconst	bmp_48x1_2_PF1
     11  446b				  -bmp_48x1_2_PF1
     12  446b					      endif
     13  446b		       0f		      BYTE.b	%00001111
     14  446c				  -	      ifnconst	bmp_48x1_2_PF2
     15  446c				  -bmp_48x1_2_PF2
     16  446c					      endif
     17  446c		       ff		      BYTE.b	%11111111
     18  446d				  -	      ifnconst	bmp_48x1_2_background
     19  446d				  -bmp_48x1_2_background
     20  446d					      endif
     21  446d		       00		      BYTE.b	$
     22  446e
     23  446e				  -	      ifnconst	bmp_48x1_2_color
     24  446e				  -bmp_48x1_2_color
     25  446e					      endif
     26  446e							; *** this is the bitmap color. If you want to change it in a 
     27  446e							; *** variable instead, dim one in bB called "bmp_48x1_2_color"
     28  446e		       0f		      BYTE.b	$0f
     29  446f
     30  446f
     31  446f					      if	>. != >[.+bmp_48x1_2_height]
     32  4500		       00 00 00 00*	      align	256
     33  4500					      endif
     34  4500
     35  4500				   bmp_48x1_2_00
     36  4500		       00		      BYTE.b	%00000000
     37  4501		       00		      BYTE.b	%00000000
     38  4502		       00		      BYTE.b	%00000000
     39  4503		       00		      BYTE.b	%00000000
     40  4504		       00		      BYTE.b	%00000000
     41  4505		       00		      BYTE.b	%00000000
     42  4506		       00		      BYTE.b	%00000000
     43  4507		       00		      BYTE.b	%00000000
     44  4508		       00		      BYTE.b	%00000000
     45  4509		       00		      BYTE.b	%00000000
     46  450a		       00		      BYTE.b	%00000000
     47  450b		       00		      BYTE.b	%00000000
     48  450c		       00		      BYTE.b	%00000000
     49  450d		       00		      BYTE.b	%00000000
     50  450e		       00		      BYTE.b	%00000000
     51  450f		       06		      BYTE.b	%00000110
     52  4510		       06		      BYTE.b	%00000110
     53  4511		       0f		      BYTE.b	%00001111
     54  4512		       0f		      BYTE.b	%00001111
     55  4513		       0f		      BYTE.b	%00001111
     56  4514		       0f		      BYTE.b	%00001111
     57  4515		       0f		      BYTE.b	%00001111
     58  4516		       0f		      BYTE.b	%00001111
     59  4517		       0f		      BYTE.b	%00001111
     60  4518		       0f		      BYTE.b	%00001111
     61  4519		       0f		      BYTE.b	%00001111
     62  451a		       0f		      BYTE.b	%00001111
     63  451b		       0f		      BYTE.b	%00001111
     64  451c		       0f		      BYTE.b	%00001111
     65  451d		       07		      BYTE.b	%00000111
     66  451e		       03		      BYTE.b	%00000011
     67  451f		       03		      BYTE.b	%00000011
     68  4520		       03		      BYTE.b	%00000011
     69  4521		       06		      BYTE.b	%00000110
     70  4522		       06		      BYTE.b	%00000110
     71  4523		       0f		      BYTE.b	%00001111
     72  4524		       0f		      BYTE.b	%00001111
     73  4525		       0f		      BYTE.b	%00001111
     74  4526		       0f		      BYTE.b	%00001111
     75  4527		       07		      BYTE.b	%00000111
     76  4528		       07		      BYTE.b	%00000111
     77  4529		       01		      BYTE.b	%00000001
     78  452a		       01		      BYTE.b	%00000001
     79  452b		       01		      BYTE.b	%00000001
     80  452c		       00		      BYTE.b	%00000000
     81  452d		       0f		      BYTE.b	%00001111
     82  452e		       0f		      BYTE.b	%00001111
     83  452f		       12		      BYTE.b	%00010010
     84  4530		       65		      BYTE.b	%01100101
     85  4531		       65		      BYTE.b	%01100101
     86  4532		       0b		      BYTE.b	%00001011
     87  4533		       03		      BYTE.b	%00000011
     88  4534		       03		      BYTE.b	%00000011
     89  4535		       03		      BYTE.b	%00000011
     90  4536		       01		      BYTE.b	%00000001
     91  4537		       01		      BYTE.b	%00000001
     92  4538		       01		      BYTE.b	%00000001
     93  4539		       00		      BYTE.b	%00000000
     94  453a		       00		      BYTE.b	%00000000
     95  453b		       00		      BYTE.b	%00000000
     96  453c		       00		      BYTE.b	%00000000
     97  453d		       00		      BYTE.b	%00000000
     98  453e		       00		      BYTE.b	%00000000
     99  453f		       00		      BYTE.b	%00000000
    100  4540		       00		      BYTE.b	%00000000
    101  4541		       01		      BYTE.b	%00000001
    102  4542		       01		      BYTE.b	%00000001
    103  4543		       01		      BYTE.b	%00000001
    104  4544		       01		      BYTE.b	%00000001
    105  4545		       01		      BYTE.b	%00000001
    106  4546		       01		      BYTE.b	%00000001
    107  4547		       01		      BYTE.b	%00000001
    108  4548		       01		      BYTE.b	%00000001
    109  4549		       01		      BYTE.b	%00000001
    110  454a		       00		      BYTE.b	%00000000
    111  454b		       00		      BYTE.b	%00000000
    112  454c		       00		      BYTE.b	%00000000
    113  454d		       00		      BYTE.b	%00000000
    114  454e		       00		      BYTE.b	%00000000
    115  454f		       00		      BYTE.b	%00000000
    116  4550		       00		      BYTE.b	%00000000
    117  4551		       01		      BYTE.b	%00000001
    118  4552		       01		      BYTE.b	%00000001
    119  4553		       01		      BYTE.b	%00000001
    120  4554		       01		      BYTE.b	%00000001
    121  4555		       01		      BYTE.b	%00000001
    122  4556		       01		      BYTE.b	%00000001
    123  4557		       00		      BYTE.b	%00000000
    124  4558		       00		      BYTE.b	%00000000
    125  4559		       00		      BYTE.b	%00000000
    126  455a		       01		      BYTE.b	%00000001
    127  455b		       01		      BYTE.b	%00000001
    128  455c		       01		      BYTE.b	%00000001
    129  455d		       03		      BYTE.b	%00000011
    130  455e		       03		      BYTE.b	%00000011
    131  455f		       03		      BYTE.b	%00000011
    132  4560		       03		      BYTE.b	%00000011
    133  4561		       03		      BYTE.b	%00000011
    134  4562		       07		      BYTE.b	%00000111
    135  4563		       07		      BYTE.b	%00000111
    136  4564		       07		      BYTE.b	%00000111
    137  4565		       07		      BYTE.b	%00000111
    138  4566		       07		      BYTE.b	%00000111
    139  4567		       07		      BYTE.b	%00000111
    140  4568		       07		      BYTE.b	%00000111
    141  4569		       03		      BYTE.b	%00000011
    142  456a		       03		      BYTE.b	%00000011
    143  456b		       01		      BYTE.b	%00000001
    144  456c		       00		      BYTE.b	%00000000
    145  456d		       00		      BYTE.b	%00000000
    146  456e		       00		      BYTE.b	%00000000
    147  456f		       00		      BYTE.b	%00000000
    148  4570		       00		      BYTE.b	%00000000
    149  4571		       00		      BYTE.b	%00000000
    150  4572		       00		      BYTE.b	%00000000
    151  4573		       00		      BYTE.b	%00000000
    152  4574		       00		      BYTE.b	%00000000
    153  4575		       00		      BYTE.b	%00000000
    154  4576		       00		      BYTE.b	%00000000
    155  4577		       00		      BYTE.b	%00000000
    156  4578		       01		      BYTE.b	%00000001
    157  4579		       01		      BYTE.b	%00000001
    158  457a		       00		      BYTE.b	%00000000
    159  457b		       00		      BYTE.b	%00000000
    160  457c		       00		      BYTE.b	%00000000
    161  457d		       00		      BYTE.b	%00000000
    162  457e		       00		      BYTE.b	%00000000
    163  457f		       00		      BYTE.b	%00000000
    164  4580		       00		      BYTE.b	%00000000
    165  4581		       00		      BYTE.b	%00000000
    166  4582		       00		      BYTE.b	%00000000
    167  4583		       00		      BYTE.b	%00000000
    168  4584		       06		      BYTE.b	%00000110
    169  4585		       06		      BYTE.b	%00000110
    170  4586		       0f		      BYTE.b	%00001111
    171  4587		       0f		      BYTE.b	%00001111
    172  4588		       0f		      BYTE.b	%00001111
    173  4589		       0f		      BYTE.b	%00001111
    174  458a		       0f		      BYTE.b	%00001111
    175  458b		       0f		      BYTE.b	%00001111
    176  458c		       0f		      BYTE.b	%00001111
    177  458d		       0f		      BYTE.b	%00001111
    178  458e		       0f		      BYTE.b	%00001111
    179  458f		       0f		      BYTE.b	%00001111
    180  4590		       0f		      BYTE.b	%00001111
    181  4591		       0f		      BYTE.b	%00001111
    182  4592		       07		      BYTE.b	%00000111
    183  4593		       03		      BYTE.b	%00000011
    184  4594		       03		      BYTE.b	%00000011
    185  4595		       03		      BYTE.b	%00000011
    186  4596		       06		      BYTE.b	%00000110
    187  4597		       06		      BYTE.b	%00000110
    188  4598		       0f		      BYTE.b	%00001111
    189  4599		       0f		      BYTE.b	%00001111
    190  459a		       0f		      BYTE.b	%00001111
    191  459b		       0f		      BYTE.b	%00001111
    192  459c		       07		      BYTE.b	%00000111
    193  459d		       07		      BYTE.b	%00000111
    194  459e		       01		      BYTE.b	%00000001
    195  459f		       01		      BYTE.b	%00000001
    196  45a0		       01		      BYTE.b	%00000001
    197  45a1		       01		      BYTE.b	%00000001
    198  45a2		       03		      BYTE.b	%00000011
    199  45a3		       03		      BYTE.b	%00000011
    200  45a4		       03		      BYTE.b	%00000011
    201  45a5		       03		      BYTE.b	%00000011
    202  45a6		       03		      BYTE.b	%00000011
    203  45a7		       03		      BYTE.b	%00000011
    204  45a8		       03		      BYTE.b	%00000011
    205  45a9		       03		      BYTE.b	%00000011
    206  45aa		       03		      BYTE.b	%00000011
    207  45ab		       00		      BYTE.b	%00000000
    208  45ac		       00		      BYTE.b	%00000000
    209  45ad		       02		      BYTE.b	%00000010
    210  45ae		       04		      BYTE.b	%00000100
    211  45af		       04		      BYTE.b	%00000100
    212  45b0		       08		      BYTE.b	%00001000
    213  45b1		       31		      BYTE.b	%00110001
    214  45b2		       31		      BYTE.b	%00110001
    215  45b3		       00		      BYTE.b	%00000000
    216  45b4		       00		      BYTE.b	%00000000
    217  45b5		       00		      BYTE.b	%00000000
    218  45b6		       01		      BYTE.b	%00000001
    219  45b7		       01		      BYTE.b	%00000001
    220  45b8		       01		      BYTE.b	%00000001
    221  45b9		       01		      BYTE.b	%00000001
    222  45ba		       01		      BYTE.b	%00000001
    223  45bb		       01		      BYTE.b	%00000001
    224  45bc		       01		      BYTE.b	%00000001
    225  45bd		       01		      BYTE.b	%00000001
    226  45be		       01		      BYTE.b	%00000001
    227  45bf		       00		      BYTE.b	%00000000
    228  45c0		       00		      BYTE.b	%00000000
    229  45c1		       00		      BYTE.b	%00000000
    230  45c2		       00		      BYTE.b	%00000000
    231  45c3		       00		      BYTE.b	%00000000
    232  45c4		       00		      BYTE.b	%00000000
    233  45c5		       00		      BYTE.b	%00000000
    234  45c6		       01		      BYTE.b	%00000001
    235  45c7		       01		      BYTE.b	%00000001
    236  45c8		       01		      BYTE.b	%00000001
    237  45c9		       01		      BYTE.b	%00000001
    238  45ca		       01		      BYTE.b	%00000001
    239  45cb		       01		      BYTE.b	%00000001
    240  45cc		       00		      BYTE.b	%00000000
    241  45cd		       00		      BYTE.b	%00000000
    242  45ce		       00		      BYTE.b	%00000000
    243  45cf		       01		      BYTE.b	%00000001
    244  45d0		       01		      BYTE.b	%00000001
    245  45d1		       01		      BYTE.b	%00000001
    246  45d2		       03		      BYTE.b	%00000011
    247  45d3		       03		      BYTE.b	%00000011
    248  45d4		       03		      BYTE.b	%00000011
    249  45d5		       03		      BYTE.b	%00000011
    250  45d6		       03		      BYTE.b	%00000011
    251  45d7		       07		      BYTE.b	%00000111
    252  45d8		       07		      BYTE.b	%00000111
    253  45d9		       07		      BYTE.b	%00000111
    254  45da		       07		      BYTE.b	%00000111
    255  45db		       07		      BYTE.b	%00000111
    256  45dc		       07		      BYTE.b	%00000111
    257  45dd		       07		      BYTE.b	%00000111
    258  45de		       03		      BYTE.b	%00000011
    259  45df		       03		      BYTE.b	%00000011
    260  45e0		       01		      BYTE.b	%00000001
    261  45e1		       00		      BYTE.b	%00000000
    262  45e2		       00		      BYTE.b	%00000000
    263  45e3		       00		      BYTE.b	%00000000
    264  45e4		       00		      BYTE.b	%00000000
    265  45e5		       00		      BYTE.b	%00000000
    266  45e6		       00		      BYTE.b	%00000000
    267  45e7		       00		      BYTE.b	%00000000
    268  45e8		       00		      BYTE.b	%00000000
    269  45e9		       00		      BYTE.b	%00000000
    270  45ea		       00		      BYTE.b	%00000000
    271  45eb
    272  45eb					      if	>. != >[.+(bmp_48x1_2_height)]
    273  4600		       00 00 00 00*	      align	256
    274  4600					      endif
    275  4600
    276  4600				   bmp_48x1_2_01
    277  4600		       00		      BYTE.b	%00000000
    278  4601		       00		      BYTE.b	%00000000
    279  4602		       00		      BYTE.b	%00000000
    280  4603		       00		      BYTE.b	%00000000
    281  4604		       00		      BYTE.b	%00000000
    282  4605		       00		      BYTE.b	%00000000
    283  4606		       00		      BYTE.b	%00000000
    284  4607		       00		      BYTE.b	%00000000
    285  4608		       00		      BYTE.b	%00000000
    286  4609		       00		      BYTE.b	%00000000
    287  460a		       00		      BYTE.b	%00000000
    288  460b		       00		      BYTE.b	%00000000
    289  460c		       1f		      BYTE.b	%00011111
    290  460d		       1f		      BYTE.b	%00011111
    291  460e		       7f		      BYTE.b	%01111111
    292  460f		       3e		      BYTE.b	%00111110
    293  4610		       3e		      BYTE.b	%00111110
    294  4611		       9c		      BYTE.b	%10011100
    295  4612		       c1		      BYTE.b	%11000001
    296  4613		       c1		      BYTE.b	%11000001
    297  4614		       ff		      BYTE.b	%11111111
    298  4615		       ff		      BYTE.b	%11111111
    299  4616		       ff		      BYTE.b	%11111111
    300  4617		       ff		      BYTE.b	%11111111
    301  4618		       ff		      BYTE.b	%11111111
    302  4619		       ff		      BYTE.b	%11111111
    303  461a		       3f		      BYTE.b	%00111111
    304  461b		       3f		      BYTE.b	%00111111
    305  461c		       3f		      BYTE.b	%00111111
    306  461d		       ff		      BYTE.b	%11111111
    307  461e		       ff		      BYTE.b	%11111111
    308  461f		       ff		      BYTE.b	%11111111
    309  4620		       ff		      BYTE.b	%11111111
    310  4621		       7f		      BYTE.b	%01111111
    311  4622		       7f		      BYTE.b	%01111111
    312  4623		       0c		      BYTE.b	%00001100
    313  4624		       b7		      BYTE.b	%10110111
    314  4625		       b7		      BYTE.b	%10110111
    315  4626		       23		      BYTE.b	%00100011
    316  4627		       41		      BYTE.b	%01000001
    317  4628		       41		      BYTE.b	%01000001
    318  4629		       c1		      BYTE.b	%11000001
    319  462a		       81		      BYTE.b	%10000001
    320  462b		       81		      BYTE.b	%10000001
    321  462c		       69		      BYTE.b	%01101001
    322  462d		       1d		      BYTE.b	%00011101
    323  462e		       1d		      BYTE.b	%00011101
    324  462f		       fd		      BYTE.b	%11111101
    325  4630		       fd		      BYTE.b	%11111101
    326  4631		       fd		      BYTE.b	%11111101
    327  4632		       f9		      BYTE.b	%11111001
    328  4633		       fb		      BYTE.b	%11111011
    329  4634		       fb		      BYTE.b	%11111011
    330  4635		       fb		      BYTE.b	%11111011
    331  4636		       fb		      BYTE.b	%11111011
    332  4637		       fb		      BYTE.b	%11111011
    333  4638		       fb		      BYTE.b	%11111011
    334  4639		       ff		      BYTE.b	%11111111
    335  463a		       ff		      BYTE.b	%11111111
    336  463b		       f7		      BYTE.b	%11110111
    337  463c		       77		      BYTE.b	%01110111
    338  463d		       77		      BYTE.b	%01110111
    339  463e		       2f		      BYTE.b	%00101111
    340  463f		       cf		      BYTE.b	%11001111
    341  4640		       cf		      BYTE.b	%11001111
    342  4641		       ff		      BYTE.b	%11111111
    343  4642		       fb		      BYTE.b	%11111011
    344  4643		       fb		      BYTE.b	%11111011
    345  4644		       fb		      BYTE.b	%11111011
    346  4645		       fb		      BYTE.b	%11111011
    347  4646		       fb		      BYTE.b	%11111011
    348  4647		       fb		      BYTE.b	%11111011
    349  4648		       f3		      BYTE.b	%11110011
    350  4649		       f3		      BYTE.b	%11110011
    351  464a		       77		      BYTE.b	%01110111
    352  464b		       67		      BYTE.b	%01100111
    353  464c		       67		      BYTE.b	%01100111
    354  464d		       48		      BYTE.b	%01001000
    355  464e		       9e		      BYTE.b	%10011110
    356  464f		       9e		      BYTE.b	%10011110
    357  4650		       ff		      BYTE.b	%11111111
    358  4651		       ff		      BYTE.b	%11111111
    359  4652		       ff		      BYTE.b	%11111111
    360  4653		       ff		      BYTE.b	%11111111
    361  4654		       ff		      BYTE.b	%11111111
    362  4655		       ff		      BYTE.b	%11111111
    363  4656		       ff		      BYTE.b	%11111111
    364  4657		       ff		      BYTE.b	%11111111
    365  4658		       ff		      BYTE.b	%11111111
    366  4659		       ff		      BYTE.b	%11111111
    367  465a		       ff		      BYTE.b	%11111111
    368  465b		       ff		      BYTE.b	%11111111
    369  465c		       ff		      BYTE.b	%11111111
    370  465d		       fe		      BYTE.b	%11111110
    371  465e		       fe		      BYTE.b	%11111110
    372  465f		       fc		      BYTE.b	%11111100
    373  4660		       f9		      BYTE.b	%11111001
    374  4661		       f9		      BYTE.b	%11111001
    375  4662		       f3		      BYTE.b	%11110011
    376  4663		       e7		      BYTE.b	%11100111
    377  4664		       e7		      BYTE.b	%11100111
    378  4665		       cf		      BYTE.b	%11001111
    379  4666		       ff		      BYTE.b	%11111111
    380  4667		       ff		      BYTE.b	%11111111
    381  4668		       ff		      BYTE.b	%11111111
    382  4669		       ff		      BYTE.b	%11111111
    383  466a		       ff		      BYTE.b	%11111111
    384  466b		       fc		      BYTE.b	%11111100
    385  466c		       f0		      BYTE.b	%11110000
    386  466d		       f0		      BYTE.b	%11110000
    387  466e		       00		      BYTE.b	%00000000
    388  466f		       00		      BYTE.b	%00000000
    389  4670		       00		      BYTE.b	%00000000
    390  4671		       00		      BYTE.b	%00000000
    391  4672		       00		      BYTE.b	%00000000
    392  4673		       00		      BYTE.b	%00000000
    393  4674		       00		      BYTE.b	%00000000
    394  4675		       00		      BYTE.b	%00000000
    395  4676		       00		      BYTE.b	%00000000
    396  4677		       40		      BYTE.b	%01000000
    397  4678		       20		      BYTE.b	%00100000
    398  4679		       20		      BYTE.b	%00100000
    399  467a		       a0		      BYTE.b	%10100000
    400  467b		       a0		      BYTE.b	%10100000
    401  467c		       a0		      BYTE.b	%10100000
    402  467d		       e1		      BYTE.b	%11100001
    403  467e		       63		      BYTE.b	%01100011
    404  467f		       63		      BYTE.b	%01100011
    405  4680		       62		      BYTE.b	%01100010
    406  4681		       20		      BYTE.b	%00100000
    407  4682		       20		      BYTE.b	%00100000
    408  4683		       30		      BYTE.b	%00110000
    409  4684		       3e		      BYTE.b	%00111110
    410  4685		       3e		      BYTE.b	%00111110
    411  4686		       9c		      BYTE.b	%10011100
    412  4687		       c1		      BYTE.b	%11000001
    413  4688		       c1		      BYTE.b	%11000001
    414  4689		       ff		      BYTE.b	%11111111
    415  468a		       ff		      BYTE.b	%11111111
    416  468b		       ff		      BYTE.b	%11111111
    417  468c		       ff		      BYTE.b	%11111111
    418  468d		       ff		      BYTE.b	%11111111
    419  468e		       ff		      BYTE.b	%11111111
    420  468f		       3f		      BYTE.b	%00111111
    421  4690		       3f		      BYTE.b	%00111111
    422  4691		       3f		      BYTE.b	%00111111
    423  4692		       ff		      BYTE.b	%11111111
    424  4693		       ff		      BYTE.b	%11111111
    425  4694		       ff		      BYTE.b	%11111111
    426  4695		       ff		      BYTE.b	%11111111
    427  4696		       7f		      BYTE.b	%01111111
    428  4697		       7f		      BYTE.b	%01111111
    429  4698		       0c		      BYTE.b	%00001100
    430  4699		       b7		      BYTE.b	%10110111
    431  469a		       b7		      BYTE.b	%10110111
    432  469b		       23		      BYTE.b	%00100011
    433  469c		       41		      BYTE.b	%01000001
    434  469d		       41		      BYTE.b	%01000001
    435  469e		       c1		      BYTE.b	%11000001
    436  469f		       c1		      BYTE.b	%11000001
    437  46a0		       c1		      BYTE.b	%11000001
    438  46a1		       c1		      BYTE.b	%11000001
    439  46a2		       c1		      BYTE.b	%11000001
    440  46a3		       c1		      BYTE.b	%11000001
    441  46a4		       c5		      BYTE.b	%11000101
    442  46a5		       ed		      BYTE.b	%11101101
    443  46a6		       ed		      BYTE.b	%11101101
    444  46a7		       f9		      BYTE.b	%11111001
    445  46a8		       e3		      BYTE.b	%11100011
    446  46a9		       e3		      BYTE.b	%11100011
    447  46aa		       cb		      BYTE.b	%11001011
    448  46ab		       0b		      BYTE.b	%00001011
    449  46ac		       0b		      BYTE.b	%00001011
    450  46ad		       7b		      BYTE.b	%01111011
    451  46ae		       ff		      BYTE.b	%11111111
    452  46af		       ff		      BYTE.b	%11111111
    453  46b0		       f7		      BYTE.b	%11110111
    454  46b1		       77		      BYTE.b	%01110111
    455  46b2		       77		      BYTE.b	%01110111
    456  46b3		       2f		      BYTE.b	%00101111
    457  46b4		       cf		      BYTE.b	%11001111
    458  46b5		       cf		      BYTE.b	%11001111
    459  46b6		       ff		      BYTE.b	%11111111
    460  46b7		       fb		      BYTE.b	%11111011
    461  46b8		       fb		      BYTE.b	%11111011
    462  46b9		       fb		      BYTE.b	%11111011
    463  46ba		       fb		      BYTE.b	%11111011
    464  46bb		       fb		      BYTE.b	%11111011
    465  46bc		       fb		      BYTE.b	%11111011
    466  46bd		       f3		      BYTE.b	%11110011
    467  46be		       f3		      BYTE.b	%11110011
    468  46bf		       77		      BYTE.b	%01110111
    469  46c0		       67		      BYTE.b	%01100111
    470  46c1		       67		      BYTE.b	%01100111
    471  46c2		       48		      BYTE.b	%01001000
    472  46c3		       9e		      BYTE.b	%10011110
    473  46c4		       9e		      BYTE.b	%10011110
    474  46c5		       ff		      BYTE.b	%11111111
    475  46c6		       ff		      BYTE.b	%11111111
    476  46c7		       ff		      BYTE.b	%11111111
    477  46c8		       ff		      BYTE.b	%11111111
    478  46c9		       ff		      BYTE.b	%11111111
    479  46ca		       ff		      BYTE.b	%11111111
    480  46cb		       ff		      BYTE.b	%11111111
    481  46cc		       ff		      BYTE.b	%11111111
    482  46cd		       ff		      BYTE.b	%11111111
    483  46ce		       ff		      BYTE.b	%11111111
    484  46cf		       ff		      BYTE.b	%11111111
    485  46d0		       ff		      BYTE.b	%11111111
    486  46d1		       ff		      BYTE.b	%11111111
    487  46d2		       fe		      BYTE.b	%11111110
    488  46d3		       fe		      BYTE.b	%11111110
    489  46d4		       fc		      BYTE.b	%11111100
    490  46d5		       f9		      BYTE.b	%11111001
    491  46d6		       f9		      BYTE.b	%11111001
    492  46d7		       f3		      BYTE.b	%11110011
    493  46d8		       e7		      BYTE.b	%11100111
    494  46d9		       e7		      BYTE.b	%11100111
    495  46da		       cf		      BYTE.b	%11001111
    496  46db		       ff		      BYTE.b	%11111111
    497  46dc		       ff		      BYTE.b	%11111111
    498  46dd		       ff		      BYTE.b	%11111111
    499  46de		       ff		      BYTE.b	%11111111
    500  46df		       ff		      BYTE.b	%11111111
    501  46e0		       fc		      BYTE.b	%11111100
    502  46e1		       f0		      BYTE.b	%11110000
    503  46e2		       f0		      BYTE.b	%11110000
    504  46e3		       00		      BYTE.b	%00000000
    505  46e4		       00		      BYTE.b	%00000000
    506  46e5		       00		      BYTE.b	%00000000
    507  46e6		       00		      BYTE.b	%00000000
    508  46e7		       00		      BYTE.b	%00000000
    509  46e8		       00		      BYTE.b	%00000000
    510  46e9		       00		      BYTE.b	%00000000
    511  46ea		       00		      BYTE.b	%00000000
    512  46eb
    513  46eb					      if	>. != >[.+(bmp_48x1_2_height)]
    514  4700		       00 00 00 00*	      align	256
    515  4700					      endif
    516  4700
    517  4700				   bmp_48x1_2_02
    518  4700		       5f		      BYTE.b	%01011111
    519  4701		       5f		      BYTE.b	%01011111
    520  4702		       5f		      BYTE.b	%01011111
    521  4703		       5f		      BYTE.b	%01011111
    522  4704		       5f		      BYTE.b	%01011111
    523  4705		       5f		      BYTE.b	%01011111
    524  4706		       5f		      BYTE.b	%01011111
    525  4707		       5f		      BYTE.b	%01011111
    526  4708		       5f		      BYTE.b	%01011111
    527  4709		       5f		      BYTE.b	%01011111
    528  470a		       5f		      BYTE.b	%01011111
    529  470b		       5f		      BYTE.b	%01011111
    530  470c		       c7		      BYTE.b	%11000111
    531  470d		       c7		      BYTE.b	%11000111
    532  470e		       9b		      BYTE.b	%10011011
    533  470f		       3c		      BYTE.b	%00111100
    534  4710		       3c		      BYTE.b	%00111100
    535  4711		       ff		      BYTE.b	%11111111
    536  4712		       ff		      BYTE.b	%11111111
    537  4713		       ff		      BYTE.b	%11111111
    538  4714		       fe		      BYTE.b	%11111110
    539  4715		       fc		      BYTE.b	%11111100
    540  4716		       fc		      BYTE.b	%11111100
    541  4717		       fc		      BYTE.b	%11111100
    542  4718		       fd		      BYTE.b	%11111101
    543  4719		       fd		      BYTE.b	%11111101
    544  471a		       9d		      BYTE.b	%10011101
    545  471b		       9d		      BYTE.b	%10011101
    546  471c		       9d		      BYTE.b	%10011101
    547  471d		       fd		      BYTE.b	%11111101
    548  471e		       f9		      BYTE.b	%11111001
    549  471f		       f9		      BYTE.b	%11111001
    550  4720		       f3		      BYTE.b	%11110011
    551  4721		       e7		      BYTE.b	%11100111
    552  4722		       e7		      BYTE.b	%11100111
    553  4723		       0f		      BYTE.b	%00001111
    554  4724		       ff		      BYTE.b	%11111111
    555  4725		       ff		      BYTE.b	%11111111
    556  4726		       ff		      BYTE.b	%11111111
    557  4727		       ff		      BYTE.b	%11111111
    558  4728		       ff		      BYTE.b	%11111111
    559  4729		       3f		      BYTE.b	%00111111
    560  472a		       88		      BYTE.b	%10001000
    561  472b		       88		      BYTE.b	%10001000
    562  472c		       e3		      BYTE.b	%11100011
    563  472d		       ff		      BYTE.b	%11111111
    564  472e		       ff		      BYTE.b	%11111111
    565  472f		       ff		      BYTE.b	%11111111
    566  4730		       ff		      BYTE.b	%11111111
    567  4731		       ff		      BYTE.b	%11111111
    568  4732		       ff		      BYTE.b	%11111111
    569  4733		       ff		      BYTE.b	%11111111
    570  4734		       ff		      BYTE.b	%11111111
    571  4735		       ff		      BYTE.b	%11111111
    572  4736		       ff		      BYTE.b	%11111111
    573  4737		       ff		      BYTE.b	%11111111
    574  4738		       ff		      BYTE.b	%11111111
    575  4739		       ff		      BYTE.b	%11111111
    576  473a		       ff		      BYTE.b	%11111111
    577  473b		       ff		      BYTE.b	%11111111
    578  473c		       ff		      BYTE.b	%11111111
    579  473d		       ff		      BYTE.b	%11111111
    580  473e		       ff		      BYTE.b	%11111111
    581  473f		       ff		      BYTE.b	%11111111
    582  4740		       ff		      BYTE.b	%11111111
    583  4741		       ff		      BYTE.b	%11111111
    584  4742		       ff		      BYTE.b	%11111111
    585  4743		       ff		      BYTE.b	%11111111
    586  4744		       ff		      BYTE.b	%11111111
    587  4745		       fe		      BYTE.b	%11111110
    588  4746		       fe		      BYTE.b	%11111110
    589  4747		       fe		      BYTE.b	%11111110
    590  4748		       fe		      BYTE.b	%11111110
    591  4749		       fe		      BYTE.b	%11111110
    592  474a		       fe		      BYTE.b	%11111110
    593  474b		       ff		      BYTE.b	%11111111
    594  474c		       ff		      BYTE.b	%11111111
    595  474d		       ff		      BYTE.b	%11111111
    596  474e		       61		      BYTE.b	%01100001
    597  474f		       61		      BYTE.b	%01100001
    598  4750		       9e		      BYTE.b	%10011110
    599  4751		       be		      BYTE.b	%10111110
    600  4752		       be		      BYTE.b	%10111110
    601  4753		       be		      BYTE.b	%10111110
    602  4754		       bd		      BYTE.b	%10111101
    603  4755		       bd		      BYTE.b	%10111101
    604  4756		       9d		      BYTE.b	%10011101
    605  4757		       de		      BYTE.b	%11011110
    606  4758		       de		      BYTE.b	%11011110
    607  4759		       de		      BYTE.b	%11011110
    608  475a		       ce		      BYTE.b	%11001110
    609  475b		       ce		      BYTE.b	%11001110
    610  475c		       07		      BYTE.b	%00000111
    611  475d		       73		      BYTE.b	%01110011
    612  475e		       73		      BYTE.b	%01110011
    613  475f		       fb		      BYTE.b	%11111011
    614  4760		       f8		      BYTE.b	%11111000
    615  4761		       f8		      BYTE.b	%11111000
    616  4762		       f0		      BYTE.b	%11110000
    617  4763		       f0		      BYTE.b	%11110000
    618  4764		       f0		      BYTE.b	%11110000
    619  4765		       e0		      BYTE.b	%11100000
    620  4766		       c0		      BYTE.b	%11000000
    621  4767		       c0		      BYTE.b	%11000000
    622  4768		       80		      BYTE.b	%10000000
    623  4769		       00		      BYTE.b	%00000000
    624  476a		       00		      BYTE.b	%00000000
    625  476b		       00		      BYTE.b	%00000000
    626  476c		       00		      BYTE.b	%00000000
    627  476d		       00		      BYTE.b	%00000000
    628  476e		       00		      BYTE.b	%00000000
    629  476f		       00		      BYTE.b	%00000000
    630  4770		       00		      BYTE.b	%00000000
    631  4771		       00		      BYTE.b	%00000000
    632  4772		       00		      BYTE.b	%00000000
    633  4773		       00		      BYTE.b	%00000000
    634  4774		       00		      BYTE.b	%00000000
    635  4775		       5f		      BYTE.b	%01011111
    636  4776		       5f		      BYTE.b	%01011111
    637  4777		       5f		      BYTE.b	%01011111
    638  4778		       5f		      BYTE.b	%01011111
    639  4779		       5f		      BYTE.b	%01011111
    640  477a		       1f		      BYTE.b	%00011111
    641  477b		       07		      BYTE.b	%00000111
    642  477c		       07		      BYTE.b	%00000111
    643  477d		       f1		      BYTE.b	%11110001
    644  477e		       0e		      BYTE.b	%00001110
    645  477f		       0e		      BYTE.b	%00001110
    646  4780		       03		      BYTE.b	%00000011
    647  4781		       01		      BYTE.b	%00000001
    648  4782		       01		      BYTE.b	%00000001
    649  4783		       38		      BYTE.b	%00111000
    650  4784		       3c		      BYTE.b	%00111100
    651  4785		       3c		      BYTE.b	%00111100
    652  4786		       ff		      BYTE.b	%11111111
    653  4787		       ff		      BYTE.b	%11111111
    654  4788		       ff		      BYTE.b	%11111111
    655  4789		       fe		      BYTE.b	%11111110
    656  478a		       fc		      BYTE.b	%11111100
    657  478b		       fc		      BYTE.b	%11111100
    658  478c		       fc		      BYTE.b	%11111100
    659  478d		       fd		      BYTE.b	%11111101
    660  478e		       fd		      BYTE.b	%11111101
    661  478f		       9d		      BYTE.b	%10011101
    662  4790		       9d		      BYTE.b	%10011101
    663  4791		       9d		      BYTE.b	%10011101
    664  4792		       fd		      BYTE.b	%11111101
    665  4793		       f9		      BYTE.b	%11111001
    666  4794		       f9		      BYTE.b	%11111001
    667  4795		       f3		      BYTE.b	%11110011
    668  4796		       e7		      BYTE.b	%11100111
    669  4797		       e7		      BYTE.b	%11100111
    670  4798		       0f		      BYTE.b	%00001111
    671  4799		       ff		      BYTE.b	%11111111
    672  479a		       ff		      BYTE.b	%11111111
    673  479b		       ff		      BYTE.b	%11111111
    674  479c		       ff		      BYTE.b	%11111111
    675  479d		       ff		      BYTE.b	%11111111
    676  479e		       3f		      BYTE.b	%00111111
    677  479f		       88		      BYTE.b	%10001000
    678  47a0		       88		      BYTE.b	%10001000
    679  47a1		       e3		      BYTE.b	%11100011
    680  47a2		       ff		      BYTE.b	%11111111
    681  47a3		       ff		      BYTE.b	%11111111
    682  47a4		       ff		      BYTE.b	%11111111
    683  47a5		       ff		      BYTE.b	%11111111
    684  47a6		       ff		      BYTE.b	%11111111
    685  47a7		       ff		      BYTE.b	%11111111
    686  47a8		       ff		      BYTE.b	%11111111
    687  47a9		       ff		      BYTE.b	%11111111
    688  47aa		       ff		      BYTE.b	%11111111
    689  47ab		       ff		      BYTE.b	%11111111
    690  47ac		       ff		      BYTE.b	%11111111
    691  47ad		       ff		      BYTE.b	%11111111
    692  47ae		       ff		      BYTE.b	%11111111
    693  47af		       ff		      BYTE.b	%11111111
    694  47b0		       ff		      BYTE.b	%11111111
    695  47b1		       ff		      BYTE.b	%11111111
    696  47b2		       ff		      BYTE.b	%11111111
    697  47b3		       ff		      BYTE.b	%11111111
    698  47b4		       ff		      BYTE.b	%11111111
    699  47b5		       ff		      BYTE.b	%11111111
    700  47b6		       ff		      BYTE.b	%11111111
    701  47b7		       ff		      BYTE.b	%11111111
    702  47b8		       ff		      BYTE.b	%11111111
    703  47b9		       ff		      BYTE.b	%11111111
    704  47ba		       fe		      BYTE.b	%11111110
    705  47bb		       fe		      BYTE.b	%11111110
    706  47bc		       fe		      BYTE.b	%11111110
    707  47bd		       fe		      BYTE.b	%11111110
    708  47be		       fe		      BYTE.b	%11111110
    709  47bf		       fe		      BYTE.b	%11111110
    710  47c0		       ff		      BYTE.b	%11111111
    711  47c1		       ff		      BYTE.b	%11111111
    712  47c2		       ff		      BYTE.b	%11111111
    713  47c3		       61		      BYTE.b	%01100001
    714  47c4		       61		      BYTE.b	%01100001
    715  47c5		       9e		      BYTE.b	%10011110
    716  47c6		       be		      BYTE.b	%10111110
    717  47c7		       be		      BYTE.b	%10111110
    718  47c8		       be		      BYTE.b	%10111110
    719  47c9		       bd		      BYTE.b	%10111101
    720  47ca		       bd		      BYTE.b	%10111101
    721  47cb		       9d		      BYTE.b	%10011101
    722  47cc		       de		      BYTE.b	%11011110
    723  47cd		       de		      BYTE.b	%11011110
    724  47ce		       de		      BYTE.b	%11011110
    725  47cf		       ce		      BYTE.b	%11001110
    726  47d0		       ce		      BYTE.b	%11001110
    727  47d1		       07		      BYTE.b	%00000111
    728  47d2		       73		      BYTE.b	%01110011
    729  47d3		       73		      BYTE.b	%01110011
    730  47d4		       fb		      BYTE.b	%11111011
    731  47d5		       f8		      BYTE.b	%11111000
    732  47d6		       f8		      BYTE.b	%11111000
    733  47d7		       f0		      BYTE.b	%11110000
    734  47d8		       f0		      BYTE.b	%11110000
    735  47d9		       f0		      BYTE.b	%11110000
    736  47da		       e0		      BYTE.b	%11100000
    737  47db		       c0		      BYTE.b	%11000000
    738  47dc		       c0		      BYTE.b	%11000000
    739  47dd		       80		      BYTE.b	%10000000
    740  47de		       00		      BYTE.b	%00000000
    741  47df		       00		      BYTE.b	%00000000
    742  47e0		       00		      BYTE.b	%00000000
    743  47e1		       00		      BYTE.b	%00000000
    744  47e2		       00		      BYTE.b	%00000000
    745  47e3		       00		      BYTE.b	%00000000
    746  47e4		       00		      BYTE.b	%00000000
    747  47e5		       00		      BYTE.b	%00000000
    748  47e6		       00		      BYTE.b	%00000000
    749  47e7		       00		      BYTE.b	%00000000
    750  47e8		       00		      BYTE.b	%00000000
    751  47e9		       00		      BYTE.b	%00000000
    752  47ea		       00		      BYTE.b	%00000000
    753  47eb
    754  47eb					      if	>. != >[.+(bmp_48x1_2_height)]
    755  4800		       00 00 00 00*	      align	256
    756  4800					      endif
    757  4800
    758  4800				   bmp_48x1_2_03
    759  4800		       f7		      BYTE.b	%11110111
    760  4801		       f7		      BYTE.b	%11110111
    761  4802		       f7		      BYTE.b	%11110111
    762  4803		       f7		      BYTE.b	%11110111
    763  4804		       f7		      BYTE.b	%11110111
    764  4805		       f7		      BYTE.b	%11110111
    765  4806		       f7		      BYTE.b	%11110111
    766  4807		       f7		      BYTE.b	%11110111
    767  4808		       f7		      BYTE.b	%11110111
    768  4809		       f7		      BYTE.b	%11110111
    769  480a		       f7		      BYTE.b	%11110111
    770  480b		       f7		      BYTE.b	%11110111
    771  480c		       f7		      BYTE.b	%11110111
    772  480d		       f7		      BYTE.b	%11110111
    773  480e		       f7		      BYTE.b	%11110111
    774  480f		       f7		      BYTE.b	%11110111
    775  4810		       f7		      BYTE.b	%11110111
    776  4811		       77		      BYTE.b	%01110111
    777  4812		       b7		      BYTE.b	%10110111
    778  4813		       b7		      BYTE.b	%10110111
    779  4814		       b7		      BYTE.b	%10110111
    780  4815		       c7		      BYTE.b	%11000111
    781  4816		       c7		      BYTE.b	%11000111
    782  4817		       c3		      BYTE.b	%11000011
    783  4818		       e9		      BYTE.b	%11101001
    784  4819		       e9		      BYTE.b	%11101001
    785  481a		       e4		      BYTE.b	%11100100
    786  481b		       f2		      BYTE.b	%11110010
    787  481c		       f2		      BYTE.b	%11110010
    788  481d		       f9		      BYTE.b	%11111001
    789  481e		       f9		      BYTE.b	%11111001
    790  481f		       f9		      BYTE.b	%11111001
    791  4820		       fc		      BYTE.b	%11111100
    792  4821		       fe		      BYTE.b	%11111110
    793  4822		       fe		      BYTE.b	%11111110
    794  4823		       ff		      BYTE.b	%11111111
    795  4824		       fc		      BYTE.b	%11111100
    796  4825		       fc		      BYTE.b	%11111100
    797  4826		       f3		      BYTE.b	%11110011
    798  4827		       ef		      BYTE.b	%11101111
    799  4828		       ef		      BYTE.b	%11101111
    800  4829		       2f		      BYTE.b	%00101111
    801  482a		       6f		      BYTE.b	%01101111
    802  482b		       6f		      BYTE.b	%01101111
    803  482c		       de		      BYTE.b	%11011110
    804  482d		       de		      BYTE.b	%11011110
    805  482e		       de		      BYTE.b	%11011110
    806  482f		       dc		      BYTE.b	%11011100
    807  4830		       c3		      BYTE.b	%11000011
    808  4831		       c3		      BYTE.b	%11000011
    809  4832		       df		      BYTE.b	%11011111
    810  4833		       bf		      BYTE.b	%10111111
    811  4834		       bf		      BYTE.b	%10111111
    812  4835		       bf		      BYTE.b	%10111111
    813  4836		       bf		      BYTE.b	%10111111
    814  4837		       bf		      BYTE.b	%10111111
    815  4838		       bf		      BYTE.b	%10111111
    816  4839		       bf		      BYTE.b	%10111111
    817  483a		       bf		      BYTE.b	%10111111
    818  483b		       bf		      BYTE.b	%10111111
    819  483c		       bf		      BYTE.b	%10111111
    820  483d		       bf		      BYTE.b	%10111111
    821  483e		       bf		      BYTE.b	%10111111
    822  483f		       9f		      BYTE.b	%10011111
    823  4840		       9f		      BYTE.b	%10011111
    824  4841		       df		      BYTE.b	%11011111
    825  4842		       df		      BYTE.b	%11011111
    826  4843		       df		      BYTE.b	%11011111
    827  4844		       ef		      BYTE.b	%11101111
    828  4845		       f7		      BYTE.b	%11110111
    829  4846		       f7		      BYTE.b	%11110111
    830  4847		       f9		      BYTE.b	%11111001
    831  4848		       fe		      BYTE.b	%11111110
    832  4849		       fe		      BYTE.b	%11111110
    833  484a		       7f		      BYTE.b	%01111111
    834  484b		       7f		      BYTE.b	%01111111
    835  484c		       7f		      BYTE.b	%01111111
    836  484d		       3f		      BYTE.b	%00111111
    837  484e		       9f		      BYTE.b	%10011111
    838  484f		       9f		      BYTE.b	%10011111
    839  4850		       4e		      BYTE.b	%01001110
    840  4851		       e0		      BYTE.b	%11100000
    841  4852		       e0		      BYTE.b	%11100000
    842  4853		       ff		      BYTE.b	%11111111
    843  4854		       ff		      BYTE.b	%11111111
    844  4855		       ff		      BYTE.b	%11111111
    845  4856		       ff		      BYTE.b	%11111111
    846  4857		       ff		      BYTE.b	%11111111
    847  4858		       ff		      BYTE.b	%11111111
    848  4859		       ff		      BYTE.b	%11111111
    849  485a		       ff		      BYTE.b	%11111111
    850  485b		       ff		      BYTE.b	%11111111
    851  485c		       3f		      BYTE.b	%00111111
    852  485d		       1f		      BYTE.b	%00011111
    853  485e		       1f		      BYTE.b	%00011111
    854  485f		       7f		      BYTE.b	%01111111
    855  4860		       ff		      BYTE.b	%11111111
    856  4861		       ff		      BYTE.b	%11111111
    857  4862		       ff		      BYTE.b	%11111111
    858  4863		       7f		      BYTE.b	%01111111
    859  4864		       7f		      BYTE.b	%01111111
    860  4865		       7f		      BYTE.b	%01111111
    861  4866		       7f		      BYTE.b	%01111111
    862  4867		       7f		      BYTE.b	%01111111
    863  4868		       3f		      BYTE.b	%00111111
    864  4869		       3f		      BYTE.b	%00111111
    865  486a		       3f		      BYTE.b	%00111111
    866  486b		       1f		      BYTE.b	%00011111
    867  486c		       1f		      BYTE.b	%00011111
    868  486d		       1f		      BYTE.b	%00011111
    869  486e		       0f		      BYTE.b	%00001111
    870  486f		       07		      BYTE.b	%00000111
    871  4870		       07		      BYTE.b	%00000111
    872  4871		       03		      BYTE.b	%00000011
    873  4872		       01		      BYTE.b	%00000001
    874  4873		       01		      BYTE.b	%00000001
    875  4874		       00		      BYTE.b	%00000000
    876  4875		       f7		      BYTE.b	%11110111
    877  4876		       f7		      BYTE.b	%11110111
    878  4877		       f7		      BYTE.b	%11110111
    879  4878		       f7		      BYTE.b	%11110111
    880  4879		       f7		      BYTE.b	%11110111
    881  487a		       f7		      BYTE.b	%11110111
    882  487b		       f7		      BYTE.b	%11110111
    883  487c		       f7		      BYTE.b	%11110111
    884  487d		       f7		      BYTE.b	%11110111
    885  487e		       77		      BYTE.b	%01110111
    886  487f		       77		      BYTE.b	%01110111
    887  4880		       37		      BYTE.b	%00110111
    888  4881		       97		      BYTE.b	%10010111
    889  4882		       97		      BYTE.b	%10010111
    890  4883		       df		      BYTE.b	%11011111
    891  4884		       4f		      BYTE.b	%01001111
    892  4885		       4f		      BYTE.b	%01001111
    893  4886		       27		      BYTE.b	%00100111
    894  4887		       97		      BYTE.b	%10010111
    895  4888		       97		      BYTE.b	%10010111
    896  4889		       93		      BYTE.b	%10010011
    897  488a		       cb		      BYTE.b	%11001011
    898  488b		       cb		      BYTE.b	%11001011
    899  488c		       c9		      BYTE.b	%11001001
    900  488d		       e5		      BYTE.b	%11100101
    901  488e		       e5		      BYTE.b	%11100101
    902  488f		       e4		      BYTE.b	%11100100
    903  4890		       f3		      BYTE.b	%11110011
    904  4891		       f3		      BYTE.b	%11110011
    905  4892		       f9		      BYTE.b	%11111001
    906  4893		       f9		      BYTE.b	%11111001
    907  4894		       f9		      BYTE.b	%11111001
    908  4895		       fc		      BYTE.b	%11111100
    909  4896		       fe		      BYTE.b	%11111110
    910  4897		       fe		      BYTE.b	%11111110
    911  4898		       ff		      BYTE.b	%11111111
    912  4899		       fc		      BYTE.b	%11111100
    913  489a		       fc		      BYTE.b	%11111100
    914  489b		       f3		      BYTE.b	%11110011
    915  489c		       ef		      BYTE.b	%11101111
    916  489d		       ef		      BYTE.b	%11101111
    917  489e		       2f		      BYTE.b	%00101111
    918  489f		       6f		      BYTE.b	%01101111
    919  48a0		       6f		      BYTE.b	%01101111
    920  48a1		       de		      BYTE.b	%11011110
    921  48a2		       de		      BYTE.b	%11011110
    922  48a3		       de		      BYTE.b	%11011110
    923  48a4		       dc		      BYTE.b	%11011100
    924  48a5		       dc		      BYTE.b	%11011100
    925  48a6		       dc		      BYTE.b	%11011100
    926  48a7		       dc		      BYTE.b	%11011100
    927  48a8		       9c		      BYTE.b	%10011100
    928  48a9		       9c		      BYTE.b	%10011100
    929  48aa		       9e		      BYTE.b	%10011110
    930  48ab		       8e		      BYTE.b	%10001110
    931  48ac		       8e		      BYTE.b	%10001110
    932  48ad		       af		      BYTE.b	%10101111
    933  48ae		       b7		      BYTE.b	%10110111
    934  48af		       b7		      BYTE.b	%10110111
    935  48b0		       b3		      BYTE.b	%10110011
    936  48b1		       b9		      BYTE.b	%10111001
    937  48b2		       b9		      BYTE.b	%10111001
    938  48b3		       bc		      BYTE.b	%10111100
    939  48b4		       9f		      BYTE.b	%10011111
    940  48b5		       9f		      BYTE.b	%10011111
    941  48b6		       df		      BYTE.b	%11011111
    942  48b7		       df		      BYTE.b	%11011111
    943  48b8		       df		      BYTE.b	%11011111
    944  48b9		       ef		      BYTE.b	%11101111
    945  48ba		       f7		      BYTE.b	%11110111
    946  48bb		       f7		      BYTE.b	%11110111
    947  48bc		       f9		      BYTE.b	%11111001
    948  48bd		       fe		      BYTE.b	%11111110
    949  48be		       fe		      BYTE.b	%11111110
    950  48bf		       7f		      BYTE.b	%01111111
    951  48c0		       7f		      BYTE.b	%01111111
    952  48c1		       7f		      BYTE.b	%01111111
    953  48c2		       3f		      BYTE.b	%00111111
    954  48c3		       9f		      BYTE.b	%10011111
    955  48c4		       9f		      BYTE.b	%10011111
    956  48c5		       4e		      BYTE.b	%01001110
    957  48c6		       e0		      BYTE.b	%11100000
    958  48c7		       e0		      BYTE.b	%11100000
    959  48c8		       ff		      BYTE.b	%11111111
    960  48c9		       ff		      BYTE.b	%11111111
    961  48ca		       ff		      BYTE.b	%11111111
    962  48cb		       ff		      BYTE.b	%11111111
    963  48cc		       ff		      BYTE.b	%11111111
    964  48cd		       ff		      BYTE.b	%11111111
    965  48ce		       ff		      BYTE.b	%11111111
    966  48cf		       ff		      BYTE.b	%11111111
    967  48d0		       ff		      BYTE.b	%11111111
    968  48d1		       3f		      BYTE.b	%00111111
    969  48d2		       1f		      BYTE.b	%00011111
    970  48d3		       1f		      BYTE.b	%00011111
    971  48d4		       7f		      BYTE.b	%01111111
    972  48d5		       ff		      BYTE.b	%11111111
    973  48d6		       ff		      BYTE.b	%11111111
    974  48d7		       ff		      BYTE.b	%11111111
    975  48d8		       7f		      BYTE.b	%01111111
    976  48d9		       7f		      BYTE.b	%01111111
    977  48da		       7f		      BYTE.b	%01111111
    978  48db		       7f		      BYTE.b	%01111111
    979  48dc		       7f		      BYTE.b	%01111111
    980  48dd		       3f		      BYTE.b	%00111111
    981  48de		       3f		      BYTE.b	%00111111
    982  48df		       3f		      BYTE.b	%00111111
    983  48e0		       1f		      BYTE.b	%00011111
    984  48e1		       1f		      BYTE.b	%00011111
    985  48e2		       1f		      BYTE.b	%00011111
    986  48e3		       0f		      BYTE.b	%00001111
    987  48e4		       07		      BYTE.b	%00000111
    988  48e5		       07		      BYTE.b	%00000111
    989  48e6		       03		      BYTE.b	%00000011
    990  48e7		       01		      BYTE.b	%00000001
    991  48e8		       01		      BYTE.b	%00000001
    992  48e9		       00		      BYTE.b	%00000000
    993  48ea		       03		      BYTE.b	%00000011
    994  48eb
    995  48eb					      if	>. != >[.+(bmp_48x1_2_height)]
    996  4900		       00 00 00 00*	      align	256
    997  4900					      endif
    998  4900
    999  4900				   bmp_48x1_2_04
   1000  4900		       00		      BYTE.b	%00000000
   1001  4901		       00		      BYTE.b	%00000000
   1002  4902		       00		      BYTE.b	%00000000
   1003  4903		       00		      BYTE.b	%00000000
   1004  4904		       00		      BYTE.b	%00000000
   1005  4905		       00		      BYTE.b	%00000000
   1006  4906		       00		      BYTE.b	%00000000
   1007  4907		       00		      BYTE.b	%00000000
   1008  4908		       00		      BYTE.b	%00000000
   1009  4909		       00		      BYTE.b	%00000000
   1010  490a		       00		      BYTE.b	%00000000
   1011  490b		       00		      BYTE.b	%00000000
   1012  490c		       00		      BYTE.b	%00000000
   1013  490d		       00		      BYTE.b	%00000000
   1014  490e		       00		      BYTE.b	%00000000
   1015  490f		       00		      BYTE.b	%00000000
   1016  4910		       00		      BYTE.b	%00000000
   1017  4911		       00		      BYTE.b	%00000000
   1018  4912		       00		      BYTE.b	%00000000
   1019  4913		       00		      BYTE.b	%00000000
   1020  4914		       00		      BYTE.b	%00000000
   1021  4915		       00		      BYTE.b	%00000000
   1022  4916		       00		      BYTE.b	%00000000
   1023  4917		       00		      BYTE.b	%00000000
   1024  4918		       00		      BYTE.b	%00000000
   1025  4919		       00		      BYTE.b	%00000000
   1026  491a		       00		      BYTE.b	%00000000
   1027  491b		       00		      BYTE.b	%00000000
   1028  491c		       00		      BYTE.b	%00000000
   1029  491d		       00		      BYTE.b	%00000000
   1030  491e		       80		      BYTE.b	%10000000
   1031  491f		       80		      BYTE.b	%10000000
   1032  4920		       c0		      BYTE.b	%11000000
   1033  4921		       60		      BYTE.b	%01100000
   1034  4922		       60		      BYTE.b	%01100000
   1035  4923		       30		      BYTE.b	%00110000
   1036  4924		       9c		      BYTE.b	%10011100
   1037  4925		       9c		      BYTE.b	%10011100
   1038  4926		       cf		      BYTE.b	%11001111
   1039  4927		       a7		      BYTE.b	%10100111
   1040  4928		       a7		      BYTE.b	%10100111
   1041  4929		       13		      BYTE.b	%00010011
   1042  492a		       1e		      BYTE.b	%00011110
   1043  492b		       1e		      BYTE.b	%00011110
   1044  492c		       0c		      BYTE.b	%00001100
   1045  492d		       07		      BYTE.b	%00000111
   1046  492e		       07		      BYTE.b	%00000111
   1047  492f		       07		      BYTE.b	%00000111
   1048  4930		       39		      BYTE.b	%00111001
   1049  4931		       39		      BYTE.b	%00111001
   1050  4932		       c6		      BYTE.b	%11000110
   1051  4933		       f1		      BYTE.b	%11110001
   1052  4934		       f1		      BYTE.b	%11110001
   1053  4935		       fc		      BYTE.b	%11111100
   1054  4936		       fb		      BYTE.b	%11111011
   1055  4937		       fb		      BYTE.b	%11111011
   1056  4938		       fc		      BYTE.b	%11111100
   1057  4939		       ff		      BYTE.b	%11111111
   1058  493a		       ff		      BYTE.b	%11111111
   1059  493b		       fc		      BYTE.b	%11111100
   1060  493c		       fd		      BYTE.b	%11111101
   1061  493d		       fd		      BYTE.b	%11111101
   1062  493e		       fb		      BYTE.b	%11111011
   1063  493f		       fb		      BYTE.b	%11111011
   1064  4940		       fb		      BYTE.b	%11111011
   1065  4941		       f7		      BYTE.b	%11110111
   1066  4942		       ff		      BYTE.b	%11111111
   1067  4943		       ff		      BYTE.b	%11111111
   1068  4944		       ee		      BYTE.b	%11101110
   1069  4945		       da		      BYTE.b	%11011010
   1070  4946		       da		      BYTE.b	%11011010
   1071  4947		       ba		      BYTE.b	%10111010
   1072  4948		       7a		      BYTE.b	%01111010
   1073  4949		       7a		      BYTE.b	%01111010
   1074  494a		       fa		      BYTE.b	%11111010
   1075  494b		       f6		      BYTE.b	%11110110
   1076  494c		       f6		      BYTE.b	%11110110
   1077  494d		       ee		      BYTE.b	%11101110
   1078  494e		       9e		      BYTE.b	%10011110
   1079  494f		       9e		      BYTE.b	%10011110
   1080  4950		       3e		      BYTE.b	%00111110
   1081  4951		       ff		      BYTE.b	%11111111
   1082  4952		       ff		      BYTE.b	%11111111
   1083  4953		       ff		      BYTE.b	%11111111
   1084  4954		       ff		      BYTE.b	%11111111
   1085  4955		       ff		      BYTE.b	%11111111
   1086  4956		       ff		      BYTE.b	%11111111
   1087  4957		       ff		      BYTE.b	%11111111
   1088  4958		       ff		      BYTE.b	%11111111
   1089  4959		       fe		      BYTE.b	%11111110
   1090  495a		       fe		      BYTE.b	%11111110
   1091  495b		       fe		      BYTE.b	%11111110
   1092  495c		       fc		      BYTE.b	%11111100
   1093  495d		       fc		      BYTE.b	%11111100
   1094  495e		       fc		      BYTE.b	%11111100
   1095  495f		       f8		      BYTE.b	%11111000
   1096  4960		       f8		      BYTE.b	%11111000
   1097  4961		       f8		      BYTE.b	%11111000
   1098  4962		       f0		      BYTE.b	%11110000
   1099  4963		       f0		      BYTE.b	%11110000
   1100  4964		       f0		      BYTE.b	%11110000
   1101  4965		       f0		      BYTE.b	%11110000
   1102  4966		       f0		      BYTE.b	%11110000
   1103  4967		       f0		      BYTE.b	%11110000
   1104  4968		       f0		      BYTE.b	%11110000
   1105  4969		       f0		      BYTE.b	%11110000
   1106  496a		       f0		      BYTE.b	%11110000
   1107  496b		       f8		      BYTE.b	%11111000
   1108  496c		       f8		      BYTE.b	%11111000
   1109  496d		       f8		      BYTE.b	%11111000
   1110  496e		       f8		      BYTE.b	%11111000
   1111  496f		       f8		      BYTE.b	%11111000
   1112  4970		       f8		      BYTE.b	%11111000
   1113  4971		       f0		      BYTE.b	%11110000
   1114  4972		       f0		      BYTE.b	%11110000
   1115  4973		       f0		      BYTE.b	%11110000
   1116  4974		       00		      BYTE.b	%00000000
   1117  4975		       00		      BYTE.b	%00000000
   1118  4976		       00		      BYTE.b	%00000000
   1119  4977		       00		      BYTE.b	%00000000
   1120  4978		       00		      BYTE.b	%00000000
   1121  4979		       00		      BYTE.b	%00000000
   1122  497a		       00		      BYTE.b	%00000000
   1123  497b		       00		      BYTE.b	%00000000
   1124  497c		       00		      BYTE.b	%00000000
   1125  497d		       00		      BYTE.b	%00000000
   1126  497e		       00		      BYTE.b	%00000000
   1127  497f		       00		      BYTE.b	%00000000
   1128  4980		       00		      BYTE.b	%00000000
   1129  4981		       00		      BYTE.b	%00000000
   1130  4982		       00		      BYTE.b	%00000000
   1131  4983		       00		      BYTE.b	%00000000
   1132  4984		       00		      BYTE.b	%00000000
   1133  4985		       00		      BYTE.b	%00000000
   1134  4986		       00		      BYTE.b	%00000000
   1135  4987		       00		      BYTE.b	%00000000
   1136  4988		       00		      BYTE.b	%00000000
   1137  4989		       00		      BYTE.b	%00000000
   1138  498a		       00		      BYTE.b	%00000000
   1139  498b		       00		      BYTE.b	%00000000
   1140  498c		       00		      BYTE.b	%00000000
   1141  498d		       00		      BYTE.b	%00000000
   1142  498e		       00		      BYTE.b	%00000000
   1143  498f		       00		      BYTE.b	%00000000
   1144  4990		       80		      BYTE.b	%10000000
   1145  4991		       80		      BYTE.b	%10000000
   1146  4992		       80		      BYTE.b	%10000000
   1147  4993		       c0		      BYTE.b	%11000000
   1148  4994		       c0		      BYTE.b	%11000000
   1149  4995		       c0		      BYTE.b	%11000000
   1150  4996		       60		      BYTE.b	%01100000
   1151  4997		       60		      BYTE.b	%01100000
   1152  4998		       30		      BYTE.b	%00110000
   1153  4999		       9c		      BYTE.b	%10011100
   1154  499a		       9c		      BYTE.b	%10011100
   1155  499b		       cf		      BYTE.b	%11001111
   1156  499c		       a7		      BYTE.b	%10100111
   1157  499d		       a7		      BYTE.b	%10100111
   1158  499e		       13		      BYTE.b	%00010011
   1159  499f		       1e		      BYTE.b	%00011110
   1160  49a0		       1e		      BYTE.b	%00011110
   1161  49a1		       0c		      BYTE.b	%00001100
   1162  49a2		       07		      BYTE.b	%00000111
   1163  49a3		       07		      BYTE.b	%00000111
   1164  49a4		       07		      BYTE.b	%00000111
   1165  49a5		       01		      BYTE.b	%00000001
   1166  49a6		       01		      BYTE.b	%00000001
   1167  49a7		       02		      BYTE.b	%00000010
   1168  49a8		       05		      BYTE.b	%00000101
   1169  49a9		       05		      BYTE.b	%00000101
   1170  49aa		       05		      BYTE.b	%00000101
   1171  49ab		       0d		      BYTE.b	%00001101
   1172  49ac		       0d		      BYTE.b	%00001101
   1173  49ad		       1d		      BYTE.b	%00011101
   1174  49ae		       fd		      BYTE.b	%11111101
   1175  49af		       fd		      BYTE.b	%11111101
   1176  49b0		       fd		      BYTE.b	%11111101
   1177  49b1		       fd		      BYTE.b	%11111101
   1178  49b2		       fd		      BYTE.b	%11111101
   1179  49b3		       fb		      BYTE.b	%11111011
   1180  49b4		       19		      BYTE.b	%00011001
   1181  49b5		       19		      BYTE.b	%00011001
   1182  49b6		       c0		      BYTE.b	%11000000
   1183  49b7		       ed		      BYTE.b	%11101101
   1184  49b8		       ed		      BYTE.b	%11101101
   1185  49b9		       e6		      BYTE.b	%11100110
   1186  49ba		       d2		      BYTE.b	%11010010
   1187  49bb		       d2		      BYTE.b	%11010010
   1188  49bc		       ba		      BYTE.b	%10111010
   1189  49bd		       7b		      BYTE.b	%01111011
   1190  49be		       7b		      BYTE.b	%01111011
   1191  49bf		       fb		      BYTE.b	%11111011
   1192  49c0		       f7		      BYTE.b	%11110111
   1193  49c1		       f7		      BYTE.b	%11110111
   1194  49c2		       ee		      BYTE.b	%11101110
   1195  49c3		       9e		      BYTE.b	%10011110
   1196  49c4		       9e		      BYTE.b	%10011110
   1197  49c5		       3e		      BYTE.b	%00111110
   1198  49c6		       ff		      BYTE.b	%11111111
   1199  49c7		       ff		      BYTE.b	%11111111
   1200  49c8		       ff		      BYTE.b	%11111111
   1201  49c9		       ff		      BYTE.b	%11111111
   1202  49ca		       ff		      BYTE.b	%11111111
   1203  49cb		       ff		      BYTE.b	%11111111
   1204  49cc		       ff		      BYTE.b	%11111111
   1205  49cd		       ff		      BYTE.b	%11111111
   1206  49ce		       fe		      BYTE.b	%11111110
   1207  49cf		       fe		      BYTE.b	%11111110
   1208  49d0		       fe		      BYTE.b	%11111110
   1209  49d1		       fc		      BYTE.b	%11111100
   1210  49d2		       fc		      BYTE.b	%11111100
   1211  49d3		       fc		      BYTE.b	%11111100
   1212  49d4		       f8		      BYTE.b	%11111000
   1213  49d5		       f8		      BYTE.b	%11111000
   1214  49d6		       f8		      BYTE.b	%11111000
   1215  49d7		       f0		      BYTE.b	%11110000
   1216  49d8		       f0		      BYTE.b	%11110000
   1217  49d9		       f0		      BYTE.b	%11110000
   1218  49da		       f0		      BYTE.b	%11110000
   1219  49db		       f0		      BYTE.b	%11110000
   1220  49dc		       f0		      BYTE.b	%11110000
   1221  49dd		       f0		      BYTE.b	%11110000
   1222  49de		       f0		      BYTE.b	%11110000
   1223  49df		       f0		      BYTE.b	%11110000
   1224  49e0		       f8		      BYTE.b	%11111000
   1225  49e1		       f8		      BYTE.b	%11111000
   1226  49e2		       f8		      BYTE.b	%11111000
   1227  49e3		       f8		      BYTE.b	%11111000
   1228  49e4		       f8		      BYTE.b	%11111000
   1229  49e5		       f8		      BYTE.b	%11111000
   1230  49e6		       f0		      BYTE.b	%11110000
   1231  49e7		       f0		      BYTE.b	%11110000
   1232  49e8		       f0		      BYTE.b	%11110000
   1233  49e9		       00		      BYTE.b	%00000000
   1234  49ea		       f0		      BYTE.b	%11110000
   1235  49eb
   1236  49eb					      if	>. != >[.+(bmp_48x1_2_height)]
   1237  4a00		       00 00 00 00*	      align	256
   1238  4a00					      endif
   1239  4a00
   1240  4a00				   bmp_48x1_2_05
   1241  4a00		       00		      BYTE.b	%00000000
   1242  4a01		       00		      BYTE.b	%00000000
   1243  4a02		       00		      BYTE.b	%00000000
   1244  4a03		       00		      BYTE.b	%00000000
   1245  4a04		       00		      BYTE.b	%00000000
   1246  4a05		       00		      BYTE.b	%00000000
   1247  4a06		       00		      BYTE.b	%00000000
   1248  4a07		       00		      BYTE.b	%00000000
   1249  4a08		       00		      BYTE.b	%00000000
   1250  4a09		       00		      BYTE.b	%00000000
   1251  4a0a		       00		      BYTE.b	%00000000
   1252  4a0b		       00		      BYTE.b	%00000000
   1253  4a0c		       00		      BYTE.b	%00000000
   1254  4a0d		       00		      BYTE.b	%00000000
   1255  4a0e		       00		      BYTE.b	%00000000
   1256  4a0f		       00		      BYTE.b	%00000000
   1257  4a10		       00		      BYTE.b	%00000000
   1258  4a11		       00		      BYTE.b	%00000000
   1259  4a12		       00		      BYTE.b	%00000000
   1260  4a13		       00		      BYTE.b	%00000000
   1261  4a14		       00		      BYTE.b	%00000000
   1262  4a15		       00		      BYTE.b	%00000000
   1263  4a16		       00		      BYTE.b	%00000000
   1264  4a17		       00		      BYTE.b	%00000000
   1265  4a18		       00		      BYTE.b	%00000000
   1266  4a19		       00		      BYTE.b	%00000000
   1267  4a1a		       00		      BYTE.b	%00000000
   1268  4a1b		       00		      BYTE.b	%00000000
   1269  4a1c		       00		      BYTE.b	%00000000
   1270  4a1d		       00		      BYTE.b	%00000000
   1271  4a1e		       00		      BYTE.b	%00000000
   1272  4a1f		       00		      BYTE.b	%00000000
   1273  4a20		       00		      BYTE.b	%00000000
   1274  4a21		       00		      BYTE.b	%00000000
   1275  4a22		       00		      BYTE.b	%00000000
   1276  4a23		       00		      BYTE.b	%00000000
   1277  4a24		       00		      BYTE.b	%00000000
   1278  4a25		       00		      BYTE.b	%00000000
   1279  4a26		       00		      BYTE.b	%00000000
   1280  4a27		       c0		      BYTE.b	%11000000
   1281  4a28		       c0		      BYTE.b	%11000000
   1282  4a29		       e0		      BYTE.b	%11100000
   1283  4a2a		       70		      BYTE.b	%01110000
   1284  4a2b		       70		      BYTE.b	%01110000
   1285  4a2c		       f8		      BYTE.b	%11111000
   1286  4a2d		       f8		      BYTE.b	%11111000
   1287  4a2e		       f8		      BYTE.b	%11111000
   1288  4a2f		       f8		      BYTE.b	%11111000
   1289  4a30		       d0		      BYTE.b	%11010000
   1290  4a31		       d0		      BYTE.b	%11010000
   1291  4a32		       20		      BYTE.b	%00100000
   1292  4a33		       60		      BYTE.b	%01100000
   1293  4a34		       60		      BYTE.b	%01100000
   1294  4a35		       20		      BYTE.b	%00100000
   1295  4a36		       20		      BYTE.b	%00100000
   1296  4a37		       20		      BYTE.b	%00100000
   1297  4a38		       a0		      BYTE.b	%10100000
   1298  4a39		       20		      BYTE.b	%00100000
   1299  4a3a		       20		      BYTE.b	%00100000
   1300  4a3b		       a0		      BYTE.b	%10100000
   1301  4a3c		       00		      BYTE.b	%00000000
   1302  4a3d		       00		      BYTE.b	%00000000
   1303  4a3e		       a0		      BYTE.b	%10100000
   1304  4a3f		       d0		      BYTE.b	%11010000
   1305  4a40		       d0		      BYTE.b	%11010000
   1306  4a41		       00		      BYTE.b	%00000000
   1307  4a42		       00		      BYTE.b	%00000000
   1308  4a43		       00		      BYTE.b	%00000000
   1309  4a44		       00		      BYTE.b	%00000000
   1310  4a45		       00		      BYTE.b	%00000000
   1311  4a46		       00		      BYTE.b	%00000000
   1312  4a47		       00		      BYTE.b	%00000000
   1313  4a48		       00		      BYTE.b	%00000000
   1314  4a49		       00		      BYTE.b	%00000000
   1315  4a4a		       00		      BYTE.b	%00000000
   1316  4a4b		       00		      BYTE.b	%00000000
   1317  4a4c		       00		      BYTE.b	%00000000
   1318  4a4d		       00		      BYTE.b	%00000000
   1319  4a4e		       00		      BYTE.b	%00000000
   1320  4a4f		       00		      BYTE.b	%00000000
   1321  4a50		       00		      BYTE.b	%00000000
   1322  4a51		       00		      BYTE.b	%00000000
   1323  4a52		       00		      BYTE.b	%00000000
   1324  4a53		       00		      BYTE.b	%00000000
   1325  4a54		       00		      BYTE.b	%00000000
   1326  4a55		       00		      BYTE.b	%00000000
   1327  4a56		       00		      BYTE.b	%00000000
   1328  4a57		       00		      BYTE.b	%00000000
   1329  4a58		       00		      BYTE.b	%00000000
   1330  4a59		       00		      BYTE.b	%00000000
   1331  4a5a		       00		      BYTE.b	%00000000
   1332  4a5b		       00		      BYTE.b	%00000000
   1333  4a5c		       00		      BYTE.b	%00000000
   1334  4a5d		       00		      BYTE.b	%00000000
   1335  4a5e		       00		      BYTE.b	%00000000
   1336  4a5f		       00		      BYTE.b	%00000000
   1337  4a60		       00		      BYTE.b	%00000000
   1338  4a61		       00		      BYTE.b	%00000000
   1339  4a62		       00		      BYTE.b	%00000000
   1340  4a63		       00		      BYTE.b	%00000000
   1341  4a64		       00		      BYTE.b	%00000000
   1342  4a65		       00		      BYTE.b	%00000000
   1343  4a66		       00		      BYTE.b	%00000000
   1344  4a67		       00		      BYTE.b	%00000000
   1345  4a68		       00		      BYTE.b	%00000000
   1346  4a69		       00		      BYTE.b	%00000000
   1347  4a6a		       00		      BYTE.b	%00000000
   1348  4a6b		       00		      BYTE.b	%00000000
   1349  4a6c		       00		      BYTE.b	%00000000
   1350  4a6d		       00		      BYTE.b	%00000000
   1351  4a6e		       00		      BYTE.b	%00000000
   1352  4a6f		       00		      BYTE.b	%00000000
   1353  4a70		       00		      BYTE.b	%00000000
   1354  4a71		       00		      BYTE.b	%00000000
   1355  4a72		       00		      BYTE.b	%00000000
   1356  4a73		       00		      BYTE.b	%00000000
   1357  4a74		       00		      BYTE.b	%00000000
   1358  4a75		       00		      BYTE.b	%00000000
   1359  4a76		       00		      BYTE.b	%00000000
   1360  4a77		       00		      BYTE.b	%00000000
   1361  4a78		       00		      BYTE.b	%00000000
   1362  4a79		       00		      BYTE.b	%00000000
   1363  4a7a		       00		      BYTE.b	%00000000
   1364  4a7b		       00		      BYTE.b	%00000000
   1365  4a7c		       00		      BYTE.b	%00000000
   1366  4a7d		       00		      BYTE.b	%00000000
   1367  4a7e		       00		      BYTE.b	%00000000
   1368  4a7f		       00		      BYTE.b	%00000000
   1369  4a80		       00		      BYTE.b	%00000000
   1370  4a81		       00		      BYTE.b	%00000000
   1371  4a82		       00		      BYTE.b	%00000000
   1372  4a83		       00		      BYTE.b	%00000000
   1373  4a84		       00		      BYTE.b	%00000000
   1374  4a85		       00		      BYTE.b	%00000000
   1375  4a86		       00		      BYTE.b	%00000000
   1376  4a87		       00		      BYTE.b	%00000000
   1377  4a88		       00		      BYTE.b	%00000000
   1378  4a89		       00		      BYTE.b	%00000000
   1379  4a8a		       00		      BYTE.b	%00000000
   1380  4a8b		       00		      BYTE.b	%00000000
   1381  4a8c		       00		      BYTE.b	%00000000
   1382  4a8d		       00		      BYTE.b	%00000000
   1383  4a8e		       00		      BYTE.b	%00000000
   1384  4a8f		       00		      BYTE.b	%00000000
   1385  4a90		       00		      BYTE.b	%00000000
   1386  4a91		       00		      BYTE.b	%00000000
   1387  4a92		       00		      BYTE.b	%00000000
   1388  4a93		       00		      BYTE.b	%00000000
   1389  4a94		       00		      BYTE.b	%00000000
   1390  4a95		       00		      BYTE.b	%00000000
   1391  4a96		       00		      BYTE.b	%00000000
   1392  4a97		       00		      BYTE.b	%00000000
   1393  4a98		       00		      BYTE.b	%00000000
   1394  4a99		       00		      BYTE.b	%00000000
   1395  4a9a		       00		      BYTE.b	%00000000
   1396  4a9b		       00		      BYTE.b	%00000000
   1397  4a9c		       c0		      BYTE.b	%11000000
   1398  4a9d		       c0		      BYTE.b	%11000000
   1399  4a9e		       e0		      BYTE.b	%11100000
   1400  4a9f		       70		      BYTE.b	%01110000
   1401  4aa0		       70		      BYTE.b	%01110000
   1402  4aa1		       f8		      BYTE.b	%11111000
   1403  4aa2		       f8		      BYTE.b	%11111000
   1404  4aa3		       f8		      BYTE.b	%11111000
   1405  4aa4		       f8		      BYTE.b	%11111000
   1406  4aa5		       d0		      BYTE.b	%11010000
   1407  4aa6		       d0		      BYTE.b	%11010000
   1408  4aa7		       20		      BYTE.b	%00100000
   1409  4aa8		       e0		      BYTE.b	%11100000
   1410  4aa9		       e0		      BYTE.b	%11100000
   1411  4aaa		       e0		      BYTE.b	%11100000
   1412  4aab		       e0		      BYTE.b	%11100000
   1413  4aac		       e0		      BYTE.b	%11100000
   1414  4aad		       e0		      BYTE.b	%11100000
   1415  4aae		       e0		      BYTE.b	%11100000
   1416  4aaf		       e0		      BYTE.b	%11100000
   1417  4ab0		       e0		      BYTE.b	%11100000
   1418  4ab1		       c0		      BYTE.b	%11000000
   1419  4ab2		       c0		      BYTE.b	%11000000
   1420  4ab3		       c0		      BYTE.b	%11000000
   1421  4ab4		       c0		      BYTE.b	%11000000
   1422  4ab5		       c0		      BYTE.b	%11000000
   1423  4ab6		       00		      BYTE.b	%00000000
   1424  4ab7		       00		      BYTE.b	%00000000
   1425  4ab8		       00		      BYTE.b	%00000000
   1426  4ab9		       e0		      BYTE.b	%11100000
   1427  4aba		       a0		      BYTE.b	%10100000
   1428  4abb		       a0		      BYTE.b	%10100000
   1429  4abc		       80		      BYTE.b	%10000000
   1430  4abd		       c0		      BYTE.b	%11000000
   1431  4abe		       c0		      BYTE.b	%11000000
   1432  4abf		       40		      BYTE.b	%01000000
   1433  4ac0		       00		      BYTE.b	%00000000
   1434  4ac1		       00		      BYTE.b	%00000000
   1435  4ac2		       00		      BYTE.b	%00000000
   1436  4ac3		       00		      BYTE.b	%00000000
   1437  4ac4		       00		      BYTE.b	%00000000
   1438  4ac5		       00		      BYTE.b	%00000000
   1439  4ac6		       00		      BYTE.b	%00000000
   1440  4ac7		       00		      BYTE.b	%00000000
   1441  4ac8		       00		      BYTE.b	%00000000
   1442  4ac9		       00		      BYTE.b	%00000000
   1443  4aca		       00		      BYTE.b	%00000000
   1444  4acb		       00		      BYTE.b	%00000000
   1445  4acc		       00		      BYTE.b	%00000000
   1446  4acd		       00		      BYTE.b	%00000000
   1447  4ace		       00		      BYTE.b	%00000000
   1448  4acf		       00		      BYTE.b	%00000000
   1449  4ad0		       00		      BYTE.b	%00000000
   1450  4ad1		       00		      BYTE.b	%00000000
   1451  4ad2		       00		      BYTE.b	%00000000
   1452  4ad3		       00		      BYTE.b	%00000000
   1453  4ad4		       00		      BYTE.b	%00000000
   1454  4ad5		       00		      BYTE.b	%00000000
   1455  4ad6		       00		      BYTE.b	%00000000
   1456  4ad7		       00		      BYTE.b	%00000000
   1457  4ad8		       00		      BYTE.b	%00000000
   1458  4ad9		       00		      BYTE.b	%00000000
   1459  4ada		       00		      BYTE.b	%00000000
   1460  4adb		       00		      BYTE.b	%00000000
   1461  4adc		       00		      BYTE.b	%00000000
   1462  4add		       00		      BYTE.b	%00000000
   1463  4ade		       00		      BYTE.b	%00000000
   1464  4adf		       00		      BYTE.b	%00000000
   1465  4ae0		       00		      BYTE.b	%00000000
   1466  4ae1		       00		      BYTE.b	%00000000
   1467  4ae2		       00		      BYTE.b	%00000000
   1468  4ae3		       00		      BYTE.b	%00000000
   1469  4ae4		       00		      BYTE.b	%00000000
   1470  4ae5		       00		      BYTE.b	%00000000
   1471  4ae6		       00		      BYTE.b	%00000000
   1472  4ae7		       00		      BYTE.b	%00000000
   1473  4ae8		       00		      BYTE.b	%00000000
   1474  4ae9		       00		      BYTE.b	%00000000
   1475  4aea		       00		      BYTE.b	%00000000
   1476  4aeb
------- FILE titlescreen/asm/titlescreen.asm
    222  4aeb					      endif
    223  4aeb					      ifconst	mk_48x1_3_on
------- FILE titlescreen/48x1_3_image.asm LEVEL 3 PASS 3
      0  4aeb					      include	"titlescreen/48x1_3_image.asm"
      1  4aeb
      2  4aeb
      3  4aeb							; *** if you want to modify the bitmap color on the fly, just dim a
      4  4aeb							; *** variable in bB called "bmp_48x1_3_color", and use it to set the
      5  4aeb							; *** color.
      6  4aeb
      7  4aeb
      8  4aeb							;*** this is the height of the displayed data
      9  4aeb		       00 0b	   bmp_48x1_3_window =	11
     10  4aeb
     11  4aeb							;*** this is the height of the bitmap data
     12  4aeb		       00 0b	   bmp_48x1_3_height =	11
     13  4aeb
     14  4aeb				  -	      ifnconst	bmp_48x1_3_color
     15  4aeb				  -bmp_48x1_3_color
     16  4aeb					      endif
     17  4aeb		       0f		      .byte.b	$0f
     18  4aec
     19  4aec				  -	      ifnconst	bmp_48x1_3_PF1
     20  4aec				  -bmp_48x1_3_PF1
     21  4aec					      endif
     22  4aec		       00		      BYTE.b	%00000000
     23  4aed				  -	      ifnconst	bmp_48x1_3_PF2
     24  4aed				  -bmp_48x1_3_PF2
     25  4aed					      endif
     26  4aed		       00		      BYTE.b	%00000000
     27  4aee				  -	      ifnconst	bmp_48x1_3_background
     28  4aee				  -bmp_48x1_3_background
     29  4aee					      endif
     30  4aee		       00		      BYTE.b	$00
     31  4aef
     32  4aef
     33  4aef				  -	      if	>. != >[.+bmp_48x1_3_height]
     34  4aef				  -	      align	256
     35  4aef					      endif
     36  4aef
     37  4aef				   bmp_48x1_3_00
     38  4aef
     39  4aef		       00		      BYTE.b	%00000000
     40  4af0		       00		      BYTE.b	%00000000
     41  4af1		       00		      BYTE.b	%00000000
     42  4af2		       00		      BYTE.b	%00000000
     43  4af3		       00		      BYTE.b	%00000000
     44  4af4		       00		      BYTE.b	%00000000
     45  4af5		       04		      BYTE.b	%00000100
     46  4af6		       04		      BYTE.b	%00000100
     47  4af7		       07		      BYTE.b	%00000111
     48  4af8		       05		      BYTE.b	%00000101
     49  4af9		       07		      BYTE.b	%00000111
     50  4afa
     51  4afa					      if	>. != >[.+bmp_48x1_3_height]
     52  4b00		       00 00 00 00*	      align	256
     53  4b00					      endif
     54  4b00
     55  4b00				   bmp_48x1_3_01
     56  4b00
     57  4b00		       4e		      BYTE.b	%01001110
     58  4b01		       4a		      BYTE.b	%01001010
     59  4b02		       4a		      BYTE.b	%01001010
     60  4b03		       4a		      BYTE.b	%01001010
     61  4b04		       ee		      BYTE.b	%11101110
     62  4b05		       00		      BYTE.b	%00000000
     63  4b06		       57		      BYTE.b	%01010111
     64  4b07		       64		      BYTE.b	%01100100
     65  4b08		       76		      BYTE.b	%01110110
     66  4b09		       54		      BYTE.b	%01010100
     67  4b0a		       77		      BYTE.b	%01110111
     68  4b0b
     69  4b0b				  -	      if	>. != >[.+bmp_48x1_3_height]
     70  4b0b				  -	      align	256
     71  4b0b					      endif
     72  4b0b
     73  4b0b				   bmp_48x1_3_02
     74  4b0b
     75  4b0b		       0e		      BYTE.b	%00001110
     76  4b0c		       02		      BYTE.b	%00000010
     77  4b0d		       0e		      BYTE.b	%00001110
     78  4b0e		       08		      BYTE.b	%00001000
     79  4b0f		       0e		      BYTE.b	%00001110
     80  4b10		       00		      BYTE.b	%00000000
     81  4b11		       77		      BYTE.b	%01110111
     82  4b12		       11		      BYTE.b	%00010001
     83  4b13		       77		      BYTE.b	%01110111
     84  4b14		       44		      BYTE.b	%01000100
     85  4b15		       77		      BYTE.b	%01110111
     86  4b16
     87  4b16
     88  4b16
     89  4b16				  -	      if	>. != >[.+bmp_48x1_3_height]
     90  4b16				  -	      align	256
     91  4b16					      endif
     92  4b16
     93  4b16				   bmp_48x1_3_03
     94  4b16
     95  4b16		       4a		      BYTE.b	%01001010
     96  4b17		       4a		      BYTE.b	%01001010
     97  4b18		       4e		      BYTE.b	%01001110
     98  4b19		       4a		      BYTE.b	%01001010
     99  4b1a		       ee		      BYTE.b	%11101110
    100  4b1b		       00		      BYTE.b	%00000000
    101  4b1c		       04		      BYTE.b	%00000100
    102  4b1d		       04		      BYTE.b	%00000100
    103  4b1e		       06		      BYTE.b	%00000110
    104  4b1f		       04		      BYTE.b	%00000100
    105  4b20		       07		      BYTE.b	%00000111
    106  4b21
    107  4b21				  -	      if	>. != >[.+bmp_48x1_3_height]
    108  4b21				  -	      align	256
    109  4b21					      endif
    110  4b21
    111  4b21				   bmp_48x1_3_04
    112  4b21
    113  4b21		       a4		      BYTE.b	%10100100
    114  4b22		       c4		      BYTE.b	%11000100
    115  4b23		       e4		      BYTE.b	%11100100
    116  4b24		       a4		      BYTE.b	%10100100
    117  4b25		       ee		      BYTE.b	%11101110
    118  4b26		       00		      BYTE.b	%00000000
    119  4b27		       55		      BYTE.b	%01010101
    120  4b28		       59		      BYTE.b	%01011001
    121  4b29		       5d		      BYTE.b	%01011101
    122  4b2a		       55		      BYTE.b	%01010101
    123  4b2b		       5d		      BYTE.b	%01011101
    124  4b2c
    125  4b2c
    126  4b2c				  -	      if	>. != >[.+bmp_48x1_3_height]
    127  4b2c				  -	      align	256
    128  4b2c					      endif
    129  4b2c
    130  4b2c				   bmp_48x1_3_05
    131  4b2c
    132  4b2c		       00		      BYTE.b	%00000000
    133  4b2d		       00		      BYTE.b	%00000000
    134  4b2e		       00		      BYTE.b	%00000000
    135  4b2f		       00		      BYTE.b	%00000000
    136  4b30		       00		      BYTE.b	%00000000
    137  4b31		       00		      BYTE.b	%00000000
    138  4b32		       c0		      BYTE.b	%11000000
    139  4b33		       00		      BYTE.b	%00000000
    140  4b34		       80		      BYTE.b	%10000000
    141  4b35		       00		      BYTE.b	%00000000
    142  4b36		       c0		      BYTE.b	%11000000
    143  4b37
    144  4b37
------- FILE titlescreen/asm/titlescreen.asm
    225  4b37					      endif
    226  4b37				  -	      ifconst	mk_48x1_4_on
    227  4b37				  -	      include	"titlescreen/48x1_4_image.asm"
    228  4b37					      endif
    229  4b37				  -	      ifconst	mk_48x1_5_on
    230  4b37				  -	      include	"titlescreen/48x1_5_image.asm"
    231  4b37					      endif
    232  4b37				  -	      ifconst	mk_48x1_6_on
    233  4b37				  -	      include	"titlescreen/48x1_6_image.asm"
    234  4b37					      endif
    235  4b37				  -	      ifconst	mk_48x1_7_on
    236  4b37				  -	      include	"titlescreen/48x1_7_image.asm"
    237  4b37					      endif
    238  4b37				  -	      ifconst	mk_48x1_8_on
    239  4b37				  -	      include	"titlescreen/48x1_8_image.asm"
    240  4b37					      endif
    241  4b37
    242  4b37
    243  4b37					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  4b37					      include	"titlescreen/48x2_1_image.asm"
      1  4b37
      2  4b37							;*** The height of the displayed data...
      3  4b37		       00 09	   bmp_48x2_1_window =	9
      4  4b37
      5  4b37							;*** The height of the bitmap data. This can be larger than 
      6  4b37							;*** the displayed data height, if you're scrolling or animating 
      7  4b37							;*** the data...
      8  4b37		       00 09	   bmp_48x2_1_height =	9
      9  4b37
     10  4b37				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  4b37				  -	      align	256
     12  4b37					      endif
     13  4b37		       00		      BYTE.b	0	; leave this here!
     14  4b38
     15  4b38
     16  4b38							;*** The color of each line in the bitmap, in reverse ordar...
     17  4b38				   bmp_48x2_1_colors
     18  4b38		       94		      BYTE.b	$94
     19  4b39		       96		      BYTE.b	$96
     20  4b3a		       98		      BYTE.b	$98
     21  4b3b		       9a		      BYTE.b	$9A
     22  4b3c		       9c		      BYTE.b	$9C
     23  4b3d		       9d		      BYTE.b	$9D
     24  4b3e		       9e		      BYTE.b	$9E
     25  4b3f		       9c		      BYTE.b	$9C
     26  4b40		       9a		      BYTE.b	$9A
     27  4b41		       98		      BYTE.b	$98
     28  4b42
     29  4b42				  -	      ifnconst	bmp_48x2_1_PF1
     30  4b42				  -bmp_48x2_1_PF1
     31  4b42					      endif
     32  4b42		       00		      BYTE.b	%00000000
     33  4b43				  -	      ifnconst	bmp_48x2_1_PF2
     34  4b43				  -bmp_48x2_1_PF2
     35  4b43					      endif
     36  4b43		       00		      BYTE.b	%00000000
     37  4b44				  -	      ifnconst	bmp_48x2_1_background
     38  4b44				  -bmp_48x2_1_background
     39  4b44					      endif
     40  4b44		       00		      BYTE.b	$00
     41  4b45
     42  4b45				  -	      if	>. != >[.+bmp_48x2_1_height]
     43  4b45				  -	      align	256
     44  4b45					      endif
     45  4b45
     46  4b45
     47  4b45				   bmp_48x2_1_00
     48  4b45		       00		      BYTE.b	%00000000
     49  4b46		       0c		      BYTE.b	%00001100
     50  4b47		       0c		      BYTE.b	%00001100
     51  4b48		       0c		      BYTE.b	%00001100
     52  4b49		       0d		      BYTE.b	%00001101
     53  4b4a		       0e		      BYTE.b	%00001110
     54  4b4b		       0e		      BYTE.b	%00001110
     55  4b4c		       0c		      BYTE.b	%00001100
     56  4b4d		       00		      BYTE.b	%00000000
     57  4b4e		       0e		      BYTE.b	%00001110
     58  4b4f
     59  4b4f				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     60  4b4f				  -	      align	256
     61  4b4f					      endif
     62  4b4f
     63  4b4f				   bmp_48x2_1_01
     64  4b4f		       00		      BYTE.b	%00000000
     65  4b50		       6e		      BYTE.b	%01101110
     66  4b51		       62		      BYTE.b	%01100010
     67  4b52		       64		      BYTE.b	%01100100
     68  4b53		       68		      BYTE.b	%01101000
     69  4b54		       ee		      BYTE.b	%11101110
     70  4b55		       e0		      BYTE.b	%11100000
     71  4b56		       60		      BYTE.b	%01100000
     72  4b57		       00		      BYTE.b	%00000000
     73  4b58		       ee		      BYTE.b	%11101110
     74  4b59
     75  4b59				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     76  4b59				  -	      align	256
     77  4b59					      endif
     78  4b59
     79  4b59				   bmp_48x2_1_02
     80  4b59		       00		      BYTE.b	%00000000
     81  4b5a		       3d		      BYTE.b	%00111101
     82  4b5b		       05		      BYTE.b	%00000101
     83  4b5c		       05		      BYTE.b	%00000101
     84  4b5d		       19		      BYTE.b	%00011001
     85  4b5e		       21		      BYTE.b	%00100001
     86  4b5f		       20		      BYTE.b	%00100000
     87  4b60		       3c		      BYTE.b	%00111100
     88  4b61		       00		      BYTE.b	%00000000
     89  4b62		       21		      BYTE.b	%00100001
     90  4b63
     91  4b63				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     92  4b63				  -	      align	256
     93  4b63					      endif
     94  4b63
     95  4b63				   bmp_48x2_1_03
     96  4b63		       00		      BYTE.b	%00000000
     97  4b64		       29		      BYTE.b	%00101001
     98  4b65		       2f		      BYTE.b	%00101111
     99  4b66		       29		      BYTE.b	%00101001
    100  4b67		       69		      BYTE.b	%01101001
    101  4b68		       a6		      BYTE.b	%10100110
    102  4b69		       00		      BYTE.b	%00000000
    103  4b6a		       00		      BYTE.b	%00000000
    104  4b6b		       00		      BYTE.b	%00000000
    105  4b6c		       a6		      BYTE.b	%10100110
    106  4b6d
    107  4b6d				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    108  4b6d				  -	      align	256
    109  4b6d					      endif
    110  4b6d
    111  4b6d				   bmp_48x2_1_04
    112  4b6d		       00		      BYTE.b	%00000000
    113  4b6e		       57		      BYTE.b	%01010111
    114  4b6f		       54		      BYTE.b	%01010100
    115  4b70		       66		      BYTE.b	%01100110
    116  4b71		       54		      BYTE.b	%01010100
    117  4b72		       57		      BYTE.b	%01010111
    118  4b73		       40		      BYTE.b	%01000000
    119  4b74		       00		      BYTE.b	%00000000
    120  4b75		       00		      BYTE.b	%00000000
    121  4b76		       57		      BYTE.b	%01010111
    122  4b77
    123  4b77				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    124  4b77				  -	      align	256
    125  4b77					      endif
    126  4b77
    127  4b77				   bmp_48x2_1_05
    128  4b77		       00		      BYTE.b	%00000000
    129  4b78		       20		      BYTE.b	%00100000
    130  4b79		       20		      BYTE.b	%00100000
    131  4b7a		       00		      BYTE.b	%00000000
    132  4b7b		       20		      BYTE.b	%00100000
    133  4b7c		       20		      BYTE.b	%00100000
    134  4b7d		       20		      BYTE.b	%00100000
    135  4b7e		       20		      BYTE.b	%00100000
    136  4b7f		       00		      BYTE.b	%00000000
    137  4b80		       20		      BYTE.b	%00100000
    138  4b81
------- FILE titlescreen/asm/titlescreen.asm
    245  4b81					      endif
    246  4b81				  -	      ifconst	mk_48x2_2_on
    247  4b81				  -	      include	"titlescreen/48x2_2_image.asm"
    248  4b81					      endif
    249  4b81				  -	      ifconst	mk_48x2_3_on
    250  4b81				  -	      include	"titlescreen/48x2_3_image.asm"
    251  4b81					      endif
    252  4b81				  -	      ifconst	mk_48x2_4_on
    253  4b81				  -	      include	"titlescreen/48x2_4_image.asm"
    254  4b81					      endif
    255  4b81				  -	      ifconst	mk_48x2_5_on
    256  4b81				  -	      include	"titlescreen/48x2_5_image.asm"
    257  4b81					      endif
    258  4b81				  -	      ifconst	mk_48x2_6_on
    259  4b81				  -	      include	"titlescreen/48x2_6_image.asm"
    260  4b81					      endif
    261  4b81				  -	      ifconst	mk_48x2_7_on
    262  4b81				  -	      include	"titlescreen/48x2_7_image.asm"
    263  4b81					      endif
    264  4b81
    265  4b81				  -	      ifconst	mk_48x2_8_on
    266  4b81				  -	      include	"titlescreen/48x2_8_image.asm"
    267  4b81					      endif
    268  4b81
    269  4b81
    270  4b81				  -	      ifconst	mk_96x2_1_on
    271  4b81				  -	      include	"titlescreen/96x2_1_image.asm"
    272  4b81					      endif
    273  4b81				  -	      ifconst	mk_96x2_2_on
    274  4b81				  -	      include	"titlescreen/96x2_2_image.asm"
    275  4b81					      endif
    276  4b81				  -	      ifconst	mk_96x2_3_on
    277  4b81				  -	      include	"titlescreen/96x2_3_image.asm"
    278  4b81					      endif
    279  4b81				  -	      ifconst	mk_96x2_4_on
    280  4b81				  -	      include	"titlescreen/96x2_4_image.asm"
    281  4b81					      endif
    282  4b81				  -	      ifconst	mk_96x2_5_on
    283  4b81				  -	      include	"titlescreen/96x2_5_image.asm"
    284  4b81					      endif
    285  4b81				  -	      ifconst	mk_96x2_6_on
    286  4b81				  -	      include	"titlescreen/96x2_6_image.asm"
    287  4b81					      endif
    288  4b81				  -	      ifconst	mk_96x2_7_on
    289  4b81				  -	      include	"titlescreen/96x2_7_image.asm"
    290  4b81					      endif
    291  4b81				  -	      ifconst	mk_96x2_8_on
    292  4b81				  -	      include	"titlescreen/96x2_8_image.asm"
    293  4b81					      endif
    294  4b81
    295  4b81				  -	      ifconst	mk_player_on
    296  4b81				  -	      include	"titlescreen/player_image.asm"
    297  4b81					      endif
    298  4b81
    299  4b81					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  4b81					      include	"titlescreen/score_image.asm"
      1  4b81							; feel free to modify the score graphics - just keep each digit 8 high
      2  4b81							; if you're looking to want to modify any one font, pick on the 
      3  4b81
      4  4b81				  -	      ifnconst	scorecolor
      5  4b81				  -scorecolor
      6  4b81					      endif
      7  4b81							; ** change this value for a different scorecolor under DPC+
      8  4b81							;    for other kernels, just use the scorecolor variable
      9  4b81		       0f		      .byte.b	$0f
     10  4b82
     11  4b82				  -	      ifnconst	NOFONT
     12  4b82				  -NOFONT     =	0
     13  4b82					      endif
     14  4b82				  -	      ifnconst	STOCK
     15  4b82				  -STOCK      =	1	;_FONTNAME
     16  4b82					      endif
     17  4b82				  -	      ifnconst	NEWCENTURY
     18  4b82				  -NEWCENTURY =	2	;_FONTNAME
     19  4b82					      endif
     20  4b82				  -	      ifnconst	WHIMSEY
     21  4b82				  -WHIMSEY    =	3	;_FONTNAME
     22  4b82					      endif
     23  4b82				  -	      ifnconst	ALARMCLOCK
     24  4b82				  -ALARMCLOCK =	4	;_FONTNAME
     25  4b82					      endif
     26  4b82				  -	      ifnconst	HANDWRITTEN
     27  4b82				  -HANDWRITTEN =	5	;_FONTNAME
     28  4b82					      endif
     29  4b82				  -	      ifnconst	INTERRUPTED
     30  4b82				  -INTERRUPTED =	6	;_FONTNAME
     31  4b82					      endif
     32  4b82				  -	      ifnconst	TINY
     33  4b82				  -TINY       =	7	;_FONTNAME
     34  4b82					      endif
     35  4b82				  -	      ifnconst	RETROPUTER
     36  4b82				  -RETROPUTER =	8	;_FONTNAME
     37  4b82					      endif
     38  4b82				  -	      ifnconst	CURVES
     39  4b82				  -CURVES     =	9	;_FONTNAME
     40  4b82					      endif
     41  4b82				  -	      ifnconst	HUSKY
     42  4b82				  -HUSKY      =	10	;_FONTNAME
     43  4b82					      endif
     44  4b82				  -	      ifnconst	SNAKE
     45  4b82				  -SNAKE      =	11	;_FONTNAME
     46  4b82					      endif
     47  4b82				  -	      ifnconst	PLOK
     48  4b82				  -PLOK       =	13	;_FONTNAME
     49  4b82					      endif
     50  4b82
     51  4b82				  -	      ifnconst	SYMBOLS
     52  4b82				  -SYMBOLS    =	0	;_FONTNAME 
     53  4b82					      endif
     54  4b82
     55  4b82							; ### setup some defaults
     56  4b82				  -	      ifnconst	fontstyle
     57  4b82				  -fontstyle  =	STOCK
     58  4b82					      endif
     59  4b82
     60  4b82							;fix up the table alignment, if necessary
     61  4b82				  -	      if	>. != >[.+81]
     62  4b82				  -	      align	256
     63  4b82					      endif
     64  4b82
     65  4b82
     66  4b82				   miniscoretable
     67  4b82
     68  4b82				  -	      if	fontstyle == STOCK
     69  4b82				  -
     70  4b82				  -			;byte %00000000 ; STOCK
     71  4b82				  -
     72  4b82				  -	      .byte	%00111100	; STOCK
     73  4b82				  -	      .byte	%01100110	; STOCK
     74  4b82				  -	      .byte	%01100110	; STOCK
     75  4b82				  -	      .byte	%01100110	; STOCK
     76  4b82				  -	      .byte	%01100110	; STOCK
     77  4b82				  -	      .byte	%01100110	; STOCK
     78  4b82				  -	      .byte	%01100110	; STOCK
     79  4b82				  -	      .byte	%00111100	; STOCK
     80  4b82				  -
     81  4b82				  -			;byte %00000000 ; STOCK
     82  4b82				  -
     83  4b82				  -	      .byte	%01111110	; STOCK
     84  4b82				  -	      .byte	%00011000	; STOCK
     85  4b82				  -	      .byte	%00011000	; STOCK
     86  4b82				  -	      .byte	%00011000	; STOCK
     87  4b82				  -	      .byte	%00011000	; STOCK
     88  4b82				  -	      .byte	%00111000	; STOCK
     89  4b82				  -	      .byte	%00011000	; STOCK
     90  4b82				  -	      .byte	%00001000	; STOCK
     91  4b82				  -
     92  4b82				  -			;byte %00000000 ; STOCK
     93  4b82				  -
     94  4b82				  -	      .byte	%01111110	; STOCK
     95  4b82				  -	      .byte	%01100000	; STOCK
     96  4b82				  -	      .byte	%01100000	; STOCK
     97  4b82				  -	      .byte	%00111100	; STOCK
     98  4b82				  -	      .byte	%00000110	; STOCK
     99  4b82				  -	      .byte	%00000110	; STOCK
    100  4b82				  -	      .byte	%01000110	; STOCK
    101  4b82				  -	      .byte	%00111100	; STOCK
    102  4b82				  -
    103  4b82				  -			;byte %00000000 ; STOCK
    104  4b82				  -
    105  4b82				  -	      .byte	%00111100	; STOCK
    106  4b82				  -	      .byte	%01000110	; STOCK
    107  4b82				  -	      .byte	%00000110	; STOCK
    108  4b82				  -	      .byte	%00000110	; STOCK
    109  4b82				  -	      .byte	%00011100	; STOCK
    110  4b82				  -	      .byte	%00000110	; STOCK
    111  4b82				  -	      .byte	%01000110	; STOCK
    112  4b82				  -	      .byte	%00111100	; STOCK
    113  4b82				  -
    114  4b82				  -			;byte %00000000 ; STOCK
    115  4b82				  -
    116  4b82				  -	      .byte	%00001100	; STOCK
    117  4b82				  -	      .byte	%00001100	; STOCK
    118  4b82				  -	      .byte	%01111110	; STOCK
    119  4b82				  -	      .byte	%01001100	; STOCK
    120  4b82				  -	      .byte	%01001100	; STOCK
    121  4b82				  -	      .byte	%00101100	; STOCK
    122  4b82				  -	      .byte	%00011100	; STOCK
    123  4b82				  -	      .byte	%00001100	; STOCK
    124  4b82				  -
    125  4b82				  -			;byte %00000000 ; STOCK
    126  4b82				  -
    127  4b82				  -	      .byte	%00111100	; STOCK
    128  4b82				  -	      .byte	%01000110	; STOCK
    129  4b82				  -	      .byte	%00000110	; STOCK
    130  4b82				  -	      .byte	%00000110	; STOCK
    131  4b82				  -	      .byte	%00111100	; STOCK
    132  4b82				  -	      .byte	%01100000	; STOCK
    133  4b82				  -	      .byte	%01100000	; STOCK
    134  4b82				  -	      .byte	%01111110	; STOCK
    135  4b82				  -
    136  4b82				  -			;byte %00000000 ; STOCK
    137  4b82				  -
    138  4b82				  -	      .byte	%00111100	; STOCK
    139  4b82				  -	      .byte	%01100110	; STOCK
    140  4b82				  -	      .byte	%01100110	; STOCK
    141  4b82				  -	      .byte	%01100110	; STOCK
    142  4b82				  -	      .byte	%01111100	; STOCK
    143  4b82				  -	      .byte	%01100000	; STOCK
    144  4b82				  -	      .byte	%01100010	; STOCK
    145  4b82				  -	      .byte	%00111100	; STOCK
    146  4b82				  -
    147  4b82				  -			;byte %00000000 ; STOCK
    148  4b82				  -
    149  4b82				  -	      .byte	%00110000	; STOCK
    150  4b82				  -	      .byte	%00110000	; STOCK
    151  4b82				  -	      .byte	%00110000	; STOCK
    152  4b82				  -	      .byte	%00011000	; STOCK
    153  4b82				  -	      .byte	%00001100	; STOCK
    154  4b82				  -	      .byte	%00000110	; STOCK
    155  4b82				  -	      .byte	%01000010	; STOCK
    156  4b82				  -	      .byte	%00111110	; STOCK
    157  4b82				  -
    158  4b82				  -			;byte %00000000 ; STOCK
    159  4b82				  -
    160  4b82				  -	      .byte	%00111100	; STOCK
    161  4b82				  -	      .byte	%01100110	; STOCK
    162  4b82				  -	      .byte	%01100110	; STOCK
    163  4b82				  -	      .byte	%01100110	; STOCK
    164  4b82				  -	      .byte	%00111100	; STOCK
    165  4b82				  -	      .byte	%01100110	; STOCK
    166  4b82				  -	      .byte	%01100110	; STOCK
    167  4b82				  -	      .byte	%00111100	; STOCK
    168  4b82				  -
    169  4b82				  -			;byte %00000000 ; STOCK
    170  4b82				  -
    171  4b82				  -	      .byte	%00111100	; STOCK
    172  4b82				  -	      .byte	%01000110	; STOCK
    173  4b82				  -	      .byte	%00000110	; STOCK
    174  4b82				  -	      .byte	%00111110	; STOCK
    175  4b82				  -	      .byte	%01100110	; STOCK
    176  4b82				  -	      .byte	%01100110	; STOCK
    177  4b82				  -	      .byte	%01100110	; STOCK
    178  4b82				  -	      .byte	%00111100	; STOCK
    179  4b82				  -
    180  4b82					      endif		; STOCK
    181  4b82
    182  4b82				  -	      if	fontstyle == NEWCENTURY
    183  4b82				  -			;byte %00000000 ; NEWCENTURY
    184  4b82				  -
    185  4b82				  -	      .byte	%00111100	; NEWCENTURY
    186  4b82				  -	      .byte	%01000010	; NEWCENTURY
    187  4b82				  -	      .byte	%01000010	; NEWCENTURY
    188  4b82				  -	      .byte	%01000010	; NEWCENTURY
    189  4b82				  -	      .byte	%00100100	; NEWCENTURY
    190  4b82				  -	      .byte	%00100100	; NEWCENTURY
    191  4b82				  -	      .byte	%00100100	; NEWCENTURY
    192  4b82				  -	      .byte	%00011000	; NEWCENTURY
    193  4b82				  -
    194  4b82				  -			;byte %00000000 ; NEWCENTURY
    195  4b82				  -
    196  4b82				  -	      .byte	%00001000	; NEWCENTURY
    197  4b82				  -	      .byte	%00001000	; NEWCENTURY
    198  4b82				  -	      .byte	%00001000	; NEWCENTURY
    199  4b82				  -	      .byte	%00001000	; NEWCENTURY
    200  4b82				  -	      .byte	%00001000	; NEWCENTURY
    201  4b82				  -	      .byte	%00001000	; NEWCENTURY
    202  4b82				  -	      .byte	%00001000	; NEWCENTURY
    203  4b82				  -	      .byte	%00001000	; NEWCENTURY
    204  4b82				  -
    205  4b82				  -			;byte %00000000 ; NEWCENTURY
    206  4b82				  -
    207  4b82				  -	      .byte	%01111110	; NEWCENTURY
    208  4b82				  -	      .byte	%01000000	; NEWCENTURY
    209  4b82				  -	      .byte	%01000000	; NEWCENTURY
    210  4b82				  -	      .byte	%00100000	; NEWCENTURY
    211  4b82				  -	      .byte	%00011100	; NEWCENTURY
    212  4b82				  -	      .byte	%00000010	; NEWCENTURY
    213  4b82				  -	      .byte	%00000010	; NEWCENTURY
    214  4b82				  -	      .byte	%00011100	; NEWCENTURY
    215  4b82				  -
    216  4b82				  -			;byte %00000000 ; NEWCENTURY
    217  4b82				  -
    218  4b82				  -	      .byte	%01111100	; NEWCENTURY
    219  4b82				  -	      .byte	%00000010	; NEWCENTURY
    220  4b82				  -	      .byte	%00000010	; NEWCENTURY
    221  4b82				  -	      .byte	%00000010	; NEWCENTURY
    222  4b82				  -	      .byte	%00111100	; NEWCENTURY
    223  4b82				  -	      .byte	%00000010	; NEWCENTURY
    224  4b82				  -	      .byte	%00000010	; NEWCENTURY
    225  4b82				  -	      .byte	%00011100	; NEWCENTURY
    226  4b82				  -
    227  4b82				  -			;byte %00000000 ; NEWCENTURY
    228  4b82				  -
    229  4b82				  -	      .byte	%00000010	; NEWCENTURY
    230  4b82				  -	      .byte	%00000010	; NEWCENTURY
    231  4b82				  -	      .byte	%00000010	; NEWCENTURY
    232  4b82				  -	      .byte	%00111110	; NEWCENTURY
    233  4b82				  -	      .byte	%00100010	; NEWCENTURY
    234  4b82				  -	      .byte	%00100010	; NEWCENTURY
    235  4b82				  -	      .byte	%00010010	; NEWCENTURY
    236  4b82				  -	      .byte	%00010010	; NEWCENTURY
    237  4b82				  -
    238  4b82				  -			;byte %00000000 ; NEWCENTURY
    239  4b82				  -
    240  4b82				  -	      .byte	%01111100	; NEWCENTURY
    241  4b82				  -	      .byte	%00000010	; NEWCENTURY
    242  4b82				  -	      .byte	%00000010	; NEWCENTURY
    243  4b82				  -	      .byte	%00000010	; NEWCENTURY
    244  4b82				  -	      .byte	%01111100	; NEWCENTURY
    245  4b82				  -	      .byte	%01000000	; NEWCENTURY
    246  4b82				  -	      .byte	%01000000	; NEWCENTURY
    247  4b82				  -	      .byte	%01111000	; NEWCENTURY
    248  4b82				  -
    249  4b82				  -			;byte %00000000 ; NEWCENTURY
    250  4b82				  -
    251  4b82				  -	      .byte	%00111100	; NEWCENTURY
    252  4b82				  -	      .byte	%01000010	; NEWCENTURY
    253  4b82				  -	      .byte	%01000010	; NEWCENTURY
    254  4b82				  -	      .byte	%01000010	; NEWCENTURY
    255  4b82				  -	      .byte	%01111100	; NEWCENTURY
    256  4b82				  -	      .byte	%01000000	; NEWCENTURY
    257  4b82				  -	      .byte	%01000000	; NEWCENTURY
    258  4b82				  -	      .byte	%00110000	; NEWCENTURY
    259  4b82				  -
    260  4b82				  -			;byte %00000000 ; NEWCENTURY
    261  4b82				  -
    262  4b82				  -	      .byte	%00010000	; NEWCENTURY
    263  4b82				  -	      .byte	%00010000	; NEWCENTURY
    264  4b82				  -	      .byte	%00001000	; NEWCENTURY
    265  4b82				  -	      .byte	%00001000	; NEWCENTURY
    266  4b82				  -	      .byte	%00000100	; NEWCENTURY
    267  4b82				  -	      .byte	%00000100	; NEWCENTURY
    268  4b82				  -	      .byte	%00000010	; NEWCENTURY
    269  4b82				  -	      .byte	%00011110	; NEWCENTURY
    270  4b82				  -
    271  4b82				  -			;byte %00000000 ; NEWCENTURY
    272  4b82				  -
    273  4b82				  -	      .byte	%00111100	; NEWCENTURY
    274  4b82				  -	      .byte	%01000010	; NEWCENTURY
    275  4b82				  -	      .byte	%01000010	; NEWCENTURY
    276  4b82				  -	      .byte	%01000010	; NEWCENTURY
    277  4b82				  -	      .byte	%00111100	; NEWCENTURY
    278  4b82				  -	      .byte	%00100100	; NEWCENTURY
    279  4b82				  -	      .byte	%00100100	; NEWCENTURY
    280  4b82				  -	      .byte	%00011000	; NEWCENTURY
    281  4b82				  -
    282  4b82				  -			;byte %00000000 ; NEWCENTURY
    283  4b82				  -
    284  4b82				  -	      .byte	%00111100	; NEWCENTURY
    285  4b82				  -	      .byte	%00000010	; NEWCENTURY
    286  4b82				  -	      .byte	%00000010	; NEWCENTURY
    287  4b82				  -	      .byte	%00000010	; NEWCENTURY
    288  4b82				  -	      .byte	%00001110	; NEWCENTURY
    289  4b82				  -	      .byte	%00010010	; NEWCENTURY
    290  4b82				  -	      .byte	%00010010	; NEWCENTURY
    291  4b82				  -	      .byte	%00001100	; NEWCENTURY
    292  4b82				  -
    293  4b82					      endif		; NEWCENTURY
    294  4b82
    295  4b82				  -	      if	fontstyle == WHIMSEY
    296  4b82				  -			;byte %00000000 ; WHIMSEY
    297  4b82				  -
    298  4b82				  -	      .byte	%00111100	; WHIMSEY
    299  4b82				  -	      .byte	%01111110	; WHIMSEY
    300  4b82				  -	      .byte	%01111110	; WHIMSEY
    301  4b82				  -	      .byte	%01111110	; WHIMSEY
    302  4b82				  -	      .byte	%01110110	; WHIMSEY
    303  4b82				  -	      .byte	%01110110	; WHIMSEY
    304  4b82				  -	      .byte	%01110110	; WHIMSEY
    305  4b82				  -	      .byte	%00111100	; WHIMSEY
    306  4b82				  -
    307  4b82				  -			;byte %00000000 ; WHIMSEY
    308  4b82				  -
    309  4b82				  -	      .byte	%01111110	; WHIMSEY
    310  4b82				  -	      .byte	%01111110	; WHIMSEY
    311  4b82				  -	      .byte	%01111110	; WHIMSEY
    312  4b82				  -	      .byte	%00011000	; WHIMSEY
    313  4b82				  -	      .byte	%00011000	; WHIMSEY
    314  4b82				  -	      .byte	%00011000	; WHIMSEY
    315  4b82				  -	      .byte	%01111000	; WHIMSEY
    316  4b82				  -	      .byte	%00011000	; WHIMSEY
    317  4b82				  -
    318  4b82				  -			;byte %00000000 ; WHIMSEY
    319  4b82				  -
    320  4b82				  -	      .byte	%01111110	; WHIMSEY
    321  4b82				  -	      .byte	%01111110	; WHIMSEY
    322  4b82				  -	      .byte	%01111110	; WHIMSEY
    323  4b82				  -	      .byte	%01111000	; WHIMSEY
    324  4b82				  -	      .byte	%00111100	; WHIMSEY
    325  4b82				  -	      .byte	%00001110	; WHIMSEY
    326  4b82				  -	      .byte	%01100110	; WHIMSEY
    327  4b82				  -	      .byte	%00111100	; WHIMSEY
    328  4b82				  -
    329  4b82				  -			;byte %00000000 ; WHIMSEY
    330  4b82				  -
    331  4b82				  -	      .byte	%00111100	; WHIMSEY
    332  4b82				  -	      .byte	%01111110	; WHIMSEY
    333  4b82				  -	      .byte	%01111110	; WHIMSEY
    334  4b82				  -	      .byte	%01101110	; WHIMSEY
    335  4b82				  -	      .byte	%00001110	; WHIMSEY
    336  4b82				  -	      .byte	%00111100	; WHIMSEY
    337  4b82				  -	      .byte	%00011100	; WHIMSEY
    338  4b82				  -	      .byte	%01111110	; WHIMSEY
    339  4b82				  -
    340  4b82				  -			;byte %00000000 ; WHIMSEY
    341  4b82				  -
    342  4b82				  -	      .byte	%00011100	; WHIMSEY
    343  4b82				  -	      .byte	%00011100	; WHIMSEY
    344  4b82				  -	      .byte	%01111110	; WHIMSEY
    345  4b82				  -	      .byte	%01011100	; WHIMSEY
    346  4b82				  -	      .byte	%01011100	; WHIMSEY
    347  4b82				  -	      .byte	%00011100	; WHIMSEY
    348  4b82				  -	      .byte	%00011100	; WHIMSEY
    349  4b82				  -	      .byte	%00011100	; WHIMSEY
    350  4b82				  -
    351  4b82				  -			;byte %00000000 ; WHIMSEY
    352  4b82				  -
    353  4b82				  -	      .byte	%00111100	; WHIMSEY
    354  4b82				  -	      .byte	%01111110	; WHIMSEY
    355  4b82				  -	      .byte	%01111110	; WHIMSEY
    356  4b82				  -	      .byte	%01101110	; WHIMSEY
    357  4b82				  -	      .byte	%00001110	; WHIMSEY
    358  4b82				  -	      .byte	%01111100	; WHIMSEY
    359  4b82				  -	      .byte	%01110000	; WHIMSEY
    360  4b82				  -	      .byte	%01111110	; WHIMSEY
    361  4b82				  -
    362  4b82				  -			;byte %00000000 ; WHIMSEY
    363  4b82				  -
    364  4b82				  -	      .byte	%00111100	; WHIMSEY
    365  4b82				  -	      .byte	%01111110	; WHIMSEY
    366  4b82				  -	      .byte	%01111110	; WHIMSEY
    367  4b82				  -	      .byte	%01110110	; WHIMSEY
    368  4b82				  -	      .byte	%01110110	; WHIMSEY
    369  4b82				  -	      .byte	%01111100	; WHIMSEY
    370  4b82				  -	      .byte	%01110000	; WHIMSEY
    371  4b82				  -	      .byte	%00111110	; WHIMSEY
    372  4b82				  -
    373  4b82				  -			;byte %00000000 ; WHIMSEY
    374  4b82				  -
    375  4b82				  -	      .byte	%01111000	; WHIMSEY
    376  4b82				  -	      .byte	%01111000	; WHIMSEY
    377  4b82				  -	      .byte	%01111000	; WHIMSEY
    378  4b82				  -	      .byte	%00111100	; WHIMSEY
    379  4b82				  -	      .byte	%00011100	; WHIMSEY
    380  4b82				  -	      .byte	%00001110	; WHIMSEY
    381  4b82				  -	      .byte	%00001110	; WHIMSEY
    382  4b82				  -	      .byte	%01111110	; WHIMSEY
    383  4b82				  -
    384  4b82				  -			;byte %00000000 ; WHIMSEY
    385  4b82				  -
    386  4b82				  -	      .byte	%00111100	; WHIMSEY
    387  4b82				  -	      .byte	%01111110	; WHIMSEY
    388  4b82				  -	      .byte	%01111110	; WHIMSEY
    389  4b82				  -	      .byte	%01110110	; WHIMSEY
    390  4b82				  -	      .byte	%01110110	; WHIMSEY
    391  4b82				  -	      .byte	%00111100	; WHIMSEY
    392  4b82				  -	      .byte	%01110110	; WHIMSEY
    393  4b82				  -	      .byte	%00111100	; WHIMSEY
    394  4b82				  -
    395  4b82				  -			;byte %00000000 ; WHIMSEY
    396  4b82				  -
    397  4b82				  -	      .byte	%00111100	; WHIMSEY
    398  4b82				  -	      .byte	%01111110	; WHIMSEY
    399  4b82				  -	      .byte	%01111110	; WHIMSEY
    400  4b82				  -	      .byte	%01110110	; WHIMSEY
    401  4b82				  -	      .byte	%00000110	; WHIMSEY
    402  4b82				  -	      .byte	%00111110	; WHIMSEY
    403  4b82				  -	      .byte	%01110110	; WHIMSEY
    404  4b82				  -	      .byte	%00111100	; WHIMSEY
    405  4b82				  -
    406  4b82					      endif		; WHIMSEY
    407  4b82
    408  4b82					      if	fontstyle == ALARMCLOCK
    409  4b82
    410  4b82							;byte %00000000 ; ALARMCLOCK
    411  4b82
    412  4b82		       3c		      .byte.b	%00111100	; ALARMCLOCK
    413  4b83		       42		      .byte.b	%01000010	; ALARMCLOCK
    414  4b84		       42		      .byte.b	%01000010	; ALARMCLOCK
    415  4b85		       42		      .byte.b	%01000010	; ALARMCLOCK
    416  4b86		       00		      .byte.b	%00000000	; ALARMCLOCK
    417  4b87		       42		      .byte.b	%01000010	; ALARMCLOCK
    418  4b88		       42		      .byte.b	%01000010	; ALARMCLOCK
    419  4b89		       3c		      .byte.b	%00111100	; ALARMCLOCK
    420  4b8a
    421  4b8a							;byte %00000000 ; ALARMCLOCK
    422  4b8a
    423  4b8a		       00		      .byte.b	%00000000	; ALARMCLOCK
    424  4b8b		       02		      .byte.b	%00000010	; ALARMCLOCK
    425  4b8c		       02		      .byte.b	%00000010	; ALARMCLOCK
    426  4b8d		       02		      .byte.b	%00000010	; ALARMCLOCK
    427  4b8e		       00		      .byte.b	%00000000	; ALARMCLOCK
    428  4b8f		       02		      .byte.b	%00000010	; ALARMCLOCK
    429  4b90		       02		      .byte.b	%00000010	; ALARMCLOCK
    430  4b91		       00		      .byte.b	%00000000	; ALARMCLOCK
    431  4b92
    432  4b92							;byte %00000000 ; ALARMCLOCK
    433  4b92
    434  4b92		       3c		      .byte.b	%00111100	; ALARMCLOCK
    435  4b93		       40		      .byte.b	%01000000	; ALARMCLOCK
    436  4b94		       40		      .byte.b	%01000000	; ALARMCLOCK
    437  4b95		       40		      .byte.b	%01000000	; ALARMCLOCK
    438  4b96		       3c		      .byte.b	%00111100	; ALARMCLOCK
    439  4b97		       02		      .byte.b	%00000010	; ALARMCLOCK
    440  4b98		       02		      .byte.b	%00000010	; ALARMCLOCK
    441  4b99		       3c		      .byte.b	%00111100	; ALARMCLOCK
    442  4b9a
    443  4b9a							;byte %00000000 ; ALARMCLOCK
    444  4b9a
    445  4b9a		       3c		      .byte.b	%00111100	; ALARMCLOCK
    446  4b9b		       02		      .byte.b	%00000010	; ALARMCLOCK
    447  4b9c		       02		      .byte.b	%00000010	; ALARMCLOCK
    448  4b9d		       02		      .byte.b	%00000010	; ALARMCLOCK
    449  4b9e		       3c		      .byte.b	%00111100	; ALARMCLOCK
    450  4b9f		       02		      .byte.b	%00000010	; ALARMCLOCK
    451  4ba0		       02		      .byte.b	%00000010	; ALARMCLOCK
    452  4ba1		       3c		      .byte.b	%00111100	; ALARMCLOCK
    453  4ba2
    454  4ba2							;byte %00000000 ; ALARMCLOCK
    455  4ba2
    456  4ba2		       00		      .byte.b	%00000000	; ALARMCLOCK
    457  4ba3		       02		      .byte.b	%00000010	; ALARMCLOCK
    458  4ba4		       02		      .byte.b	%00000010	; ALARMCLOCK
    459  4ba5		       02		      .byte.b	%00000010	; ALARMCLOCK
    460  4ba6		       3c		      .byte.b	%00111100	; ALARMCLOCK
    461  4ba7		       42		      .byte.b	%01000010	; ALARMCLOCK
    462  4ba8		       42		      .byte.b	%01000010	; ALARMCLOCK
    463  4ba9		       00		      .byte.b	%00000000	; ALARMCLOCK
    464  4baa
    465  4baa							;byte %00000000 ; ALARMCLOCK
    466  4baa
    467  4baa		       3c		      .byte.b	%00111100	; ALARMCLOCK
    468  4bab		       02		      .byte.b	%00000010	; ALARMCLOCK
    469  4bac		       02		      .byte.b	%00000010	; ALARMCLOCK
    470  4bad		       02		      .byte.b	%00000010	; ALARMCLOCK
    471  4bae		       3c		      .byte.b	%00111100	; ALARMCLOCK
    472  4baf		       40		      .byte.b	%01000000	; ALARMCLOCK
    473  4bb0		       40		      .byte.b	%01000000	; ALARMCLOCK
    474  4bb1		       3c		      .byte.b	%00111100	; ALARMCLOCK
    475  4bb2
    476  4bb2							;byte %00000000 ; ALARMCLOCK
    477  4bb2
    478  4bb2		       3c		      .byte.b	%00111100	; ALARMCLOCK
    479  4bb3		       42		      .byte.b	%01000010	; ALARMCLOCK
    480  4bb4		       42		      .byte.b	%01000010	; ALARMCLOCK
    481  4bb5		       42		      .byte.b	%01000010	; ALARMCLOCK
    482  4bb6		       3c		      .byte.b	%00111100	; ALARMCLOCK
    483  4bb7		       40		      .byte.b	%01000000	; ALARMCLOCK
    484  4bb8		       40		      .byte.b	%01000000	; ALARMCLOCK
    485  4bb9		       3c		      .byte.b	%00111100	; ALARMCLOCK
    486  4bba
    487  4bba							;byte %00000000 ; ALARMCLOCK
    488  4bba
    489  4bba		       00		      .byte.b	%00000000	; ALARMCLOCK
    490  4bbb		       02		      .byte.b	%00000010	; ALARMCLOCK
    491  4bbc		       02		      .byte.b	%00000010	; ALARMCLOCK
    492  4bbd		       02		      .byte.b	%00000010	; ALARMCLOCK
    493  4bbe		       00		      .byte.b	%00000000	; ALARMCLOCK
    494  4bbf		       02		      .byte.b	%00000010	; ALARMCLOCK
    495  4bc0		       02		      .byte.b	%00000010	; ALARMCLOCK
    496  4bc1		       3c		      .byte.b	%00111100	; ALARMCLOCK
    497  4bc2
    498  4bc2							;byte %00000000 ; ALARMCLOCK
    499  4bc2
    500  4bc2		       3c		      .byte.b	%00111100	; ALARMCLOCK
    501  4bc3		       42		      .byte.b	%01000010	; ALARMCLOCK
    502  4bc4		       42		      .byte.b	%01000010	; ALARMCLOCK
    503  4bc5		       42		      .byte.b	%01000010	; ALARMCLOCK
    504  4bc6		       3c		      .byte.b	%00111100	; ALARMCLOCK
    505  4bc7		       42		      .byte.b	%01000010	; ALARMCLOCK
    506  4bc8		       42		      .byte.b	%01000010	; ALARMCLOCK
    507  4bc9		       3c		      .byte.b	%00111100	; ALARMCLOCK
    508  4bca
    509  4bca							;byte %00000000 ; ALARMCLOCK
    510  4bca
    511  4bca		       3c		      .byte.b	%00111100	; ALARMCLOCK
    512  4bcb		       02		      .byte.b	%00000010	; ALARMCLOCK
    513  4bcc		       02		      .byte.b	%00000010	; ALARMCLOCK
    514  4bcd		       02		      .byte.b	%00000010	; ALARMCLOCK
    515  4bce		       3c		      .byte.b	%00111100	; ALARMCLOCK
    516  4bcf		       42		      .byte.b	%01000010	; ALARMCLOCK
    517  4bd0		       42		      .byte.b	%01000010	; ALARMCLOCK
    518  4bd1		       3c		      .byte.b	%00111100	; ALARMCLOCK
    519  4bd2
    520  4bd2
    521  4bd2					      endif		; ALARMCLOCK
    522  4bd2
    523  4bd2				  -	      if	fontstyle == HANDWRITTEN
    524  4bd2				  -
    525  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    526  4bd2				  -
    527  4bd2				  -	      .byte	%00110000	; HANDWRITTEN
    528  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    529  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    530  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    531  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    532  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    533  4bd2				  -	      .byte	%00010010	; HANDWRITTEN
    534  4bd2				  -	      .byte	%00001100	; HANDWRITTEN
    535  4bd2				  -
    536  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    537  4bd2				  -
    538  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    539  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    540  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    541  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    542  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    543  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    544  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    545  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    546  4bd2				  -
    547  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    548  4bd2				  -
    549  4bd2				  -	      .byte	%01110000	; HANDWRITTEN
    550  4bd2				  -	      .byte	%01001100	; HANDWRITTEN
    551  4bd2				  -	      .byte	%01000000	; HANDWRITTEN
    552  4bd2				  -	      .byte	%00100000	; HANDWRITTEN
    553  4bd2				  -	      .byte	%00011000	; HANDWRITTEN
    554  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    555  4bd2				  -	      .byte	%00100010	; HANDWRITTEN
    556  4bd2				  -	      .byte	%00011100	; HANDWRITTEN
    557  4bd2				  -
    558  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    559  4bd2				  -
    560  4bd2				  -	      .byte	%00110000	; HANDWRITTEN
    561  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    562  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    563  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    564  4bd2				  -	      .byte	%00011000	; HANDWRITTEN
    565  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    566  4bd2				  -	      .byte	%00100010	; HANDWRITTEN
    567  4bd2				  -	      .byte	%00011100	; HANDWRITTEN
    568  4bd2				  -
    569  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    570  4bd2				  -
    571  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    572  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    573  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    574  4bd2				  -	      .byte	%01111000	; HANDWRITTEN
    575  4bd2				  -	      .byte	%01000100	; HANDWRITTEN
    576  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    577  4bd2				  -	      .byte	%00010010	; HANDWRITTEN
    578  4bd2				  -	      .byte	%00000010	; HANDWRITTEN
    579  4bd2				  -
    580  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    581  4bd2				  -
    582  4bd2				  -	      .byte	%00110000	; HANDWRITTEN
    583  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    584  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    585  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    586  4bd2				  -	      .byte	%00011000	; HANDWRITTEN
    587  4bd2				  -	      .byte	%00100000	; HANDWRITTEN
    588  4bd2				  -	      .byte	%00010010	; HANDWRITTEN
    589  4bd2				  -	      .byte	%00001100	; HANDWRITTEN
    590  4bd2				  -
    591  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    592  4bd2				  -
    593  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    594  4bd2				  -	      .byte	%00101000	; HANDWRITTEN
    595  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    596  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    597  4bd2				  -	      .byte	%00011000	; HANDWRITTEN
    598  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    599  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    600  4bd2				  -	      .byte	%00000110	; HANDWRITTEN
    601  4bd2				  -
    602  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    603  4bd2				  -
    604  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    605  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    606  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    607  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    608  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    609  4bd2				  -	      .byte	%00000100	; HANDWRITTEN
    610  4bd2				  -	      .byte	%00110010	; HANDWRITTEN
    611  4bd2				  -	      .byte	%00001110	; HANDWRITTEN
    612  4bd2				  -
    613  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    614  4bd2				  -
    615  4bd2				  -	      .byte	%00110000	; HANDWRITTEN
    616  4bd2				  -	      .byte	%01001000	; HANDWRITTEN
    617  4bd2				  -	      .byte	%01000100	; HANDWRITTEN
    618  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    619  4bd2				  -	      .byte	%00011100	; HANDWRITTEN
    620  4bd2				  -	      .byte	%00010010	; HANDWRITTEN
    621  4bd2				  -	      .byte	%00001010	; HANDWRITTEN
    622  4bd2				  -	      .byte	%00000110	; HANDWRITTEN
    623  4bd2				  -
    624  4bd2				  -			;byte %00000000 ; HANDWRITTEN
    625  4bd2				  -
    626  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    627  4bd2				  -	      .byte	%00010000	; HANDWRITTEN
    628  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    629  4bd2				  -	      .byte	%00001000	; HANDWRITTEN
    630  4bd2				  -	      .byte	%00011100	; HANDWRITTEN
    631  4bd2				  -	      .byte	%00100100	; HANDWRITTEN
    632  4bd2				  -	      .byte	%00010010	; HANDWRITTEN
    633  4bd2				  -	      .byte	%00001100	; HANDWRITTEN
    634  4bd2				  -
    635  4bd2					      endif		; HANDWRITTEN
    636  4bd2
    637  4bd2				  -	      if	fontstyle == INTERRUPTED
    638  4bd2				  -
    639  4bd2				  -			;byte %00000000 ; INTERRUPTED
    640  4bd2				  -
    641  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    642  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    643  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    644  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    645  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    646  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    647  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    648  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    649  4bd2				  -
    650  4bd2				  -			;byte %00000000 ; INTERRUPTED
    651  4bd2				  -
    652  4bd2				  -	      .byte	%00111100	; INTERRUPTED
    653  4bd2				  -	      .byte	%00000000	; INTERRUPTED
    654  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    655  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    656  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    657  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    658  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    659  4bd2				  -	      .byte	%00111000	; INTERRUPTED
    660  4bd2				  -
    661  4bd2				  -			;byte %00000000 ; INTERRUPTED
    662  4bd2				  -
    663  4bd2				  -	      .byte	%01101110	; INTERRUPTED
    664  4bd2				  -	      .byte	%01100000	; INTERRUPTED
    665  4bd2				  -	      .byte	%00110000	; INTERRUPTED
    666  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    667  4bd2				  -	      .byte	%00001100	; INTERRUPTED
    668  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    669  4bd2				  -	      .byte	%01000110	; INTERRUPTED
    670  4bd2				  -	      .byte	%00111100	; INTERRUPTED
    671  4bd2				  -
    672  4bd2				  -			;byte %00000000 ; INTERRUPTED
    673  4bd2				  -
    674  4bd2				  -	      .byte	%01111100	; INTERRUPTED
    675  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    676  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    677  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    678  4bd2				  -	      .byte	%01110110	; INTERRUPTED
    679  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    680  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    681  4bd2				  -	      .byte	%01110100	; INTERRUPTED
    682  4bd2				  -
    683  4bd2				  -			;byte %00000000 ; INTERRUPTED
    684  4bd2				  -
    685  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    686  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    687  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    688  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    689  4bd2				  -	      .byte	%01110110	; INTERRUPTED
    690  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    691  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    692  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    693  4bd2				  -
    694  4bd2				  -			;byte %00000000 ; INTERRUPTED
    695  4bd2				  -
    696  4bd2				  -	      .byte	%01111100	; INTERRUPTED
    697  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    698  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    699  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    700  4bd2				  -	      .byte	%01111100	; INTERRUPTED
    701  4bd2				  -	      .byte	%01100000	; INTERRUPTED
    702  4bd2				  -	      .byte	%01100000	; INTERRUPTED
    703  4bd2				  -	      .byte	%01101110	; INTERRUPTED
    704  4bd2				  -
    705  4bd2				  -			;byte %00000000 ; INTERRUPTED
    706  4bd2				  -
    707  4bd2				  -	      .byte	%00101100	; INTERRUPTED
    708  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    709  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    710  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    711  4bd2				  -	      .byte	%01101100	; INTERRUPTED
    712  4bd2				  -	      .byte	%01100000	; INTERRUPTED
    713  4bd2				  -	      .byte	%00110000	; INTERRUPTED
    714  4bd2				  -	      .byte	%00011100	; INTERRUPTED
    715  4bd2				  -
    716  4bd2				  -			;byte %00000000 ; INTERRUPTED
    717  4bd2				  -
    718  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    719  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    720  4bd2				  -	      .byte	%00011000	; INTERRUPTED
    721  4bd2				  -	      .byte	%00011100	; INTERRUPTED
    722  4bd2				  -	      .byte	%00001110	; INTERRUPTED
    723  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    724  4bd2				  -	      .byte	%00000000	; INTERRUPTED
    725  4bd2				  -	      .byte	%01111110	; INTERRUPTED
    726  4bd2				  -
    727  4bd2				  -			;byte %00000000 ; INTERRUPTED
    728  4bd2				  -
    729  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    730  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    731  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    732  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    733  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    734  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    735  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    736  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    737  4bd2				  -
    738  4bd2				  -			;byte %00000000 ; INTERRUPTED
    739  4bd2				  -
    740  4bd2				  -	      .byte	%00111000	; INTERRUPTED
    741  4bd2				  -	      .byte	%00001100	; INTERRUPTED
    742  4bd2				  -	      .byte	%00000110	; INTERRUPTED
    743  4bd2				  -	      .byte	%00110110	; INTERRUPTED
    744  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    745  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    746  4bd2				  -	      .byte	%01100110	; INTERRUPTED
    747  4bd2				  -	      .byte	%00110100	; INTERRUPTED
    748  4bd2				  -
    749  4bd2					      endif		; INTERRUPTED
    750  4bd2
    751  4bd2
    752  4bd2				  -	      if	fontstyle == TINY
    753  4bd2				  -
    754  4bd2				  -			;byte %00000000 ; TINY
    755  4bd2				  -
    756  4bd2				  -	      .byte	%00000000	; TINY
    757  4bd2				  -	      .byte	%00111000	; TINY
    758  4bd2				  -	      .byte	%00101000	; TINY
    759  4bd2				  -	      .byte	%00101000	; TINY
    760  4bd2				  -	      .byte	%00101000	; TINY
    761  4bd2				  -	      .byte	%00111000	; TINY
    762  4bd2				  -	      .byte	%00000000	; TINY
    763  4bd2				  -	      .byte	%00000000	; TINY
    764  4bd2				  -
    765  4bd2				  -			;byte %00000000 ; TINY
    766  4bd2				  -
    767  4bd2				  -	      .byte	%00000000	; TINY
    768  4bd2				  -	      .byte	%00010000	; TINY
    769  4bd2				  -	      .byte	%00010000	; TINY
    770  4bd2				  -	      .byte	%00010000	; TINY
    771  4bd2				  -	      .byte	%00010000	; TINY
    772  4bd2				  -	      .byte	%00010000	; TINY
    773  4bd2				  -	      .byte	%00000000	; TINY
    774  4bd2				  -	      .byte	%00000000	; TINY
    775  4bd2				  -
    776  4bd2				  -			;byte %00000000 ; TINY
    777  4bd2				  -
    778  4bd2				  -	      .byte	%00000000	; TINY
    779  4bd2				  -	      .byte	%00111000	; TINY
    780  4bd2				  -	      .byte	%00100000	; TINY
    781  4bd2				  -	      .byte	%00111000	; TINY
    782  4bd2				  -	      .byte	%00001000	; TINY
    783  4bd2				  -	      .byte	%00111000	; TINY
    784  4bd2				  -	      .byte	%00000000	; TINY
    785  4bd2				  -	      .byte	%00000000	; TINY
    786  4bd2				  -
    787  4bd2				  -			;byte %00000000 ; TINY
    788  4bd2				  -
    789  4bd2				  -	      .byte	%00000000	; TINY
    790  4bd2				  -	      .byte	%00111000	; TINY
    791  4bd2				  -	      .byte	%00001000	; TINY
    792  4bd2				  -	      .byte	%00111000	; TINY
    793  4bd2				  -	      .byte	%00001000	; TINY
    794  4bd2				  -	      .byte	%00111000	; TINY
    795  4bd2				  -	      .byte	%00000000	; TINY
    796  4bd2				  -	      .byte	%00000000	; TINY
    797  4bd2				  -
    798  4bd2				  -			;byte %00000000 ; TINY
    799  4bd2				  -
    800  4bd2				  -	      .byte	%00000000	; TINY
    801  4bd2				  -	      .byte	%00001000	; TINY
    802  4bd2				  -	      .byte	%00001000	; TINY
    803  4bd2				  -	      .byte	%00111000	; TINY
    804  4bd2				  -	      .byte	%00101000	; TINY
    805  4bd2				  -	      .byte	%00101000	; TINY
    806  4bd2				  -	      .byte	%00000000	; TINY
    807  4bd2				  -	      .byte	%00000000	; TINY
    808  4bd2				  -
    809  4bd2				  -			;byte %00000000 ; TINY
    810  4bd2				  -
    811  4bd2				  -	      .byte	%00000000	; TINY
    812  4bd2				  -	      .byte	%00111000	; TINY
    813  4bd2				  -	      .byte	%00001000	; TINY
    814  4bd2				  -	      .byte	%00111000	; TINY
    815  4bd2				  -	      .byte	%00100000	; TINY
    816  4bd2				  -	      .byte	%00111000	; TINY
    817  4bd2				  -	      .byte	%00000000	; TINY
    818  4bd2				  -	      .byte	%00000000	; TINY
    819  4bd2				  -
    820  4bd2				  -			;byte %00000000 ; TINY
    821  4bd2				  -
    822  4bd2				  -	      .byte	%00000000	; TINY
    823  4bd2				  -	      .byte	%00111000	; TINY
    824  4bd2				  -	      .byte	%00101000	; TINY
    825  4bd2				  -	      .byte	%00111000	; TINY
    826  4bd2				  -	      .byte	%00100000	; TINY
    827  4bd2				  -	      .byte	%00111000	; TINY
    828  4bd2				  -	      .byte	%00000000	; TINY
    829  4bd2				  -	      .byte	%00000000	; TINY
    830  4bd2				  -
    831  4bd2				  -			;byte %00000000 ; TINY
    832  4bd2				  -
    833  4bd2				  -	      .byte	%00000000	; TINY
    834  4bd2				  -	      .byte	%00001000	; TINY
    835  4bd2				  -	      .byte	%00001000	; TINY
    836  4bd2				  -	      .byte	%00001000	; TINY
    837  4bd2				  -	      .byte	%00001000	; TINY
    838  4bd2				  -	      .byte	%00111000	; TINY
    839  4bd2				  -	      .byte	%00000000	; TINY
    840  4bd2				  -	      .byte	%00000000	; TINY
    841  4bd2				  -
    842  4bd2				  -			;byte %00000000 ; TINY
    843  4bd2				  -
    844  4bd2				  -	      .byte	%00000000	; TINY
    845  4bd2				  -	      .byte	%00111000	; TINY
    846  4bd2				  -	      .byte	%00101000	; TINY
    847  4bd2				  -	      .byte	%00111000	; TINY
    848  4bd2				  -	      .byte	%00101000	; TINY
    849  4bd2				  -	      .byte	%00111000	; TINY
    850  4bd2				  -	      .byte	%00000000	; TINY
    851  4bd2				  -	      .byte	%00000000	; TINY
    852  4bd2				  -
    853  4bd2				  -			;byte %00000000 ; TINY
    854  4bd2				  -
    855  4bd2				  -	      .byte	%00000000	; TINY
    856  4bd2				  -	      .byte	%00001000	; TINY
    857  4bd2				  -	      .byte	%00001000	; TINY
    858  4bd2				  -	      .byte	%00111000	; TINY
    859  4bd2				  -	      .byte	%00101000	; TINY
    860  4bd2				  -	      .byte	%00111000	; TINY
    861  4bd2				  -	      .byte	%00000000	; TINY
    862  4bd2				  -	      .byte	%00000000	; TINY
    863  4bd2				  -
    864  4bd2					      endif		; TINY
    865  4bd2
    866  4bd2				  -	      if	fontstyle == RETROPUTER
    867  4bd2				  -
    868  4bd2				  -			;byte %00000000 ; RETROPUTER
    869  4bd2				  -
    870  4bd2				  -	      .byte	%01111110	; RETROPUTER
    871  4bd2				  -	      .byte	%01000110	; RETROPUTER
    872  4bd2				  -	      .byte	%01000110	; RETROPUTER
    873  4bd2				  -	      .byte	%01000110	; RETROPUTER
    874  4bd2				  -	      .byte	%01100010	; RETROPUTER
    875  4bd2				  -	      .byte	%01100010	; RETROPUTER
    876  4bd2				  -	      .byte	%01100010	; RETROPUTER
    877  4bd2				  -	      .byte	%01111110	; RETROPUTER
    878  4bd2				  -
    879  4bd2				  -			;byte %00000000 ; RETROPUTER
    880  4bd2				  -
    881  4bd2				  -	      .byte	%00111000	; RETROPUTER
    882  4bd2				  -	      .byte	%00111000	; RETROPUTER
    883  4bd2				  -	      .byte	%00111000	; RETROPUTER
    884  4bd2				  -	      .byte	%00111000	; RETROPUTER
    885  4bd2				  -	      .byte	%00011000	; RETROPUTER
    886  4bd2				  -	      .byte	%00011000	; RETROPUTER
    887  4bd2				  -	      .byte	%00011000	; RETROPUTER
    888  4bd2				  -	      .byte	%00011000	; RETROPUTER
    889  4bd2				  -
    890  4bd2				  -			;byte %00000000 ; RETROPUTER
    891  4bd2				  -
    892  4bd2				  -	      .byte	%01111110	; RETROPUTER
    893  4bd2				  -	      .byte	%01100000	; RETROPUTER
    894  4bd2				  -	      .byte	%01100000	; RETROPUTER
    895  4bd2				  -	      .byte	%01100000	; RETROPUTER
    896  4bd2				  -	      .byte	%00111110	; RETROPUTER
    897  4bd2				  -	      .byte	%00000010	; RETROPUTER
    898  4bd2				  -	      .byte	%01000010	; RETROPUTER
    899  4bd2				  -	      .byte	%01111110	; RETROPUTER
    900  4bd2				  -
    901  4bd2				  -			;byte %00000000 ; RETROPUTER
    902  4bd2				  -
    903  4bd2				  -	      .byte	%01111110	; RETROPUTER
    904  4bd2				  -	      .byte	%01000110	; RETROPUTER
    905  4bd2				  -	      .byte	%00000110	; RETROPUTER
    906  4bd2				  -	      .byte	%00000110	; RETROPUTER
    907  4bd2				  -	      .byte	%00111110	; RETROPUTER
    908  4bd2				  -	      .byte	%00000010	; RETROPUTER
    909  4bd2				  -	      .byte	%01000010	; RETROPUTER
    910  4bd2				  -	      .byte	%01111110	; RETROPUTER
    911  4bd2				  -
    912  4bd2				  -			;byte %00000000 ; RETROPUTER
    913  4bd2				  -
    914  4bd2				  -	      .byte	%00001100	; RETROPUTER
    915  4bd2				  -	      .byte	%00001100	; RETROPUTER
    916  4bd2				  -	      .byte	%00001100	; RETROPUTER
    917  4bd2				  -	      .byte	%01111110	; RETROPUTER
    918  4bd2				  -	      .byte	%01000100	; RETROPUTER
    919  4bd2				  -	      .byte	%01000100	; RETROPUTER
    920  4bd2				  -	      .byte	%01000100	; RETROPUTER
    921  4bd2				  -	      .byte	%00000100	; RETROPUTER
    922  4bd2				  -
    923  4bd2				  -			;byte %00000000 ; RETROPUTER
    924  4bd2				  -
    925  4bd2				  -	      .byte	%01111110	; RETROPUTER
    926  4bd2				  -	      .byte	%01000110	; RETROPUTER
    927  4bd2				  -	      .byte	%00000110	; RETROPUTER
    928  4bd2				  -	      .byte	%00000110	; RETROPUTER
    929  4bd2				  -	      .byte	%01111100	; RETROPUTER
    930  4bd2				  -	      .byte	%01000000	; RETROPUTER
    931  4bd2				  -	      .byte	%01000000	; RETROPUTER
    932  4bd2				  -	      .byte	%01111110	; RETROPUTER
    933  4bd2				  -
    934  4bd2				  -			;byte %00000000 ; RETROPUTER
    935  4bd2				  -
    936  4bd2				  -	      .byte	%01111110	; RETROPUTER
    937  4bd2				  -	      .byte	%01000110	; RETROPUTER
    938  4bd2				  -	      .byte	%01000110	; RETROPUTER
    939  4bd2				  -	      .byte	%01000110	; RETROPUTER
    940  4bd2				  -	      .byte	%01111100	; RETROPUTER
    941  4bd2				  -	      .byte	%01000000	; RETROPUTER
    942  4bd2				  -	      .byte	%01000010	; RETROPUTER
    943  4bd2				  -	      .byte	%01111110	; RETROPUTER
    944  4bd2				  -
    945  4bd2				  -			;byte %00000000 ; RETROPUTER
    946  4bd2				  -
    947  4bd2				  -	      .byte	%00001100	; RETROPUTER
    948  4bd2				  -	      .byte	%00001100	; RETROPUTER
    949  4bd2				  -	      .byte	%00001100	; RETROPUTER
    950  4bd2				  -	      .byte	%00001100	; RETROPUTER
    951  4bd2				  -	      .byte	%00000100	; RETROPUTER
    952  4bd2				  -	      .byte	%00000010	; RETROPUTER
    953  4bd2				  -	      .byte	%01000010	; RETROPUTER
    954  4bd2				  -	      .byte	%01111110	; RETROPUTER
    955  4bd2				  -
    956  4bd2				  -			;byte %00000000 ; RETROPUTER
    957  4bd2				  -
    958  4bd2				  -	      .byte	%01111110	; RETROPUTER
    959  4bd2				  -	      .byte	%01000110	; RETROPUTER
    960  4bd2				  -	      .byte	%01000110	; RETROPUTER
    961  4bd2				  -	      .byte	%01000110	; RETROPUTER
    962  4bd2				  -	      .byte	%01111110	; RETROPUTER
    963  4bd2				  -	      .byte	%01000010	; RETROPUTER
    964  4bd2				  -	      .byte	%01000010	; RETROPUTER
    965  4bd2				  -	      .byte	%01111110	; RETROPUTER
    966  4bd2				  -
    967  4bd2				  -			;byte %00000000 ; RETROPUTER
    968  4bd2				  -
    969  4bd2				  -	      .byte	%00000110	; RETROPUTER
    970  4bd2				  -	      .byte	%00000110	; RETROPUTER
    971  4bd2				  -	      .byte	%00000110	; RETROPUTER
    972  4bd2				  -	      .byte	%00000010	; RETROPUTER
    973  4bd2				  -	      .byte	%01111110	; RETROPUTER
    974  4bd2				  -	      .byte	%01000010	; RETROPUTER
    975  4bd2				  -	      .byte	%01000010	; RETROPUTER
    976  4bd2				  -	      .byte	%01111110	; RETROPUTER
    977  4bd2				  -
    978  4bd2					      endif		; RETROPUTER
    979  4bd2
    980  4bd2				  -	      if	fontstyle == CURVES
    981  4bd2				  -
    982  4bd2				  -			;byte %00000000 ; CURVES
    983  4bd2				  -
    984  4bd2				  -	      .byte	%00111100	; CURVES
    985  4bd2				  -	      .byte	%01111110	; CURVES
    986  4bd2				  -	      .byte	%01100110	; CURVES
    987  4bd2				  -	      .byte	%01100110	; CURVES
    988  4bd2				  -	      .byte	%01100110	; CURVES
    989  4bd2				  -	      .byte	%01100110	; CURVES
    990  4bd2				  -	      .byte	%01111110	; CURVES
    991  4bd2				  -	      .byte	%00111100	; CURVES
    992  4bd2				  -
    993  4bd2				  -			;byte %00000000 ; CURVES
    994  4bd2				  -
    995  4bd2				  -	      .byte	%00011000	; CURVES
    996  4bd2				  -	      .byte	%00011000	; CURVES
    997  4bd2				  -	      .byte	%00011000	; CURVES
    998  4bd2				  -	      .byte	%00011000	; CURVES
    999  4bd2				  -	      .byte	%00011000	; CURVES
   1000  4bd2				  -	      .byte	%00011000	; CURVES
   1001  4bd2				  -	      .byte	%01111000	; CURVES
   1002  4bd2				  -	      .byte	%01110000	; CURVES
   1003  4bd2				  -
   1004  4bd2				  -			;byte %00000000 ; CURVES
   1005  4bd2				  -
   1006  4bd2				  -	      .byte	%01111110	; CURVES
   1007  4bd2				  -	      .byte	%01111110	; CURVES
   1008  4bd2				  -	      .byte	%01100000	; CURVES
   1009  4bd2				  -	      .byte	%01111100	; CURVES
   1010  4bd2				  -	      .byte	%00111110	; CURVES
   1011  4bd2				  -	      .byte	%00000110	; CURVES
   1012  4bd2				  -	      .byte	%01111110	; CURVES
   1013  4bd2				  -	      .byte	%01111100	; CURVES
   1014  4bd2				  -
   1015  4bd2				  -			;byte %00000000 ; CURVES
   1016  4bd2				  -
   1017  4bd2				  -	      .byte	%01111100	; CURVES
   1018  4bd2				  -	      .byte	%01111110	; CURVES
   1019  4bd2				  -	      .byte	%00001110	; CURVES
   1020  4bd2				  -	      .byte	%00111100	; CURVES
   1021  4bd2				  -	      .byte	%00111100	; CURVES
   1022  4bd2				  -	      .byte	%00001110	; CURVES
   1023  4bd2				  -	      .byte	%01111110	; CURVES
   1024  4bd2				  -	      .byte	%01111100	; CURVES
   1025  4bd2				  -
   1026  4bd2				  -			;byte %00000000 ; CURVES
   1027  4bd2				  -
   1028  4bd2				  -	      .byte	%00000110	; CURVES
   1029  4bd2				  -	      .byte	%00000110	; CURVES
   1030  4bd2				  -	      .byte	%00111110	; CURVES
   1031  4bd2				  -	      .byte	%01111110	; CURVES
   1032  4bd2				  -	      .byte	%01100110	; CURVES
   1033  4bd2				  -	      .byte	%01100110	; CURVES
   1034  4bd2				  -	      .byte	%01100110	; CURVES
   1035  4bd2				  -	      .byte	%01100110	; CURVES
   1036  4bd2				  -
   1037  4bd2				  -			;byte %00000000 ; CURVES
   1038  4bd2				  -
   1039  4bd2				  -	      .byte	%01111100	; CURVES
   1040  4bd2				  -	      .byte	%01111110	; CURVES
   1041  4bd2				  -	      .byte	%00000110	; CURVES
   1042  4bd2				  -	      .byte	%01111110	; CURVES
   1043  4bd2				  -	      .byte	%01111100	; CURVES
   1044  4bd2				  -	      .byte	%01100000	; CURVES
   1045  4bd2				  -	      .byte	%01111110	; CURVES
   1046  4bd2				  -	      .byte	%01111110	; CURVES
   1047  4bd2				  -
   1048  4bd2				  -			;byte %00000000 ; CURVES
   1049  4bd2				  -
   1050  4bd2				  -	      .byte	%00111100	; CURVES
   1051  4bd2				  -	      .byte	%01111110	; CURVES
   1052  4bd2				  -	      .byte	%01100110	; CURVES
   1053  4bd2				  -	      .byte	%01111110	; CURVES
   1054  4bd2				  -	      .byte	%01111100	; CURVES
   1055  4bd2				  -	      .byte	%01100000	; CURVES
   1056  4bd2				  -	      .byte	%01111110	; CURVES
   1057  4bd2				  -	      .byte	%00111110	; CURVES
   1058  4bd2				  -
   1059  4bd2				  -			;byte %00000000 ; CURVES
   1060  4bd2				  -
   1061  4bd2				  -	      .byte	%00000110	; CURVES
   1062  4bd2				  -	      .byte	%00000110	; CURVES
   1063  4bd2				  -	      .byte	%00000110	; CURVES
   1064  4bd2				  -	      .byte	%00000110	; CURVES
   1065  4bd2				  -	      .byte	%00000110	; CURVES
   1066  4bd2				  -	      .byte	%01100110	; CURVES
   1067  4bd2				  -	      .byte	%01111110	; CURVES
   1068  4bd2				  -	      .byte	%00111100	; CURVES
   1069  4bd2				  -
   1070  4bd2				  -			;byte %00000000 ; CURVES
   1071  4bd2				  -
   1072  4bd2				  -	      .byte	%00111100	; CURVES
   1073  4bd2				  -	      .byte	%01111110	; CURVES
   1074  4bd2				  -	      .byte	%01100110	; CURVES
   1075  4bd2				  -	      .byte	%01111110	; CURVES
   1076  4bd2				  -	      .byte	%00111100	; CURVES
   1077  4bd2				  -	      .byte	%01100110	; CURVES
   1078  4bd2				  -	      .byte	%01111110	; CURVES
   1079  4bd2				  -	      .byte	%00111100	; CURVES
   1080  4bd2				  -
   1081  4bd2				  -			;byte %00000000 ; CURVES
   1082  4bd2				  -
   1083  4bd2				  -	      .byte	%01111100	; CURVES
   1084  4bd2				  -	      .byte	%01111110	; CURVES
   1085  4bd2				  -	      .byte	%00000110	; CURVES
   1086  4bd2				  -	      .byte	%00111110	; CURVES
   1087  4bd2				  -	      .byte	%01111110	; CURVES
   1088  4bd2				  -	      .byte	%01100110	; CURVES
   1089  4bd2				  -	      .byte	%01111110	; CURVES
   1090  4bd2				  -	      .byte	%00111100	; CURVES
   1091  4bd2				  -
   1092  4bd2					      endif		; CURVES
   1093  4bd2
   1094  4bd2
   1095  4bd2				  -	      if	fontstyle == HUSKY
   1096  4bd2				  -
   1097  4bd2				  -			;byte %00000000 ; HUSKY
   1098  4bd2				  -
   1099  4bd2				  -	      .byte	%01111100	; HUSKY
   1100  4bd2				  -	      .byte	%11111110	; HUSKY
   1101  4bd2				  -	      .byte	%11101110	; HUSKY
   1102  4bd2				  -	      .byte	%11101110	; HUSKY
   1103  4bd2				  -	      .byte	%11101110	; HUSKY
   1104  4bd2				  -	      .byte	%11101110	; HUSKY
   1105  4bd2				  -	      .byte	%11111110	; HUSKY
   1106  4bd2				  -	      .byte	%01111100	; HUSKY
   1107  4bd2				  -
   1108  4bd2				  -			;byte %00000000 ; HUSKY
   1109  4bd2				  -
   1110  4bd2				  -	      .byte	%00111000	; HUSKY
   1111  4bd2				  -	      .byte	%00111000	; HUSKY
   1112  4bd2				  -	      .byte	%00111000	; HUSKY
   1113  4bd2				  -	      .byte	%00111000	; HUSKY
   1114  4bd2				  -	      .byte	%00111000	; HUSKY
   1115  4bd2				  -	      .byte	%00111000	; HUSKY
   1116  4bd2				  -	      .byte	%00111000	; HUSKY
   1117  4bd2				  -	      .byte	%00111000	; HUSKY
   1118  4bd2				  -
   1119  4bd2				  -			;byte %00000000 ; HUSKY
   1120  4bd2				  -
   1121  4bd2				  -	      .byte	%11111110	; HUSKY
   1122  4bd2				  -	      .byte	%11111110	; HUSKY
   1123  4bd2				  -	      .byte	%11100000	; HUSKY
   1124  4bd2				  -	      .byte	%11111100	; HUSKY
   1125  4bd2				  -	      .byte	%01111110	; HUSKY
   1126  4bd2				  -	      .byte	%00001110	; HUSKY
   1127  4bd2				  -	      .byte	%11111110	; HUSKY
   1128  4bd2				  -	      .byte	%11111100	; HUSKY
   1129  4bd2				  -
   1130  4bd2				  -			;byte %00000000 ; HUSKY
   1131  4bd2				  -
   1132  4bd2				  -	      .byte	%11111100	; HUSKY
   1133  4bd2				  -	      .byte	%11111110	; HUSKY
   1134  4bd2				  -	      .byte	%00001110	; HUSKY
   1135  4bd2				  -	      .byte	%11111100	; HUSKY
   1136  4bd2				  -	      .byte	%11111100	; HUSKY
   1137  4bd2				  -	      .byte	%00001110	; HUSKY
   1138  4bd2				  -	      .byte	%11111110	; HUSKY
   1139  4bd2				  -	      .byte	%11111100	; HUSKY
   1140  4bd2				  -
   1141  4bd2				  -			;byte %00000000 ; HUSKY
   1142  4bd2				  -
   1143  4bd2				  -	      .byte	%00011100	; HUSKY
   1144  4bd2				  -	      .byte	%00011100	; HUSKY
   1145  4bd2				  -	      .byte	%11111110	; HUSKY
   1146  4bd2				  -	      .byte	%11111110	; HUSKY
   1147  4bd2				  -	      .byte	%11011100	; HUSKY
   1148  4bd2				  -	      .byte	%11011100	; HUSKY
   1149  4bd2				  -	      .byte	%00011100	; HUSKY
   1150  4bd2				  -	      .byte	%00011100	; HUSKY
   1151  4bd2				  -
   1152  4bd2				  -			;byte %00000000 ; HUSKY
   1153  4bd2				  -
   1154  4bd2				  -	      .byte	%11111100	; HUSKY
   1155  4bd2				  -	      .byte	%11111110	; HUSKY
   1156  4bd2				  -	      .byte	%00001110	; HUSKY
   1157  4bd2				  -	      .byte	%11111110	; HUSKY
   1158  4bd2				  -	      .byte	%11111100	; HUSKY
   1159  4bd2				  -	      .byte	%11100000	; HUSKY
   1160  4bd2				  -	      .byte	%11111110	; HUSKY
   1161  4bd2				  -	      .byte	%11111110	; HUSKY
   1162  4bd2				  -
   1163  4bd2				  -			;byte %00000000 ; HUSKY
   1164  4bd2				  -
   1165  4bd2				  -	      .byte	%01111100	; HUSKY
   1166  4bd2				  -	      .byte	%11111110	; HUSKY
   1167  4bd2				  -	      .byte	%11101110	; HUSKY
   1168  4bd2				  -	      .byte	%11111110	; HUSKY
   1169  4bd2				  -	      .byte	%11111100	; HUSKY
   1170  4bd2				  -	      .byte	%11100000	; HUSKY
   1171  4bd2				  -	      .byte	%11111110	; HUSKY
   1172  4bd2				  -	      .byte	%01111110	; HUSKY
   1173  4bd2				  -
   1174  4bd2				  -			;byte %00000000 ; HUSKY
   1175  4bd2				  -
   1176  4bd2				  -	      .byte	%00111000	; HUSKY
   1177  4bd2				  -	      .byte	%00111000	; HUSKY
   1178  4bd2				  -	      .byte	%00111000	; HUSKY
   1179  4bd2				  -	      .byte	%00111000	; HUSKY
   1180  4bd2				  -	      .byte	%00011100	; HUSKY
   1181  4bd2				  -	      .byte	%00001110	; HUSKY
   1182  4bd2				  -	      .byte	%11111110	; HUSKY
   1183  4bd2				  -	      .byte	%11111110	; HUSKY
   1184  4bd2				  -
   1185  4bd2				  -			;byte %00000000 ; HUSKY
   1186  4bd2				  -
   1187  4bd2				  -	      .byte	%01111100	; HUSKY
   1188  4bd2				  -	      .byte	%11111110	; HUSKY
   1189  4bd2				  -	      .byte	%11101110	; HUSKY
   1190  4bd2				  -	      .byte	%11111110	; HUSKY
   1191  4bd2				  -	      .byte	%01111100	; HUSKY
   1192  4bd2				  -	      .byte	%11101110	; HUSKY
   1193  4bd2				  -	      .byte	%11111110	; HUSKY
   1194  4bd2				  -	      .byte	%01111100	; HUSKY
   1195  4bd2				  -
   1196  4bd2				  -			;byte %00000000 ; HUSKY
   1197  4bd2				  -
   1198  4bd2				  -	      .byte	%11111100	; HUSKY
   1199  4bd2				  -	      .byte	%11111110	; HUSKY
   1200  4bd2				  -	      .byte	%00001110	; HUSKY
   1201  4bd2				  -	      .byte	%01111110	; HUSKY
   1202  4bd2				  -	      .byte	%11111110	; HUSKY
   1203  4bd2				  -	      .byte	%11101110	; HUSKY
   1204  4bd2				  -	      .byte	%11111110	; HUSKY
   1205  4bd2				  -	      .byte	%01111100	; HUSKY
   1206  4bd2				  -
   1207  4bd2					      endif		; HUSKY
   1208  4bd2
   1209  4bd2
   1210  4bd2				  -	      if	fontstyle == SNAKE
   1211  4bd2				  -
   1212  4bd2				  -			;byte %00000000 ; SNAKE
   1213  4bd2				  -
   1214  4bd2				  -	      .byte	%01111110	; SNAKE
   1215  4bd2				  -	      .byte	%01000010	; SNAKE
   1216  4bd2				  -	      .byte	%01000010	; SNAKE
   1217  4bd2				  -	      .byte	%01000010	; SNAKE
   1218  4bd2				  -	      .byte	%01000010	; SNAKE
   1219  4bd2				  -	      .byte	%01000010	; SNAKE
   1220  4bd2				  -	      .byte	%01000010	; SNAKE
   1221  4bd2				  -	      .byte	%01111110	; SNAKE
   1222  4bd2				  -
   1223  4bd2				  -			;byte %00000000 ; SNAKE
   1224  4bd2				  -
   1225  4bd2				  -	      .byte	%00111000	; SNAKE
   1226  4bd2				  -	      .byte	%00101000	; SNAKE
   1227  4bd2				  -	      .byte	%00001000	; SNAKE
   1228  4bd2				  -	      .byte	%00001000	; SNAKE
   1229  4bd2				  -	      .byte	%00001000	; SNAKE
   1230  4bd2				  -	      .byte	%00001000	; SNAKE
   1231  4bd2				  -	      .byte	%00001000	; SNAKE
   1232  4bd2				  -	      .byte	%00111000	; SNAKE
   1233  4bd2				  -
   1234  4bd2				  -			;byte %00000000 ; SNAKE
   1235  4bd2				  -
   1236  4bd2				  -	      .byte	%01111110	; SNAKE
   1237  4bd2				  -	      .byte	%01000010	; SNAKE
   1238  4bd2				  -	      .byte	%01000110	; SNAKE
   1239  4bd2				  -	      .byte	%01000000	; SNAKE
   1240  4bd2				  -	      .byte	%01111110	; SNAKE
   1241  4bd2				  -	      .byte	%00000010	; SNAKE
   1242  4bd2				  -	      .byte	%01000010	; SNAKE
   1243  4bd2				  -	      .byte	%01111110	; SNAKE
   1244  4bd2				  -
   1245  4bd2				  -			;byte %00000000 ; SNAKE
   1246  4bd2				  -
   1247  4bd2				  -	      .byte	%01111110	; SNAKE
   1248  4bd2				  -	      .byte	%01000010	; SNAKE
   1249  4bd2				  -	      .byte	%01100010	; SNAKE
   1250  4bd2				  -	      .byte	%00000010	; SNAKE
   1251  4bd2				  -	      .byte	%01111110	; SNAKE
   1252  4bd2				  -	      .byte	%00000010	; SNAKE
   1253  4bd2				  -	      .byte	%01000010	; SNAKE
   1254  4bd2				  -	      .byte	%01111110	; SNAKE
   1255  4bd2				  -
   1256  4bd2				  -			;byte %00000000 ; SNAKE
   1257  4bd2				  -
   1258  4bd2				  -	      .byte	%00001110	; SNAKE
   1259  4bd2				  -	      .byte	%00001010	; SNAKE
   1260  4bd2				  -	      .byte	%00000010	; SNAKE
   1261  4bd2				  -	      .byte	%01111110	; SNAKE
   1262  4bd2				  -	      .byte	%01000010	; SNAKE
   1263  4bd2				  -	      .byte	%01000010	; SNAKE
   1264  4bd2				  -	      .byte	%01000010	; SNAKE
   1265  4bd2				  -	      .byte	%01100110	; SNAKE
   1266  4bd2				  -
   1267  4bd2				  -			;byte %00000000 ; SNAKE
   1268  4bd2				  -
   1269  4bd2				  -	      .byte	%01111110	; SNAKE
   1270  4bd2				  -	      .byte	%01000010	; SNAKE
   1271  4bd2				  -	      .byte	%01100010	; SNAKE
   1272  4bd2				  -	      .byte	%00000010	; SNAKE
   1273  4bd2				  -	      .byte	%01111110	; SNAKE
   1274  4bd2				  -	      .byte	%01000000	; SNAKE
   1275  4bd2				  -	      .byte	%01000010	; SNAKE
   1276  4bd2				  -	      .byte	%01111110	; SNAKE
   1277  4bd2				  -
   1278  4bd2				  -			;byte %00000000 ; SNAKE
   1279  4bd2				  -
   1280  4bd2				  -	      .byte	%01111110	; SNAKE
   1281  4bd2				  -	      .byte	%01000010	; SNAKE
   1282  4bd2				  -	      .byte	%01000010	; SNAKE
   1283  4bd2				  -	      .byte	%01111110	; SNAKE
   1284  4bd2				  -	      .byte	%01000000	; SNAKE
   1285  4bd2				  -	      .byte	%01000110	; SNAKE
   1286  4bd2				  -	      .byte	%01000010	; SNAKE
   1287  4bd2				  -	      .byte	%01111110	; SNAKE
   1288  4bd2				  -
   1289  4bd2				  -			;byte %00000000 ; SNAKE
   1290  4bd2				  -
   1291  4bd2				  -	      .byte	%00000110	; SNAKE
   1292  4bd2				  -	      .byte	%00000010	; SNAKE
   1293  4bd2				  -	      .byte	%00000010	; SNAKE
   1294  4bd2				  -	      .byte	%00000010	; SNAKE
   1295  4bd2				  -	      .byte	%00000010	; SNAKE
   1296  4bd2				  -	      .byte	%01100010	; SNAKE
   1297  4bd2				  -	      .byte	%01000010	; SNAKE
   1298  4bd2				  -	      .byte	%01111110	; SNAKE
   1299  4bd2				  -
   1300  4bd2				  -			;byte %00000000 ; SNAKE
   1301  4bd2				  -
   1302  4bd2				  -	      .byte	%01111110	; SNAKE
   1303  4bd2				  -	      .byte	%01000010	; SNAKE
   1304  4bd2				  -	      .byte	%01000010	; SNAKE
   1305  4bd2				  -	      .byte	%01000010	; SNAKE
   1306  4bd2				  -	      .byte	%01111110	; SNAKE
   1307  4bd2				  -	      .byte	%01000010	; SNAKE
   1308  4bd2				  -	      .byte	%01000010	; SNAKE
   1309  4bd2				  -	      .byte	%01111110	; SNAKE
   1310  4bd2				  -
   1311  4bd2				  -			;byte %00000000 ; SNAKE
   1312  4bd2				  -
   1313  4bd2				  -	      .byte	%00001110	; SNAKE
   1314  4bd2				  -	      .byte	%00001010	; SNAKE
   1315  4bd2				  -	      .byte	%00000010	; SNAKE
   1316  4bd2				  -	      .byte	%00000010	; SNAKE
   1317  4bd2				  -	      .byte	%01111110	; SNAKE
   1318  4bd2				  -	      .byte	%01000010	; SNAKE
   1319  4bd2				  -	      .byte	%01000010	; SNAKE
   1320  4bd2				  -	      .byte	%01111110	; SNAKE
   1321  4bd2				  -
   1322  4bd2				  -
   1323  4bd2					      endif		; SNAKE
   1324  4bd2
   1325  4bd2				  -	      if	fontstyle == PLOK
   1326  4bd2				  -
   1327  4bd2				  -			;byte %00000000 ; PLOK
   1328  4bd2				  -
   1329  4bd2				  -	      .byte	%00000000	; PLOK
   1330  4bd2				  -	      .byte	%00111000	; PLOK
   1331  4bd2				  -	      .byte	%01100100	; PLOK
   1332  4bd2				  -	      .byte	%01100010	; PLOK
   1333  4bd2				  -	      .byte	%01100010	; PLOK
   1334  4bd2				  -	      .byte	%00110110	; PLOK
   1335  4bd2				  -	      .byte	%00011100	; PLOK
   1336  4bd2				  -	      .byte	%00000000	; PLOK
   1337  4bd2				  -
   1338  4bd2				  -			;byte %00000000 ; PLOK
   1339  4bd2				  -
   1340  4bd2				  -	      .byte	%00000000	; PLOK
   1341  4bd2				  -	      .byte	%00010000	; PLOK
   1342  4bd2				  -	      .byte	%00011100	; PLOK
   1343  4bd2				  -	      .byte	%00011100	; PLOK
   1344  4bd2				  -	      .byte	%00011000	; PLOK
   1345  4bd2				  -	      .byte	%00111000	; PLOK
   1346  4bd2				  -	      .byte	%00011000	; PLOK
   1347  4bd2				  -	      .byte	%00000000	; PLOK
   1348  4bd2				  -
   1349  4bd2				  -			;byte %00000000 ; PLOK
   1350  4bd2				  -
   1351  4bd2				  -	      .byte	%00000000	; PLOK
   1352  4bd2				  -	      .byte	%00001110	; PLOK
   1353  4bd2				  -	      .byte	%01111110	; PLOK
   1354  4bd2				  -	      .byte	%00011000	; PLOK
   1355  4bd2				  -	      .byte	%00001100	; PLOK
   1356  4bd2				  -	      .byte	%00000110	; PLOK
   1357  4bd2				  -	      .byte	%00111100	; PLOK
   1358  4bd2				  -	      .byte	%00000000	; PLOK
   1359  4bd2				  -
   1360  4bd2				  -			;byte %00000000 ; PLOK
   1361  4bd2				  -
   1362  4bd2				  -	      .byte	%00000000	; PLOK
   1363  4bd2				  -	      .byte	%00111100	; PLOK
   1364  4bd2				  -	      .byte	%01101110	; PLOK
   1365  4bd2				  -	      .byte	%00001110	; PLOK
   1366  4bd2				  -	      .byte	%00011100	; PLOK
   1367  4bd2				  -	      .byte	%00000110	; PLOK
   1368  4bd2				  -	      .byte	%01111100	; PLOK
   1369  4bd2				  -	      .byte	%00000000	; PLOK
   1370  4bd2				  -
   1371  4bd2				  -			;byte %00000000 ; PLOK
   1372  4bd2				  -
   1373  4bd2				  -	      .byte	%00000000	; PLOK
   1374  4bd2				  -	      .byte	%00011000	; PLOK
   1375  4bd2				  -	      .byte	%01111110	; PLOK
   1376  4bd2				  -	      .byte	%01101100	; PLOK
   1377  4bd2				  -	      .byte	%00100100	; PLOK
   1378  4bd2				  -	      .byte	%00110000	; PLOK
   1379  4bd2				  -	      .byte	%00110000	; PLOK
   1380  4bd2				  -	      .byte	%00000000	; PLOK
   1381  4bd2				  -
   1382  4bd2				  -			;byte %00000000 ; PLOK
   1383  4bd2				  -
   1384  4bd2				  -	      .byte	%00000000	; PLOK
   1385  4bd2				  -	      .byte	%00111100	; PLOK
   1386  4bd2				  -	      .byte	%01001110	; PLOK
   1387  4bd2				  -	      .byte	%00011100	; PLOK
   1388  4bd2				  -	      .byte	%01100000	; PLOK
   1389  4bd2				  -	      .byte	%01111100	; PLOK
   1390  4bd2				  -	      .byte	%00011100	; PLOK
   1391  4bd2				  -	      .byte	%00000000	; PLOK
   1392  4bd2				  -
   1393  4bd2				  -			;byte %00000000 ; PLOK
   1394  4bd2				  -
   1395  4bd2				  -	      .byte	%00000000	; PLOK
   1396  4bd2				  -	      .byte	%00111100	; PLOK
   1397  4bd2				  -	      .byte	%01000110	; PLOK
   1398  4bd2				  -	      .byte	%01101100	; PLOK
   1399  4bd2				  -	      .byte	%01110000	; PLOK
   1400  4bd2				  -	      .byte	%00111000	; PLOK
   1401  4bd2				  -	      .byte	%00010000	; PLOK
   1402  4bd2				  -	      .byte	%00000000	; PLOK
   1403  4bd2				  -
   1404  4bd2				  -			;byte %00000000 ; PLOK
   1405  4bd2				  -
   1406  4bd2				  -	      .byte	%00000000	; PLOK
   1407  4bd2				  -	      .byte	%00111100	; PLOK
   1408  4bd2				  -	      .byte	%00011100	; PLOK
   1409  4bd2				  -	      .byte	%00001100	; PLOK
   1410  4bd2				  -	      .byte	%00000110	; PLOK
   1411  4bd2				  -	      .byte	%01111110	; PLOK
   1412  4bd2				  -	      .byte	%00110000	; PLOK
   1413  4bd2				  -	      .byte	%00000000	; PLOK
   1414  4bd2				  -
   1415  4bd2				  -			;byte %00000000 ; PLOK
   1416  4bd2				  -
   1417  4bd2				  -	      .byte	%00000000	; PLOK
   1418  4bd2				  -	      .byte	%00111100	; PLOK
   1419  4bd2				  -	      .byte	%01001110	; PLOK
   1420  4bd2				  -	      .byte	%01101110	; PLOK
   1421  4bd2				  -	      .byte	%00111100	; PLOK
   1422  4bd2				  -	      .byte	%01100100	; PLOK
   1423  4bd2				  -	      .byte	%00111000	; PLOK
   1424  4bd2				  -	      .byte	%00000000	; PLOK
   1425  4bd2				  -
   1426  4bd2				  -			;byte %00000000 ; PLOK
   1427  4bd2				  -
   1428  4bd2				  -	      .byte	%00000000	; PLOK
   1429  4bd2				  -	      .byte	%00011000	; PLOK
   1430  4bd2				  -	      .byte	%00001100	; PLOK
   1431  4bd2				  -	      .byte	%00011100	; PLOK
   1432  4bd2				  -	      .byte	%00100110	; PLOK
   1433  4bd2				  -	      .byte	%01001110	; PLOK
   1434  4bd2				  -	      .byte	%00111100	; PLOK
   1435  4bd2				  -	      .byte	%00000000	; PLOK
   1436  4bd2				  -
   1437  4bd2					      endif		; PLOK
   1438  4bd2
   1439  4bd2							; ### any characters that aren't font specific follow... 
   1440  4bd2
   1441  4bd2				  -	      ifconst	fontcharSPACE
   1442  4bd2				  -			;byte %00000000 ; SYMBOLS
   1443  4bd2				  -
   1444  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1445  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1446  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1447  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1448  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1449  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1450  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1451  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1452  4bd2				  -
   1453  4bd2				  -			;byte %00000000 ; SYMBOLS
   1454  4bd2					      endif		; fontcharSPACE
   1455  4bd2
   1456  4bd2				  -	      ifconst	fontcharDOLLAR
   1457  4bd2				  -			;byte %00000000 ; SYMBOLS
   1458  4bd2				  -
   1459  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1460  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1461  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1462  4bd2				  -	      .byte	%00010010	; SYMBOLS
   1463  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1464  4bd2				  -	      .byte	%10010000	; SYMBOLS
   1465  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1466  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1467  4bd2				  -
   1468  4bd2				  -			;byte %00000000 ; SYMBOLS
   1469  4bd2				  -
   1470  4bd2					      endif		; fontcharDOLLAR
   1471  4bd2
   1472  4bd2				  -	      ifconst	fontcharPOUND
   1473  4bd2				  -			;byte %00000000 ; SYMBOLS
   1474  4bd2				  -
   1475  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1476  4bd2				  -	      .byte	%01000000	; SYMBOLS
   1477  4bd2				  -	      .byte	%00100000	; SYMBOLS
   1478  4bd2				  -	      .byte	%00100000	; SYMBOLS
   1479  4bd2				  -	      .byte	%01111000	; SYMBOLS
   1480  4bd2				  -	      .byte	%00100000	; SYMBOLS
   1481  4bd2				  -	      .byte	%00100010	; SYMBOLS
   1482  4bd2				  -	      .byte	%00011100	; SYMBOLS
   1483  4bd2				  -
   1484  4bd2				  -			;byte %00000000 ; SYMBOLS
   1485  4bd2				  -
   1486  4bd2					      endif		; fontcharPOUND
   1487  4bd2
   1488  4bd2
   1489  4bd2				  -	      ifconst	fontcharMRHAPPY
   1490  4bd2				  -			;byte %00000000 ; SYMBOLS
   1491  4bd2				  -
   1492  4bd2				  -	      .byte	%00111100	; SYMBOLS
   1493  4bd2				  -	      .byte	%01100110	; SYMBOLS
   1494  4bd2				  -	      .byte	%01011010	; SYMBOLS
   1495  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1496  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1497  4bd2				  -	      .byte	%01011010	; SYMBOLS
   1498  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1499  4bd2				  -	      .byte	%00111100	; SYMBOLS
   1500  4bd2				  -
   1501  4bd2				  -			;byte %00000000 ; SYMBOLS
   1502  4bd2				  -
   1503  4bd2					      endif		; fontcharMRHAPPY
   1504  4bd2
   1505  4bd2				  -	      ifconst	fontcharMRSAD
   1506  4bd2				  -			;byte %00000000 ; SYMBOLS
   1507  4bd2				  -
   1508  4bd2				  -	      .byte	%00111100	; SYMBOLS
   1509  4bd2				  -	      .byte	%01011010	; SYMBOLS
   1510  4bd2				  -	      .byte	%01100110	; SYMBOLS
   1511  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1512  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1513  4bd2				  -	      .byte	%01011010	; SYMBOLS
   1514  4bd2				  -	      .byte	%01111110	; SYMBOLS
   1515  4bd2				  -	      .byte	%00111100	; SYMBOLS
   1516  4bd2				  -
   1517  4bd2				  -			;byte %00000000 ; SYMBOLS
   1518  4bd2				  -
   1519  4bd2					      endif		; fontcharMRSAD
   1520  4bd2
   1521  4bd2
   1522  4bd2				  -	      ifconst	fontcharCOPYRIGHT
   1523  4bd2				  -			;byte %00000000 ; SYMBOLS
   1524  4bd2				  -
   1525  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1526  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1527  4bd2				  -	      .byte	%01000100	; SYMBOLS
   1528  4bd2				  -	      .byte	%10111010	; SYMBOLS
   1529  4bd2				  -	      .byte	%10100010	; SYMBOLS
   1530  4bd2				  -	      .byte	%10111010	; SYMBOLS
   1531  4bd2				  -	      .byte	%01000100	; SYMBOLS
   1532  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1533  4bd2				  -
   1534  4bd2				  -			;byte %00000000 ; SYMBOLS
   1535  4bd2				  -
   1536  4bd2					      endif		; fontcharCOPYRIGHT
   1537  4bd2
   1538  4bd2
   1539  4bd2				  -	      ifconst	fontcharFUJI
   1540  4bd2				  -
   1541  4bd2				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  4bd2				  -
   1543  4bd2				  -	      .byte	%01110000	; SYMBOLS
   1544  4bd2				  -	      .byte	%01111001	; SYMBOLS
   1545  4bd2				  -	      .byte	%00011101	; SYMBOLS
   1546  4bd2				  -	      .byte	%00001101	; SYMBOLS
   1547  4bd2				  -	      .byte	%00001101	; SYMBOLS
   1548  4bd2				  -	      .byte	%00001101	; SYMBOLS
   1549  4bd2				  -	      .byte	%00001101	; SYMBOLS
   1550  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1551  4bd2				  -
   1552  4bd2				  -			;byte %00000000 ; SYMBOLS
   1553  4bd2				  -
   1554  4bd2				  -	      .byte	%00001110	; SYMBOLS
   1555  4bd2				  -	      .byte	%10011110	; SYMBOLS
   1556  4bd2				  -	      .byte	%10111000	; SYMBOLS
   1557  4bd2				  -	      .byte	%10110000	; SYMBOLS
   1558  4bd2				  -	      .byte	%10110000	; SYMBOLS
   1559  4bd2				  -	      .byte	%10110000	; SYMBOLS
   1560  4bd2				  -	      .byte	%10110000	; SYMBOLS
   1561  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1562  4bd2				  -
   1563  4bd2				  -			;byte %00000000 ; SYMBOLS
   1564  4bd2				  -
   1565  4bd2					      endif		; fontcharFUJI
   1566  4bd2
   1567  4bd2
   1568  4bd2				  -	      ifconst	fontcharHEART
   1569  4bd2				  -			;byte %00000000 ; SYMBOLS
   1570  4bd2				  -
   1571  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1572  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1573  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1574  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1575  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1576  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1577  4bd2				  -	      .byte	%11101110	; SYMBOLS
   1578  4bd2				  -	      .byte	%01000100	; SYMBOLS
   1579  4bd2				  -
   1580  4bd2				  -			;byte %00000000 ; SYMBOLS
   1581  4bd2				  -
   1582  4bd2					      endif		; fontcharHEART
   1583  4bd2
   1584  4bd2				  -	      ifconst	fontcharDIAMOND
   1585  4bd2				  -			;byte %00000000 ; SYMBOLS
   1586  4bd2				  -
   1587  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1588  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1589  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1590  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1591  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1592  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1593  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1594  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1595  4bd2				  -
   1596  4bd2				  -			;byte %00000000 ; SYMBOLS
   1597  4bd2				  -
   1598  4bd2					      endif		; fontcharDIAMOND
   1599  4bd2
   1600  4bd2				  -	      ifconst	fontcharSPADE
   1601  4bd2				  -			;byte %00000000 ; SYMBOLS
   1602  4bd2				  -
   1603  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1604  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1605  4bd2				  -	      .byte	%01010100	; SYMBOLS
   1606  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1607  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1608  4bd2				  -	      .byte	%01111100	; SYMBOLS
   1609  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1610  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1611  4bd2				  -
   1612  4bd2				  -			;byte %00000000 ; SYMBOLS
   1613  4bd2				  -
   1614  4bd2					      endif		; fontcharSPADE
   1615  4bd2
   1616  4bd2				  -	      ifconst	fontcharCLUB
   1617  4bd2				  -			;byte %00000000 ; SYMBOLS
   1618  4bd2				  -
   1619  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1620  4bd2				  -	      .byte	%00010000	; SYMBOLS
   1621  4bd2				  -	      .byte	%11010110	; SYMBOLS
   1622  4bd2				  -	      .byte	%11111110	; SYMBOLS
   1623  4bd2				  -	      .byte	%11010110	; SYMBOLS
   1624  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1625  4bd2				  -	      .byte	%00111000	; SYMBOLS
   1626  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1627  4bd2				  -
   1628  4bd2				  -			;byte %00000000 ; SYMBOLS
   1629  4bd2				  -
   1630  4bd2					      endif		; fontcharCLUB
   1631  4bd2
   1632  4bd2
   1633  4bd2				  -	      ifconst	fontcharCOLON
   1634  4bd2				  -			;byte %00000000 ; SYMBOLS
   1635  4bd2				  -
   1636  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1637  4bd2				  -	      .byte	%00011000	; SYMBOLS
   1638  4bd2				  -	      .byte	%00011000	; SYMBOLS
   1639  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1640  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1641  4bd2				  -	      .byte	%00011000	; SYMBOLS
   1642  4bd2				  -	      .byte	%00011000	; SYMBOLS
   1643  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1644  4bd2				  -
   1645  4bd2				  -			;byte %00000000 ; SYMBOLS
   1646  4bd2				  -
   1647  4bd2					      endif		; fontcharCOLON
   1648  4bd2
   1649  4bd2
   1650  4bd2				  -	      ifconst	fontcharBLOCK
   1651  4bd2				  -
   1652  4bd2				  -			;byte %00000000 ; SYMBOLS
   1653  4bd2				  -
   1654  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1655  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1656  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1657  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1658  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1659  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1660  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1661  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1662  4bd2				  -
   1663  4bd2				  -			;byte %00000000 ; SYMBOLS
   1664  4bd2				  -
   1665  4bd2					      endif		; fontcharBLOCK
   1666  4bd2
   1667  4bd2				  -	      ifconst	fontcharUNDERLINE
   1668  4bd2				  -
   1669  4bd2				  -			;byte %00000000 ; SYMBOLS
   1670  4bd2				  -
   1671  4bd2				  -	      .byte	%11111111	; SYMBOLS
   1672  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1673  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1674  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1675  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1676  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1677  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1678  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1679  4bd2				  -
   1680  4bd2				  -			;byte %00000000 ; SYMBOLS
   1681  4bd2				  -
   1682  4bd2					      endif		; fontcharUNDERLINE
   1683  4bd2
   1684  4bd2				  -	      ifconst	fontcharARISIDE
   1685  4bd2				  -			;byte %00000000 ; SYMBOLS
   1686  4bd2				  -
   1687  4bd2				  -	      .byte	%00000000	; SYMBOLS
   1688  4bd2				  -	      .byte	%00101010	; SYMBOLS
   1689  4bd2				  -	      .byte	%00101010	; SYMBOLS
   1690  4bd2				  -	      .byte	%00101100	; SYMBOLS
   1691  4bd2				  -	      .byte	%01111111	; SYMBOLS
   1692  4bd2				  -	      .byte	%00110111	; SYMBOLS
   1693  4bd2				  -	      .byte	%00000010	; SYMBOLS
   1694  4bd2				  -	      .byte	%00000001	; SYMBOLS
   1695  4bd2				  -
   1696  4bd2				  -			;byte %00000000 ; SYMBOLS
   1697  4bd2				  -
   1698  4bd2					      endif		; fontcharARISIDE
   1699  4bd2
   1700  4bd2				  -	      ifconst	fontcharARIFACE
   1701  4bd2				  -			;byte %00000000 ; SYMBOLS
   1702  4bd2				  -
   1703  4bd2				  -	      .byte	%00001000	; SYMBOLS
   1704  4bd2				  -	      .byte	%00011100	; SYMBOLS
   1705  4bd2				  -	      .byte	%00111110	; SYMBOLS
   1706  4bd2				  -	      .byte	%00101010	; SYMBOLS
   1707  4bd2				  -	      .byte	%00011100	; SYMBOLS
   1708  4bd2				  -	      .byte	%01010100	; SYMBOLS
   1709  4bd2				  -	      .byte	%00100100	; SYMBOLS
   1710  4bd2				  -	      .byte	%00000010	; SYMBOLS
   1711  4bd2				  -
   1712  4bd2				  -			;byte %00000000 ; SYMBOLS
   1713  4bd2				  -
   1714  4bd2				  -
   1715  4bd2					      endif		; fontcharARIRACE
   1716  4bd2
------- FILE titlescreen/asm/titlescreen.asm
    301  4bd2					      endif
    302  4bd2
    303  4bd2				  -	      ifconst	mk_gameselect_on
    304  4bd2				  -	      include	"titlescreen/gameselect_image.asm"
    305  4bd2					      endif
    306  4bd2
    307  4bd2				  -	      ifconst	mk_player_on
    308  4bd2				  -	      include	"titlescreen/asm/player_kernel.asm"
    309  4bd2					      endif		;mk_player_on
    310  4bd2
    311  4bd2
------- FILE c:\Users\danie\Documents\GitHub\atari-misssnake\game\misssnake!-NTSC-PAL60.bas.asm
   3062  4bd2
   3063  4bd2				   .
   3064  4bd2							; 
   3065  4bd2
   3066  4bd2				   .L0225		;  bank 5
   3067  4bd2
   3068  4bd2					      if	ECHO4
      1026 bytes of ROM space left in bank 4
   3069  4bd2					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
   3070  4bd2					      endif
   3071  4bd2		       00 01	   ECHO4      =	1
   3072  4fd4					      ORG	$4FF4-bscode_length
   3073  4fd4					      RORG	$7FF4-bscode_length
   3074  4fd4		       a2 ff	   start_bank4 ldx	#$ff
   3075  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3076  4fd6				  -	      stx	FASTFETCH
   3077  4fd6					      endif
   3078  4fd6		       9a		      txs
   3079  4fd7				  -	      if	bankswitch == 64
   3080  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3081  4fd7					      else
   3082  4fd7		       a9 f3		      lda	#>(start-1)
   3083  4fd9					      endif
   3084  4fd9		       48		      pha
   3085  4fda		       a9 59		      lda	#<(start-1)
   3086  4fdc		       48		      pha
   3087  4fdd		       48		      pha
   3088  4fde		       8a		      txa
   3089  4fdf		       48		      pha
   3090  4fe0		       ba		      tsx
   3091  4fe1					      if	bankswitch != 64
   3092  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   3093  4fe3		       2a		      rol
   3094  4fe4		       2a		      rol
   3095  4fe5		       2a		      rol
   3096  4fe6		       2a		      rol
   3097  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3098  4fe9		       aa		      tax
   3099  4fea		       e8		      inx
   3100  4feb				  -	      else
   3101  4feb				  -	      lda	4,x	; get high byte of return address
   3102  4feb				  -	      tay
   3103  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3104  4feb				  -	      sta	4,x
   3105  4feb				  -	      tya
   3106  4feb				  -	      lsr
   3107  4feb				  -	      lsr
   3108  4feb				  -	      lsr
   3109  4feb				  -	      lsr
   3110  4feb				  -	      tax
   3111  4feb				  -	      inx
   3112  4feb					      endif
   3113  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   3114  4fee		       68		      pla
   3115  4fef		       aa		      tax
   3116  4ff0		       68		      pla
   3117  4ff1		       60		      rts
   3118  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3119  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3120  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3121  4ff2					      endif
   3122  4ffc					      ORG	$4FFC
   3123  4ffc					      RORG	$7FFC
   3124  4ffc		       d4 7f		      .word.w	(start_bank4 & $ffff)
   3125  4ffe		       d4 7f		      .word.w	(start_bank4 & $ffff)
   3126  5000					      ORG	$5000
   3127  5000					      RORG	$9000
   3128  5000					      repeat	256
   3129  5000		       ff		      .byte.b	$ff
   3128  5000					      repend
   3129  5001		       ff		      .byte.b	$ff
   3128  5001					      repend
   3129  5002		       ff		      .byte.b	$ff
   3128  5002					      repend
   3129  5003		       ff		      .byte.b	$ff
   3128  5003					      repend
   3129  5004		       ff		      .byte.b	$ff
   3128  5004					      repend
   3129  5005		       ff		      .byte.b	$ff
   3128  5005					      repend
   3129  5006		       ff		      .byte.b	$ff
   3128  5006					      repend
   3129  5007		       ff		      .byte.b	$ff
   3128  5007					      repend
   3129  5008		       ff		      .byte.b	$ff
   3128  5008					      repend
   3129  5009		       ff		      .byte.b	$ff
   3128  5009					      repend
   3129  500a		       ff		      .byte.b	$ff
   3128  500a					      repend
   3129  500b		       ff		      .byte.b	$ff
   3128  500b					      repend
   3129  500c		       ff		      .byte.b	$ff
   3128  500c					      repend
   3129  500d		       ff		      .byte.b	$ff
   3128  500d					      repend
   3129  500e		       ff		      .byte.b	$ff
   3128  500e					      repend
   3129  500f		       ff		      .byte.b	$ff
   3128  500f					      repend
   3129  5010		       ff		      .byte.b	$ff
   3128  5010					      repend
   3129  5011		       ff		      .byte.b	$ff
   3128  5011					      repend
   3129  5012		       ff		      .byte.b	$ff
   3128  5012					      repend
   3129  5013		       ff		      .byte.b	$ff
   3128  5013					      repend
   3129  5014		       ff		      .byte.b	$ff
   3128  5014					      repend
   3129  5015		       ff		      .byte.b	$ff
   3128  5015					      repend
   3129  5016		       ff		      .byte.b	$ff
   3128  5016					      repend
   3129  5017		       ff		      .byte.b	$ff
   3128  5017					      repend
   3129  5018		       ff		      .byte.b	$ff
   3128  5018					      repend
   3129  5019		       ff		      .byte.b	$ff
   3128  5019					      repend
   3129  501a		       ff		      .byte.b	$ff
   3128  501a					      repend
   3129  501b		       ff		      .byte.b	$ff
   3128  501b					      repend
   3129  501c		       ff		      .byte.b	$ff
   3128  501c					      repend
   3129  501d		       ff		      .byte.b	$ff
   3128  501d					      repend
   3129  501e		       ff		      .byte.b	$ff
   3128  501e					      repend
   3129  501f		       ff		      .byte.b	$ff
   3128  501f					      repend
   3129  5020		       ff		      .byte.b	$ff
   3128  5020					      repend
   3129  5021		       ff		      .byte.b	$ff
   3128  5021					      repend
   3129  5022		       ff		      .byte.b	$ff
   3128  5022					      repend
   3129  5023		       ff		      .byte.b	$ff
   3128  5023					      repend
   3129  5024		       ff		      .byte.b	$ff
   3128  5024					      repend
   3129  5025		       ff		      .byte.b	$ff
   3128  5025					      repend
   3129  5026		       ff		      .byte.b	$ff
   3128  5026					      repend
   3129  5027		       ff		      .byte.b	$ff
   3128  5027					      repend
   3129  5028		       ff		      .byte.b	$ff
   3128  5028					      repend
   3129  5029		       ff		      .byte.b	$ff
   3128  5029					      repend
   3129  502a		       ff		      .byte.b	$ff
   3128  502a					      repend
   3129  502b		       ff		      .byte.b	$ff
   3128  502b					      repend
   3129  502c		       ff		      .byte.b	$ff
   3128  502c					      repend
   3129  502d		       ff		      .byte.b	$ff
   3128  502d					      repend
   3129  502e		       ff		      .byte.b	$ff
   3128  502e					      repend
   3129  502f		       ff		      .byte.b	$ff
   3128  502f					      repend
   3129  5030		       ff		      .byte.b	$ff
   3128  5030					      repend
   3129  5031		       ff		      .byte.b	$ff
   3128  5031					      repend
   3129  5032		       ff		      .byte.b	$ff
   3128  5032					      repend
   3129  5033		       ff		      .byte.b	$ff
   3128  5033					      repend
   3129  5034		       ff		      .byte.b	$ff
   3128  5034					      repend
   3129  5035		       ff		      .byte.b	$ff
   3128  5035					      repend
   3129  5036		       ff		      .byte.b	$ff
   3128  5036					      repend
   3129  5037		       ff		      .byte.b	$ff
   3128  5037					      repend
   3129  5038		       ff		      .byte.b	$ff
   3128  5038					      repend
   3129  5039		       ff		      .byte.b	$ff
   3128  5039					      repend
   3129  503a		       ff		      .byte.b	$ff
   3128  503a					      repend
   3129  503b		       ff		      .byte.b	$ff
   3128  503b					      repend
   3129  503c		       ff		      .byte.b	$ff
   3128  503c					      repend
   3129  503d		       ff		      .byte.b	$ff
   3128  503d					      repend
   3129  503e		       ff		      .byte.b	$ff
   3128  503e					      repend
   3129  503f		       ff		      .byte.b	$ff
   3128  503f					      repend
   3129  5040		       ff		      .byte.b	$ff
   3128  5040					      repend
   3129  5041		       ff		      .byte.b	$ff
   3128  5041					      repend
   3129  5042		       ff		      .byte.b	$ff
   3128  5042					      repend
   3129  5043		       ff		      .byte.b	$ff
   3128  5043					      repend
   3129  5044		       ff		      .byte.b	$ff
   3128  5044					      repend
   3129  5045		       ff		      .byte.b	$ff
   3128  5045					      repend
   3129  5046		       ff		      .byte.b	$ff
   3128  5046					      repend
   3129  5047		       ff		      .byte.b	$ff
   3128  5047					      repend
   3129  5048		       ff		      .byte.b	$ff
   3128  5048					      repend
   3129  5049		       ff		      .byte.b	$ff
   3128  5049					      repend
   3129  504a		       ff		      .byte.b	$ff
   3128  504a					      repend
   3129  504b		       ff		      .byte.b	$ff
   3128  504b					      repend
   3129  504c		       ff		      .byte.b	$ff
   3128  504c					      repend
   3129  504d		       ff		      .byte.b	$ff
   3128  504d					      repend
   3129  504e		       ff		      .byte.b	$ff
   3128  504e					      repend
   3129  504f		       ff		      .byte.b	$ff
   3128  504f					      repend
   3129  5050		       ff		      .byte.b	$ff
   3128  5050					      repend
   3129  5051		       ff		      .byte.b	$ff
   3128  5051					      repend
   3129  5052		       ff		      .byte.b	$ff
   3128  5052					      repend
   3129  5053		       ff		      .byte.b	$ff
   3128  5053					      repend
   3129  5054		       ff		      .byte.b	$ff
   3128  5054					      repend
   3129  5055		       ff		      .byte.b	$ff
   3128  5055					      repend
   3129  5056		       ff		      .byte.b	$ff
   3128  5056					      repend
   3129  5057		       ff		      .byte.b	$ff
   3128  5057					      repend
   3129  5058		       ff		      .byte.b	$ff
   3128  5058					      repend
   3129  5059		       ff		      .byte.b	$ff
   3128  5059					      repend
   3129  505a		       ff		      .byte.b	$ff
   3128  505a					      repend
   3129  505b		       ff		      .byte.b	$ff
   3128  505b					      repend
   3129  505c		       ff		      .byte.b	$ff
   3128  505c					      repend
   3129  505d		       ff		      .byte.b	$ff
   3128  505d					      repend
   3129  505e		       ff		      .byte.b	$ff
   3128  505e					      repend
   3129  505f		       ff		      .byte.b	$ff
   3128  505f					      repend
   3129  5060		       ff		      .byte.b	$ff
   3128  5060					      repend
   3129  5061		       ff		      .byte.b	$ff
   3128  5061					      repend
   3129  5062		       ff		      .byte.b	$ff
   3128  5062					      repend
   3129  5063		       ff		      .byte.b	$ff
   3128  5063					      repend
   3129  5064		       ff		      .byte.b	$ff
   3128  5064					      repend
   3129  5065		       ff		      .byte.b	$ff
   3128  5065					      repend
   3129  5066		       ff		      .byte.b	$ff
   3128  5066					      repend
   3129  5067		       ff		      .byte.b	$ff
   3128  5067					      repend
   3129  5068		       ff		      .byte.b	$ff
   3128  5068					      repend
   3129  5069		       ff		      .byte.b	$ff
   3128  5069					      repend
   3129  506a		       ff		      .byte.b	$ff
   3128  506a					      repend
   3129  506b		       ff		      .byte.b	$ff
   3128  506b					      repend
   3129  506c		       ff		      .byte.b	$ff
   3128  506c					      repend
   3129  506d		       ff		      .byte.b	$ff
   3128  506d					      repend
   3129  506e		       ff		      .byte.b	$ff
   3128  506e					      repend
   3129  506f		       ff		      .byte.b	$ff
   3128  506f					      repend
   3129  5070		       ff		      .byte.b	$ff
   3128  5070					      repend
   3129  5071		       ff		      .byte.b	$ff
   3128  5071					      repend
   3129  5072		       ff		      .byte.b	$ff
   3128  5072					      repend
   3129  5073		       ff		      .byte.b	$ff
   3128  5073					      repend
   3129  5074		       ff		      .byte.b	$ff
   3128  5074					      repend
   3129  5075		       ff		      .byte.b	$ff
   3128  5075					      repend
   3129  5076		       ff		      .byte.b	$ff
   3128  5076					      repend
   3129  5077		       ff		      .byte.b	$ff
   3128  5077					      repend
   3129  5078		       ff		      .byte.b	$ff
   3128  5078					      repend
   3129  5079		       ff		      .byte.b	$ff
   3128  5079					      repend
   3129  507a		       ff		      .byte.b	$ff
   3128  507a					      repend
   3129  507b		       ff		      .byte.b	$ff
   3128  507b					      repend
   3129  507c		       ff		      .byte.b	$ff
   3128  507c					      repend
   3129  507d		       ff		      .byte.b	$ff
   3128  507d					      repend
   3129  507e		       ff		      .byte.b	$ff
   3128  507e					      repend
   3129  507f		       ff		      .byte.b	$ff
   3128  507f					      repend
   3129  5080		       ff		      .byte.b	$ff
   3128  5080					      repend
   3129  5081		       ff		      .byte.b	$ff
   3128  5081					      repend
   3129  5082		       ff		      .byte.b	$ff
   3128  5082					      repend
   3129  5083		       ff		      .byte.b	$ff
   3128  5083					      repend
   3129  5084		       ff		      .byte.b	$ff
   3128  5084					      repend
   3129  5085		       ff		      .byte.b	$ff
   3128  5085					      repend
   3129  5086		       ff		      .byte.b	$ff
   3128  5086					      repend
   3129  5087		       ff		      .byte.b	$ff
   3128  5087					      repend
   3129  5088		       ff		      .byte.b	$ff
   3128  5088					      repend
   3129  5089		       ff		      .byte.b	$ff
   3128  5089					      repend
   3129  508a		       ff		      .byte.b	$ff
   3128  508a					      repend
   3129  508b		       ff		      .byte.b	$ff
   3128  508b					      repend
   3129  508c		       ff		      .byte.b	$ff
   3128  508c					      repend
   3129  508d		       ff		      .byte.b	$ff
   3128  508d					      repend
   3129  508e		       ff		      .byte.b	$ff
   3128  508e					      repend
   3129  508f		       ff		      .byte.b	$ff
   3128  508f					      repend
   3129  5090		       ff		      .byte.b	$ff
   3128  5090					      repend
   3129  5091		       ff		      .byte.b	$ff
   3128  5091					      repend
   3129  5092		       ff		      .byte.b	$ff
   3128  5092					      repend
   3129  5093		       ff		      .byte.b	$ff
   3128  5093					      repend
   3129  5094		       ff		      .byte.b	$ff
   3128  5094					      repend
   3129  5095		       ff		      .byte.b	$ff
   3128  5095					      repend
   3129  5096		       ff		      .byte.b	$ff
   3128  5096					      repend
   3129  5097		       ff		      .byte.b	$ff
   3128  5097					      repend
   3129  5098		       ff		      .byte.b	$ff
   3128  5098					      repend
   3129  5099		       ff		      .byte.b	$ff
   3128  5099					      repend
   3129  509a		       ff		      .byte.b	$ff
   3128  509a					      repend
   3129  509b		       ff		      .byte.b	$ff
   3128  509b					      repend
   3129  509c		       ff		      .byte.b	$ff
   3128  509c					      repend
   3129  509d		       ff		      .byte.b	$ff
   3128  509d					      repend
   3129  509e		       ff		      .byte.b	$ff
   3128  509e					      repend
   3129  509f		       ff		      .byte.b	$ff
   3128  509f					      repend
   3129  50a0		       ff		      .byte.b	$ff
   3128  50a0					      repend
   3129  50a1		       ff		      .byte.b	$ff
   3128  50a1					      repend
   3129  50a2		       ff		      .byte.b	$ff
   3128  50a2					      repend
   3129  50a3		       ff		      .byte.b	$ff
   3128  50a3					      repend
   3129  50a4		       ff		      .byte.b	$ff
   3128  50a4					      repend
   3129  50a5		       ff		      .byte.b	$ff
   3128  50a5					      repend
   3129  50a6		       ff		      .byte.b	$ff
   3128  50a6					      repend
   3129  50a7		       ff		      .byte.b	$ff
   3128  50a7					      repend
   3129  50a8		       ff		      .byte.b	$ff
   3128  50a8					      repend
   3129  50a9		       ff		      .byte.b	$ff
   3128  50a9					      repend
   3129  50aa		       ff		      .byte.b	$ff
   3128  50aa					      repend
   3129  50ab		       ff		      .byte.b	$ff
   3128  50ab					      repend
   3129  50ac		       ff		      .byte.b	$ff
   3128  50ac					      repend
   3129  50ad		       ff		      .byte.b	$ff
   3128  50ad					      repend
   3129  50ae		       ff		      .byte.b	$ff
   3128  50ae					      repend
   3129  50af		       ff		      .byte.b	$ff
   3128  50af					      repend
   3129  50b0		       ff		      .byte.b	$ff
   3128  50b0					      repend
   3129  50b1		       ff		      .byte.b	$ff
   3128  50b1					      repend
   3129  50b2		       ff		      .byte.b	$ff
   3128  50b2					      repend
   3129  50b3		       ff		      .byte.b	$ff
   3128  50b3					      repend
   3129  50b4		       ff		      .byte.b	$ff
   3128  50b4					      repend
   3129  50b5		       ff		      .byte.b	$ff
   3128  50b5					      repend
   3129  50b6		       ff		      .byte.b	$ff
   3128  50b6					      repend
   3129  50b7		       ff		      .byte.b	$ff
   3128  50b7					      repend
   3129  50b8		       ff		      .byte.b	$ff
   3128  50b8					      repend
   3129  50b9		       ff		      .byte.b	$ff
   3128  50b9					      repend
   3129  50ba		       ff		      .byte.b	$ff
   3128  50ba					      repend
   3129  50bb		       ff		      .byte.b	$ff
   3128  50bb					      repend
   3129  50bc		       ff		      .byte.b	$ff
   3128  50bc					      repend
   3129  50bd		       ff		      .byte.b	$ff
   3128  50bd					      repend
   3129  50be		       ff		      .byte.b	$ff
   3128  50be					      repend
   3129  50bf		       ff		      .byte.b	$ff
   3128  50bf					      repend
   3129  50c0		       ff		      .byte.b	$ff
   3128  50c0					      repend
   3129  50c1		       ff		      .byte.b	$ff
   3128  50c1					      repend
   3129  50c2		       ff		      .byte.b	$ff
   3128  50c2					      repend
   3129  50c3		       ff		      .byte.b	$ff
   3128  50c3					      repend
   3129  50c4		       ff		      .byte.b	$ff
   3128  50c4					      repend
   3129  50c5		       ff		      .byte.b	$ff
   3128  50c5					      repend
   3129  50c6		       ff		      .byte.b	$ff
   3128  50c6					      repend
   3129  50c7		       ff		      .byte.b	$ff
   3128  50c7					      repend
   3129  50c8		       ff		      .byte.b	$ff
   3128  50c8					      repend
   3129  50c9		       ff		      .byte.b	$ff
   3128  50c9					      repend
   3129  50ca		       ff		      .byte.b	$ff
   3128  50ca					      repend
   3129  50cb		       ff		      .byte.b	$ff
   3128  50cb					      repend
   3129  50cc		       ff		      .byte.b	$ff
   3128  50cc					      repend
   3129  50cd		       ff		      .byte.b	$ff
   3128  50cd					      repend
   3129  50ce		       ff		      .byte.b	$ff
   3128  50ce					      repend
   3129  50cf		       ff		      .byte.b	$ff
   3128  50cf					      repend
   3129  50d0		       ff		      .byte.b	$ff
   3128  50d0					      repend
   3129  50d1		       ff		      .byte.b	$ff
   3128  50d1					      repend
   3129  50d2		       ff		      .byte.b	$ff
   3128  50d2					      repend
   3129  50d3		       ff		      .byte.b	$ff
   3128  50d3					      repend
   3129  50d4		       ff		      .byte.b	$ff
   3128  50d4					      repend
   3129  50d5		       ff		      .byte.b	$ff
   3128  50d5					      repend
   3129  50d6		       ff		      .byte.b	$ff
   3128  50d6					      repend
   3129  50d7		       ff		      .byte.b	$ff
   3128  50d7					      repend
   3129  50d8		       ff		      .byte.b	$ff
   3128  50d8					      repend
   3129  50d9		       ff		      .byte.b	$ff
   3128  50d9					      repend
   3129  50da		       ff		      .byte.b	$ff
   3128  50da					      repend
   3129  50db		       ff		      .byte.b	$ff
   3128  50db					      repend
   3129  50dc		       ff		      .byte.b	$ff
   3128  50dc					      repend
   3129  50dd		       ff		      .byte.b	$ff
   3128  50dd					      repend
   3129  50de		       ff		      .byte.b	$ff
   3128  50de					      repend
   3129  50df		       ff		      .byte.b	$ff
   3128  50df					      repend
   3129  50e0		       ff		      .byte.b	$ff
   3128  50e0					      repend
   3129  50e1		       ff		      .byte.b	$ff
   3128  50e1					      repend
   3129  50e2		       ff		      .byte.b	$ff
   3128  50e2					      repend
   3129  50e3		       ff		      .byte.b	$ff
   3128  50e3					      repend
   3129  50e4		       ff		      .byte.b	$ff
   3128  50e4					      repend
   3129  50e5		       ff		      .byte.b	$ff
   3128  50e5					      repend
   3129  50e6		       ff		      .byte.b	$ff
   3128  50e6					      repend
   3129  50e7		       ff		      .byte.b	$ff
   3128  50e7					      repend
   3129  50e8		       ff		      .byte.b	$ff
   3128  50e8					      repend
   3129  50e9		       ff		      .byte.b	$ff
   3128  50e9					      repend
   3129  50ea		       ff		      .byte.b	$ff
   3128  50ea					      repend
   3129  50eb		       ff		      .byte.b	$ff
   3128  50eb					      repend
   3129  50ec		       ff		      .byte.b	$ff
   3128  50ec					      repend
   3129  50ed		       ff		      .byte.b	$ff
   3128  50ed					      repend
   3129  50ee		       ff		      .byte.b	$ff
   3128  50ee					      repend
   3129  50ef		       ff		      .byte.b	$ff
   3128  50ef					      repend
   3129  50f0		       ff		      .byte.b	$ff
   3128  50f0					      repend
   3129  50f1		       ff		      .byte.b	$ff
   3128  50f1					      repend
   3129  50f2		       ff		      .byte.b	$ff
   3128  50f2					      repend
   3129  50f3		       ff		      .byte.b	$ff
   3128  50f3					      repend
   3129  50f4		       ff		      .byte.b	$ff
   3128  50f4					      repend
   3129  50f5		       ff		      .byte.b	$ff
   3128  50f5					      repend
   3129  50f6		       ff		      .byte.b	$ff
   3128  50f6					      repend
   3129  50f7		       ff		      .byte.b	$ff
   3128  50f7					      repend
   3129  50f8		       ff		      .byte.b	$ff
   3128  50f8					      repend
   3129  50f9		       ff		      .byte.b	$ff
   3128  50f9					      repend
   3129  50fa		       ff		      .byte.b	$ff
   3128  50fa					      repend
   3129  50fb		       ff		      .byte.b	$ff
   3128  50fb					      repend
   3129  50fc		       ff		      .byte.b	$ff
   3128  50fc					      repend
   3129  50fd		       ff		      .byte.b	$ff
   3128  50fd					      repend
   3129  50fe		       ff		      .byte.b	$ff
   3128  50fe					      repend
   3129  50ff		       ff		      .byte.b	$ff
   3130  5100					      repend
   3131  5100				   .
   3132  5100							; 
   3133  5100
   3134  5100				   .L0226		;  bank 6
   3135  5100
   3136  5100					      if	ECHO5
      3796 bytes of ROM space left in bank 5
   3137  5100					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
   3138  5100					      endif
   3139  5100		       00 01	   ECHO5      =	1
   3140  5fd4					      ORG	$5FF4-bscode_length
   3141  5fd4					      RORG	$9FF4-bscode_length
   3142  5fd4		       a2 ff	   start_bank5 ldx	#$ff
   3143  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3144  5fd6				  -	      stx	FASTFETCH
   3145  5fd6					      endif
   3146  5fd6		       9a		      txs
   3147  5fd7				  -	      if	bankswitch == 64
   3148  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3149  5fd7					      else
   3150  5fd7		       a9 f3		      lda	#>(start-1)
   3151  5fd9					      endif
   3152  5fd9		       48		      pha
   3153  5fda		       a9 59		      lda	#<(start-1)
   3154  5fdc		       48		      pha
   3155  5fdd		       48		      pha
   3156  5fde		       8a		      txa
   3157  5fdf		       48		      pha
   3158  5fe0		       ba		      tsx
   3159  5fe1					      if	bankswitch != 64
   3160  5fe1		       b5 04		      lda	4,x	; get high byte of return address
   3161  5fe3		       2a		      rol
   3162  5fe4		       2a		      rol
   3163  5fe5		       2a		      rol
   3164  5fe6		       2a		      rol
   3165  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3166  5fe9		       aa		      tax
   3167  5fea		       e8		      inx
   3168  5feb				  -	      else
   3169  5feb				  -	      lda	4,x	; get high byte of return address
   3170  5feb				  -	      tay
   3171  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3172  5feb				  -	      sta	4,x
   3173  5feb				  -	      tya
   3174  5feb				  -	      lsr
   3175  5feb				  -	      lsr
   3176  5feb				  -	      lsr
   3177  5feb				  -	      lsr
   3178  5feb				  -	      tax
   3179  5feb				  -	      inx
   3180  5feb					      endif
   3181  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   3182  5fee		       68		      pla
   3183  5fef		       aa		      tax
   3184  5ff0		       68		      pla
   3185  5ff1		       60		      rts
   3186  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3187  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3188  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3189  5ff2					      endif
   3190  5ffc					      ORG	$5FFC
   3191  5ffc					      RORG	$9FFC
   3192  5ffc		       d4 9f		      .word.w	(start_bank5 & $ffff)
   3193  5ffe		       d4 9f		      .word.w	(start_bank5 & $ffff)
   3194  6000					      ORG	$6000
   3195  6000					      RORG	$B000
   3196  6000					      repeat	256
   3197  6000		       ff		      .byte.b	$ff
   3196  6000					      repend
   3197  6001		       ff		      .byte.b	$ff
   3196  6001					      repend
   3197  6002		       ff		      .byte.b	$ff
   3196  6002					      repend
   3197  6003		       ff		      .byte.b	$ff
   3196  6003					      repend
   3197  6004		       ff		      .byte.b	$ff
   3196  6004					      repend
   3197  6005		       ff		      .byte.b	$ff
   3196  6005					      repend
   3197  6006		       ff		      .byte.b	$ff
   3196  6006					      repend
   3197  6007		       ff		      .byte.b	$ff
   3196  6007					      repend
   3197  6008		       ff		      .byte.b	$ff
   3196  6008					      repend
   3197  6009		       ff		      .byte.b	$ff
   3196  6009					      repend
   3197  600a		       ff		      .byte.b	$ff
   3196  600a					      repend
   3197  600b		       ff		      .byte.b	$ff
   3196  600b					      repend
   3197  600c		       ff		      .byte.b	$ff
   3196  600c					      repend
   3197  600d		       ff		      .byte.b	$ff
   3196  600d					      repend
   3197  600e		       ff		      .byte.b	$ff
   3196  600e					      repend
   3197  600f		       ff		      .byte.b	$ff
   3196  600f					      repend
   3197  6010		       ff		      .byte.b	$ff
   3196  6010					      repend
   3197  6011		       ff		      .byte.b	$ff
   3196  6011					      repend
   3197  6012		       ff		      .byte.b	$ff
   3196  6012					      repend
   3197  6013		       ff		      .byte.b	$ff
   3196  6013					      repend
   3197  6014		       ff		      .byte.b	$ff
   3196  6014					      repend
   3197  6015		       ff		      .byte.b	$ff
   3196  6015					      repend
   3197  6016		       ff		      .byte.b	$ff
   3196  6016					      repend
   3197  6017		       ff		      .byte.b	$ff
   3196  6017					      repend
   3197  6018		       ff		      .byte.b	$ff
   3196  6018					      repend
   3197  6019		       ff		      .byte.b	$ff
   3196  6019					      repend
   3197  601a		       ff		      .byte.b	$ff
   3196  601a					      repend
   3197  601b		       ff		      .byte.b	$ff
   3196  601b					      repend
   3197  601c		       ff		      .byte.b	$ff
   3196  601c					      repend
   3197  601d		       ff		      .byte.b	$ff
   3196  601d					      repend
   3197  601e		       ff		      .byte.b	$ff
   3196  601e					      repend
   3197  601f		       ff		      .byte.b	$ff
   3196  601f					      repend
   3197  6020		       ff		      .byte.b	$ff
   3196  6020					      repend
   3197  6021		       ff		      .byte.b	$ff
   3196  6021					      repend
   3197  6022		       ff		      .byte.b	$ff
   3196  6022					      repend
   3197  6023		       ff		      .byte.b	$ff
   3196  6023					      repend
   3197  6024		       ff		      .byte.b	$ff
   3196  6024					      repend
   3197  6025		       ff		      .byte.b	$ff
   3196  6025					      repend
   3197  6026		       ff		      .byte.b	$ff
   3196  6026					      repend
   3197  6027		       ff		      .byte.b	$ff
   3196  6027					      repend
   3197  6028		       ff		      .byte.b	$ff
   3196  6028					      repend
   3197  6029		       ff		      .byte.b	$ff
   3196  6029					      repend
   3197  602a		       ff		      .byte.b	$ff
   3196  602a					      repend
   3197  602b		       ff		      .byte.b	$ff
   3196  602b					      repend
   3197  602c		       ff		      .byte.b	$ff
   3196  602c					      repend
   3197  602d		       ff		      .byte.b	$ff
   3196  602d					      repend
   3197  602e		       ff		      .byte.b	$ff
   3196  602e					      repend
   3197  602f		       ff		      .byte.b	$ff
   3196  602f					      repend
   3197  6030		       ff		      .byte.b	$ff
   3196  6030					      repend
   3197  6031		       ff		      .byte.b	$ff
   3196  6031					      repend
   3197  6032		       ff		      .byte.b	$ff
   3196  6032					      repend
   3197  6033		       ff		      .byte.b	$ff
   3196  6033					      repend
   3197  6034		       ff		      .byte.b	$ff
   3196  6034					      repend
   3197  6035		       ff		      .byte.b	$ff
   3196  6035					      repend
   3197  6036		       ff		      .byte.b	$ff
   3196  6036					      repend
   3197  6037		       ff		      .byte.b	$ff
   3196  6037					      repend
   3197  6038		       ff		      .byte.b	$ff
   3196  6038					      repend
   3197  6039		       ff		      .byte.b	$ff
   3196  6039					      repend
   3197  603a		       ff		      .byte.b	$ff
   3196  603a					      repend
   3197  603b		       ff		      .byte.b	$ff
   3196  603b					      repend
   3197  603c		       ff		      .byte.b	$ff
   3196  603c					      repend
   3197  603d		       ff		      .byte.b	$ff
   3196  603d					      repend
   3197  603e		       ff		      .byte.b	$ff
   3196  603e					      repend
   3197  603f		       ff		      .byte.b	$ff
   3196  603f					      repend
   3197  6040		       ff		      .byte.b	$ff
   3196  6040					      repend
   3197  6041		       ff		      .byte.b	$ff
   3196  6041					      repend
   3197  6042		       ff		      .byte.b	$ff
   3196  6042					      repend
   3197  6043		       ff		      .byte.b	$ff
   3196  6043					      repend
   3197  6044		       ff		      .byte.b	$ff
   3196  6044					      repend
   3197  6045		       ff		      .byte.b	$ff
   3196  6045					      repend
   3197  6046		       ff		      .byte.b	$ff
   3196  6046					      repend
   3197  6047		       ff		      .byte.b	$ff
   3196  6047					      repend
   3197  6048		       ff		      .byte.b	$ff
   3196  6048					      repend
   3197  6049		       ff		      .byte.b	$ff
   3196  6049					      repend
   3197  604a		       ff		      .byte.b	$ff
   3196  604a					      repend
   3197  604b		       ff		      .byte.b	$ff
   3196  604b					      repend
   3197  604c		       ff		      .byte.b	$ff
   3196  604c					      repend
   3197  604d		       ff		      .byte.b	$ff
   3196  604d					      repend
   3197  604e		       ff		      .byte.b	$ff
   3196  604e					      repend
   3197  604f		       ff		      .byte.b	$ff
   3196  604f					      repend
   3197  6050		       ff		      .byte.b	$ff
   3196  6050					      repend
   3197  6051		       ff		      .byte.b	$ff
   3196  6051					      repend
   3197  6052		       ff		      .byte.b	$ff
   3196  6052					      repend
   3197  6053		       ff		      .byte.b	$ff
   3196  6053					      repend
   3197  6054		       ff		      .byte.b	$ff
   3196  6054					      repend
   3197  6055		       ff		      .byte.b	$ff
   3196  6055					      repend
   3197  6056		       ff		      .byte.b	$ff
   3196  6056					      repend
   3197  6057		       ff		      .byte.b	$ff
   3196  6057					      repend
   3197  6058		       ff		      .byte.b	$ff
   3196  6058					      repend
   3197  6059		       ff		      .byte.b	$ff
   3196  6059					      repend
   3197  605a		       ff		      .byte.b	$ff
   3196  605a					      repend
   3197  605b		       ff		      .byte.b	$ff
   3196  605b					      repend
   3197  605c		       ff		      .byte.b	$ff
   3196  605c					      repend
   3197  605d		       ff		      .byte.b	$ff
   3196  605d					      repend
   3197  605e		       ff		      .byte.b	$ff
   3196  605e					      repend
   3197  605f		       ff		      .byte.b	$ff
   3196  605f					      repend
   3197  6060		       ff		      .byte.b	$ff
   3196  6060					      repend
   3197  6061		       ff		      .byte.b	$ff
   3196  6061					      repend
   3197  6062		       ff		      .byte.b	$ff
   3196  6062					      repend
   3197  6063		       ff		      .byte.b	$ff
   3196  6063					      repend
   3197  6064		       ff		      .byte.b	$ff
   3196  6064					      repend
   3197  6065		       ff		      .byte.b	$ff
   3196  6065					      repend
   3197  6066		       ff		      .byte.b	$ff
   3196  6066					      repend
   3197  6067		       ff		      .byte.b	$ff
   3196  6067					      repend
   3197  6068		       ff		      .byte.b	$ff
   3196  6068					      repend
   3197  6069		       ff		      .byte.b	$ff
   3196  6069					      repend
   3197  606a		       ff		      .byte.b	$ff
   3196  606a					      repend
   3197  606b		       ff		      .byte.b	$ff
   3196  606b					      repend
   3197  606c		       ff		      .byte.b	$ff
   3196  606c					      repend
   3197  606d		       ff		      .byte.b	$ff
   3196  606d					      repend
   3197  606e		       ff		      .byte.b	$ff
   3196  606e					      repend
   3197  606f		       ff		      .byte.b	$ff
   3196  606f					      repend
   3197  6070		       ff		      .byte.b	$ff
   3196  6070					      repend
   3197  6071		       ff		      .byte.b	$ff
   3196  6071					      repend
   3197  6072		       ff		      .byte.b	$ff
   3196  6072					      repend
   3197  6073		       ff		      .byte.b	$ff
   3196  6073					      repend
   3197  6074		       ff		      .byte.b	$ff
   3196  6074					      repend
   3197  6075		       ff		      .byte.b	$ff
   3196  6075					      repend
   3197  6076		       ff		      .byte.b	$ff
   3196  6076					      repend
   3197  6077		       ff		      .byte.b	$ff
   3196  6077					      repend
   3197  6078		       ff		      .byte.b	$ff
   3196  6078					      repend
   3197  6079		       ff		      .byte.b	$ff
   3196  6079					      repend
   3197  607a		       ff		      .byte.b	$ff
   3196  607a					      repend
   3197  607b		       ff		      .byte.b	$ff
   3196  607b					      repend
   3197  607c		       ff		      .byte.b	$ff
   3196  607c					      repend
   3197  607d		       ff		      .byte.b	$ff
   3196  607d					      repend
   3197  607e		       ff		      .byte.b	$ff
   3196  607e					      repend
   3197  607f		       ff		      .byte.b	$ff
   3196  607f					      repend
   3197  6080		       ff		      .byte.b	$ff
   3196  6080					      repend
   3197  6081		       ff		      .byte.b	$ff
   3196  6081					      repend
   3197  6082		       ff		      .byte.b	$ff
   3196  6082					      repend
   3197  6083		       ff		      .byte.b	$ff
   3196  6083					      repend
   3197  6084		       ff		      .byte.b	$ff
   3196  6084					      repend
   3197  6085		       ff		      .byte.b	$ff
   3196  6085					      repend
   3197  6086		       ff		      .byte.b	$ff
   3196  6086					      repend
   3197  6087		       ff		      .byte.b	$ff
   3196  6087					      repend
   3197  6088		       ff		      .byte.b	$ff
   3196  6088					      repend
   3197  6089		       ff		      .byte.b	$ff
   3196  6089					      repend
   3197  608a		       ff		      .byte.b	$ff
   3196  608a					      repend
   3197  608b		       ff		      .byte.b	$ff
   3196  608b					      repend
   3197  608c		       ff		      .byte.b	$ff
   3196  608c					      repend
   3197  608d		       ff		      .byte.b	$ff
   3196  608d					      repend
   3197  608e		       ff		      .byte.b	$ff
   3196  608e					      repend
   3197  608f		       ff		      .byte.b	$ff
   3196  608f					      repend
   3197  6090		       ff		      .byte.b	$ff
   3196  6090					      repend
   3197  6091		       ff		      .byte.b	$ff
   3196  6091					      repend
   3197  6092		       ff		      .byte.b	$ff
   3196  6092					      repend
   3197  6093		       ff		      .byte.b	$ff
   3196  6093					      repend
   3197  6094		       ff		      .byte.b	$ff
   3196  6094					      repend
   3197  6095		       ff		      .byte.b	$ff
   3196  6095					      repend
   3197  6096		       ff		      .byte.b	$ff
   3196  6096					      repend
   3197  6097		       ff		      .byte.b	$ff
   3196  6097					      repend
   3197  6098		       ff		      .byte.b	$ff
   3196  6098					      repend
   3197  6099		       ff		      .byte.b	$ff
   3196  6099					      repend
   3197  609a		       ff		      .byte.b	$ff
   3196  609a					      repend
   3197  609b		       ff		      .byte.b	$ff
   3196  609b					      repend
   3197  609c		       ff		      .byte.b	$ff
   3196  609c					      repend
   3197  609d		       ff		      .byte.b	$ff
   3196  609d					      repend
   3197  609e		       ff		      .byte.b	$ff
   3196  609e					      repend
   3197  609f		       ff		      .byte.b	$ff
   3196  609f					      repend
   3197  60a0		       ff		      .byte.b	$ff
   3196  60a0					      repend
   3197  60a1		       ff		      .byte.b	$ff
   3196  60a1					      repend
   3197  60a2		       ff		      .byte.b	$ff
   3196  60a2					      repend
   3197  60a3		       ff		      .byte.b	$ff
   3196  60a3					      repend
   3197  60a4		       ff		      .byte.b	$ff
   3196  60a4					      repend
   3197  60a5		       ff		      .byte.b	$ff
   3196  60a5					      repend
   3197  60a6		       ff		      .byte.b	$ff
   3196  60a6					      repend
   3197  60a7		       ff		      .byte.b	$ff
   3196  60a7					      repend
   3197  60a8		       ff		      .byte.b	$ff
   3196  60a8					      repend
   3197  60a9		       ff		      .byte.b	$ff
   3196  60a9					      repend
   3197  60aa		       ff		      .byte.b	$ff
   3196  60aa					      repend
   3197  60ab		       ff		      .byte.b	$ff
   3196  60ab					      repend
   3197  60ac		       ff		      .byte.b	$ff
   3196  60ac					      repend
   3197  60ad		       ff		      .byte.b	$ff
   3196  60ad					      repend
   3197  60ae		       ff		      .byte.b	$ff
   3196  60ae					      repend
   3197  60af		       ff		      .byte.b	$ff
   3196  60af					      repend
   3197  60b0		       ff		      .byte.b	$ff
   3196  60b0					      repend
   3197  60b1		       ff		      .byte.b	$ff
   3196  60b1					      repend
   3197  60b2		       ff		      .byte.b	$ff
   3196  60b2					      repend
   3197  60b3		       ff		      .byte.b	$ff
   3196  60b3					      repend
   3197  60b4		       ff		      .byte.b	$ff
   3196  60b4					      repend
   3197  60b5		       ff		      .byte.b	$ff
   3196  60b5					      repend
   3197  60b6		       ff		      .byte.b	$ff
   3196  60b6					      repend
   3197  60b7		       ff		      .byte.b	$ff
   3196  60b7					      repend
   3197  60b8		       ff		      .byte.b	$ff
   3196  60b8					      repend
   3197  60b9		       ff		      .byte.b	$ff
   3196  60b9					      repend
   3197  60ba		       ff		      .byte.b	$ff
   3196  60ba					      repend
   3197  60bb		       ff		      .byte.b	$ff
   3196  60bb					      repend
   3197  60bc		       ff		      .byte.b	$ff
   3196  60bc					      repend
   3197  60bd		       ff		      .byte.b	$ff
   3196  60bd					      repend
   3197  60be		       ff		      .byte.b	$ff
   3196  60be					      repend
   3197  60bf		       ff		      .byte.b	$ff
   3196  60bf					      repend
   3197  60c0		       ff		      .byte.b	$ff
   3196  60c0					      repend
   3197  60c1		       ff		      .byte.b	$ff
   3196  60c1					      repend
   3197  60c2		       ff		      .byte.b	$ff
   3196  60c2					      repend
   3197  60c3		       ff		      .byte.b	$ff
   3196  60c3					      repend
   3197  60c4		       ff		      .byte.b	$ff
   3196  60c4					      repend
   3197  60c5		       ff		      .byte.b	$ff
   3196  60c5					      repend
   3197  60c6		       ff		      .byte.b	$ff
   3196  60c6					      repend
   3197  60c7		       ff		      .byte.b	$ff
   3196  60c7					      repend
   3197  60c8		       ff		      .byte.b	$ff
   3196  60c8					      repend
   3197  60c9		       ff		      .byte.b	$ff
   3196  60c9					      repend
   3197  60ca		       ff		      .byte.b	$ff
   3196  60ca					      repend
   3197  60cb		       ff		      .byte.b	$ff
   3196  60cb					      repend
   3197  60cc		       ff		      .byte.b	$ff
   3196  60cc					      repend
   3197  60cd		       ff		      .byte.b	$ff
   3196  60cd					      repend
   3197  60ce		       ff		      .byte.b	$ff
   3196  60ce					      repend
   3197  60cf		       ff		      .byte.b	$ff
   3196  60cf					      repend
   3197  60d0		       ff		      .byte.b	$ff
   3196  60d0					      repend
   3197  60d1		       ff		      .byte.b	$ff
   3196  60d1					      repend
   3197  60d2		       ff		      .byte.b	$ff
   3196  60d2					      repend
   3197  60d3		       ff		      .byte.b	$ff
   3196  60d3					      repend
   3197  60d4		       ff		      .byte.b	$ff
   3196  60d4					      repend
   3197  60d5		       ff		      .byte.b	$ff
   3196  60d5					      repend
   3197  60d6		       ff		      .byte.b	$ff
   3196  60d6					      repend
   3197  60d7		       ff		      .byte.b	$ff
   3196  60d7					      repend
   3197  60d8		       ff		      .byte.b	$ff
   3196  60d8					      repend
   3197  60d9		       ff		      .byte.b	$ff
   3196  60d9					      repend
   3197  60da		       ff		      .byte.b	$ff
   3196  60da					      repend
   3197  60db		       ff		      .byte.b	$ff
   3196  60db					      repend
   3197  60dc		       ff		      .byte.b	$ff
   3196  60dc					      repend
   3197  60dd		       ff		      .byte.b	$ff
   3196  60dd					      repend
   3197  60de		       ff		      .byte.b	$ff
   3196  60de					      repend
   3197  60df		       ff		      .byte.b	$ff
   3196  60df					      repend
   3197  60e0		       ff		      .byte.b	$ff
   3196  60e0					      repend
   3197  60e1		       ff		      .byte.b	$ff
   3196  60e1					      repend
   3197  60e2		       ff		      .byte.b	$ff
   3196  60e2					      repend
   3197  60e3		       ff		      .byte.b	$ff
   3196  60e3					      repend
   3197  60e4		       ff		      .byte.b	$ff
   3196  60e4					      repend
   3197  60e5		       ff		      .byte.b	$ff
   3196  60e5					      repend
   3197  60e6		       ff		      .byte.b	$ff
   3196  60e6					      repend
   3197  60e7		       ff		      .byte.b	$ff
   3196  60e7					      repend
   3197  60e8		       ff		      .byte.b	$ff
   3196  60e8					      repend
   3197  60e9		       ff		      .byte.b	$ff
   3196  60e9					      repend
   3197  60ea		       ff		      .byte.b	$ff
   3196  60ea					      repend
   3197  60eb		       ff		      .byte.b	$ff
   3196  60eb					      repend
   3197  60ec		       ff		      .byte.b	$ff
   3196  60ec					      repend
   3197  60ed		       ff		      .byte.b	$ff
   3196  60ed					      repend
   3197  60ee		       ff		      .byte.b	$ff
   3196  60ee					      repend
   3197  60ef		       ff		      .byte.b	$ff
   3196  60ef					      repend
   3197  60f0		       ff		      .byte.b	$ff
   3196  60f0					      repend
   3197  60f1		       ff		      .byte.b	$ff
   3196  60f1					      repend
   3197  60f2		       ff		      .byte.b	$ff
   3196  60f2					      repend
   3197  60f3		       ff		      .byte.b	$ff
   3196  60f3					      repend
   3197  60f4		       ff		      .byte.b	$ff
   3196  60f4					      repend
   3197  60f5		       ff		      .byte.b	$ff
   3196  60f5					      repend
   3197  60f6		       ff		      .byte.b	$ff
   3196  60f6					      repend
   3197  60f7		       ff		      .byte.b	$ff
   3196  60f7					      repend
   3197  60f8		       ff		      .byte.b	$ff
   3196  60f8					      repend
   3197  60f9		       ff		      .byte.b	$ff
   3196  60f9					      repend
   3197  60fa		       ff		      .byte.b	$ff
   3196  60fa					      repend
   3197  60fb		       ff		      .byte.b	$ff
   3196  60fb					      repend
   3197  60fc		       ff		      .byte.b	$ff
   3196  60fc					      repend
   3197  60fd		       ff		      .byte.b	$ff
   3196  60fd					      repend
   3197  60fe		       ff		      .byte.b	$ff
   3196  60fe					      repend
   3197  60ff		       ff		      .byte.b	$ff
   3198  6100					      repend
   3199  6100				   .
   3200  6100							; 
   3201  6100
   3202  6100				   .L0227		;  bank 7
   3203  6100
   3204  6100					      if	ECHO6
      3796 bytes of ROM space left in bank 6
   3205  6100					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
   3206  6100					      endif
   3207  6100		       00 01	   ECHO6      =	1
   3208  6fd4					      ORG	$6FF4-bscode_length
   3209  6fd4					      RORG	$BFF4-bscode_length
   3210  6fd4		       a2 ff	   start_bank6 ldx	#$ff
   3211  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3212  6fd6				  -	      stx	FASTFETCH
   3213  6fd6					      endif
   3214  6fd6		       9a		      txs
   3215  6fd7				  -	      if	bankswitch == 64
   3216  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3217  6fd7					      else
   3218  6fd7		       a9 f3		      lda	#>(start-1)
   3219  6fd9					      endif
   3220  6fd9		       48		      pha
   3221  6fda		       a9 59		      lda	#<(start-1)
   3222  6fdc		       48		      pha
   3223  6fdd		       48		      pha
   3224  6fde		       8a		      txa
   3225  6fdf		       48		      pha
   3226  6fe0		       ba		      tsx
   3227  6fe1					      if	bankswitch != 64
   3228  6fe1		       b5 04		      lda	4,x	; get high byte of return address
   3229  6fe3		       2a		      rol
   3230  6fe4		       2a		      rol
   3231  6fe5		       2a		      rol
   3232  6fe6		       2a		      rol
   3233  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3234  6fe9		       aa		      tax
   3235  6fea		       e8		      inx
   3236  6feb				  -	      else
   3237  6feb				  -	      lda	4,x	; get high byte of return address
   3238  6feb				  -	      tay
   3239  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3240  6feb				  -	      sta	4,x
   3241  6feb				  -	      tya
   3242  6feb				  -	      lsr
   3243  6feb				  -	      lsr
   3244  6feb				  -	      lsr
   3245  6feb				  -	      lsr
   3246  6feb				  -	      tax
   3247  6feb				  -	      inx
   3248  6feb					      endif
   3249  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   3250  6fee		       68		      pla
   3251  6fef		       aa		      tax
   3252  6ff0		       68		      pla
   3253  6ff1		       60		      rts
   3254  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3255  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3256  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3257  6ff2					      endif
   3258  6ffc					      ORG	$6FFC
   3259  6ffc					      RORG	$BFFC
   3260  6ffc		       d4 bf		      .word.w	(start_bank6 & $ffff)
   3261  6ffe		       d4 bf		      .word.w	(start_bank6 & $ffff)
   3262  7000					      ORG	$7000
   3263  7000					      RORG	$D000
   3264  7000					      repeat	256
   3265  7000		       ff		      .byte.b	$ff
   3264  7000					      repend
   3265  7001		       ff		      .byte.b	$ff
   3264  7001					      repend
   3265  7002		       ff		      .byte.b	$ff
   3264  7002					      repend
   3265  7003		       ff		      .byte.b	$ff
   3264  7003					      repend
   3265  7004		       ff		      .byte.b	$ff
   3264  7004					      repend
   3265  7005		       ff		      .byte.b	$ff
   3264  7005					      repend
   3265  7006		       ff		      .byte.b	$ff
   3264  7006					      repend
   3265  7007		       ff		      .byte.b	$ff
   3264  7007					      repend
   3265  7008		       ff		      .byte.b	$ff
   3264  7008					      repend
   3265  7009		       ff		      .byte.b	$ff
   3264  7009					      repend
   3265  700a		       ff		      .byte.b	$ff
   3264  700a					      repend
   3265  700b		       ff		      .byte.b	$ff
   3264  700b					      repend
   3265  700c		       ff		      .byte.b	$ff
   3264  700c					      repend
   3265  700d		       ff		      .byte.b	$ff
   3264  700d					      repend
   3265  700e		       ff		      .byte.b	$ff
   3264  700e					      repend
   3265  700f		       ff		      .byte.b	$ff
   3264  700f					      repend
   3265  7010		       ff		      .byte.b	$ff
   3264  7010					      repend
   3265  7011		       ff		      .byte.b	$ff
   3264  7011					      repend
   3265  7012		       ff		      .byte.b	$ff
   3264  7012					      repend
   3265  7013		       ff		      .byte.b	$ff
   3264  7013					      repend
   3265  7014		       ff		      .byte.b	$ff
   3264  7014					      repend
   3265  7015		       ff		      .byte.b	$ff
   3264  7015					      repend
   3265  7016		       ff		      .byte.b	$ff
   3264  7016					      repend
   3265  7017		       ff		      .byte.b	$ff
   3264  7017					      repend
   3265  7018		       ff		      .byte.b	$ff
   3264  7018					      repend
   3265  7019		       ff		      .byte.b	$ff
   3264  7019					      repend
   3265  701a		       ff		      .byte.b	$ff
   3264  701a					      repend
   3265  701b		       ff		      .byte.b	$ff
   3264  701b					      repend
   3265  701c		       ff		      .byte.b	$ff
   3264  701c					      repend
   3265  701d		       ff		      .byte.b	$ff
   3264  701d					      repend
   3265  701e		       ff		      .byte.b	$ff
   3264  701e					      repend
   3265  701f		       ff		      .byte.b	$ff
   3264  701f					      repend
   3265  7020		       ff		      .byte.b	$ff
   3264  7020					      repend
   3265  7021		       ff		      .byte.b	$ff
   3264  7021					      repend
   3265  7022		       ff		      .byte.b	$ff
   3264  7022					      repend
   3265  7023		       ff		      .byte.b	$ff
   3264  7023					      repend
   3265  7024		       ff		      .byte.b	$ff
   3264  7024					      repend
   3265  7025		       ff		      .byte.b	$ff
   3264  7025					      repend
   3265  7026		       ff		      .byte.b	$ff
   3264  7026					      repend
   3265  7027		       ff		      .byte.b	$ff
   3264  7027					      repend
   3265  7028		       ff		      .byte.b	$ff
   3264  7028					      repend
   3265  7029		       ff		      .byte.b	$ff
   3264  7029					      repend
   3265  702a		       ff		      .byte.b	$ff
   3264  702a					      repend
   3265  702b		       ff		      .byte.b	$ff
   3264  702b					      repend
   3265  702c		       ff		      .byte.b	$ff
   3264  702c					      repend
   3265  702d		       ff		      .byte.b	$ff
   3264  702d					      repend
   3265  702e		       ff		      .byte.b	$ff
   3264  702e					      repend
   3265  702f		       ff		      .byte.b	$ff
   3264  702f					      repend
   3265  7030		       ff		      .byte.b	$ff
   3264  7030					      repend
   3265  7031		       ff		      .byte.b	$ff
   3264  7031					      repend
   3265  7032		       ff		      .byte.b	$ff
   3264  7032					      repend
   3265  7033		       ff		      .byte.b	$ff
   3264  7033					      repend
   3265  7034		       ff		      .byte.b	$ff
   3264  7034					      repend
   3265  7035		       ff		      .byte.b	$ff
   3264  7035					      repend
   3265  7036		       ff		      .byte.b	$ff
   3264  7036					      repend
   3265  7037		       ff		      .byte.b	$ff
   3264  7037					      repend
   3265  7038		       ff		      .byte.b	$ff
   3264  7038					      repend
   3265  7039		       ff		      .byte.b	$ff
   3264  7039					      repend
   3265  703a		       ff		      .byte.b	$ff
   3264  703a					      repend
   3265  703b		       ff		      .byte.b	$ff
   3264  703b					      repend
   3265  703c		       ff		      .byte.b	$ff
   3264  703c					      repend
   3265  703d		       ff		      .byte.b	$ff
   3264  703d					      repend
   3265  703e		       ff		      .byte.b	$ff
   3264  703e					      repend
   3265  703f		       ff		      .byte.b	$ff
   3264  703f					      repend
   3265  7040		       ff		      .byte.b	$ff
   3264  7040					      repend
   3265  7041		       ff		      .byte.b	$ff
   3264  7041					      repend
   3265  7042		       ff		      .byte.b	$ff
   3264  7042					      repend
   3265  7043		       ff		      .byte.b	$ff
   3264  7043					      repend
   3265  7044		       ff		      .byte.b	$ff
   3264  7044					      repend
   3265  7045		       ff		      .byte.b	$ff
   3264  7045					      repend
   3265  7046		       ff		      .byte.b	$ff
   3264  7046					      repend
   3265  7047		       ff		      .byte.b	$ff
   3264  7047					      repend
   3265  7048		       ff		      .byte.b	$ff
   3264  7048					      repend
   3265  7049		       ff		      .byte.b	$ff
   3264  7049					      repend
   3265  704a		       ff		      .byte.b	$ff
   3264  704a					      repend
   3265  704b		       ff		      .byte.b	$ff
   3264  704b					      repend
   3265  704c		       ff		      .byte.b	$ff
   3264  704c					      repend
   3265  704d		       ff		      .byte.b	$ff
   3264  704d					      repend
   3265  704e		       ff		      .byte.b	$ff
   3264  704e					      repend
   3265  704f		       ff		      .byte.b	$ff
   3264  704f					      repend
   3265  7050		       ff		      .byte.b	$ff
   3264  7050					      repend
   3265  7051		       ff		      .byte.b	$ff
   3264  7051					      repend
   3265  7052		       ff		      .byte.b	$ff
   3264  7052					      repend
   3265  7053		       ff		      .byte.b	$ff
   3264  7053					      repend
   3265  7054		       ff		      .byte.b	$ff
   3264  7054					      repend
   3265  7055		       ff		      .byte.b	$ff
   3264  7055					      repend
   3265  7056		       ff		      .byte.b	$ff
   3264  7056					      repend
   3265  7057		       ff		      .byte.b	$ff
   3264  7057					      repend
   3265  7058		       ff		      .byte.b	$ff
   3264  7058					      repend
   3265  7059		       ff		      .byte.b	$ff
   3264  7059					      repend
   3265  705a		       ff		      .byte.b	$ff
   3264  705a					      repend
   3265  705b		       ff		      .byte.b	$ff
   3264  705b					      repend
   3265  705c		       ff		      .byte.b	$ff
   3264  705c					      repend
   3265  705d		       ff		      .byte.b	$ff
   3264  705d					      repend
   3265  705e		       ff		      .byte.b	$ff
   3264  705e					      repend
   3265  705f		       ff		      .byte.b	$ff
   3264  705f					      repend
   3265  7060		       ff		      .byte.b	$ff
   3264  7060					      repend
   3265  7061		       ff		      .byte.b	$ff
   3264  7061					      repend
   3265  7062		       ff		      .byte.b	$ff
   3264  7062					      repend
   3265  7063		       ff		      .byte.b	$ff
   3264  7063					      repend
   3265  7064		       ff		      .byte.b	$ff
   3264  7064					      repend
   3265  7065		       ff		      .byte.b	$ff
   3264  7065					      repend
   3265  7066		       ff		      .byte.b	$ff
   3264  7066					      repend
   3265  7067		       ff		      .byte.b	$ff
   3264  7067					      repend
   3265  7068		       ff		      .byte.b	$ff
   3264  7068					      repend
   3265  7069		       ff		      .byte.b	$ff
   3264  7069					      repend
   3265  706a		       ff		      .byte.b	$ff
   3264  706a					      repend
   3265  706b		       ff		      .byte.b	$ff
   3264  706b					      repend
   3265  706c		       ff		      .byte.b	$ff
   3264  706c					      repend
   3265  706d		       ff		      .byte.b	$ff
   3264  706d					      repend
   3265  706e		       ff		      .byte.b	$ff
   3264  706e					      repend
   3265  706f		       ff		      .byte.b	$ff
   3264  706f					      repend
   3265  7070		       ff		      .byte.b	$ff
   3264  7070					      repend
   3265  7071		       ff		      .byte.b	$ff
   3264  7071					      repend
   3265  7072		       ff		      .byte.b	$ff
   3264  7072					      repend
   3265  7073		       ff		      .byte.b	$ff
   3264  7073					      repend
   3265  7074		       ff		      .byte.b	$ff
   3264  7074					      repend
   3265  7075		       ff		      .byte.b	$ff
   3264  7075					      repend
   3265  7076		       ff		      .byte.b	$ff
   3264  7076					      repend
   3265  7077		       ff		      .byte.b	$ff
   3264  7077					      repend
   3265  7078		       ff		      .byte.b	$ff
   3264  7078					      repend
   3265  7079		       ff		      .byte.b	$ff
   3264  7079					      repend
   3265  707a		       ff		      .byte.b	$ff
   3264  707a					      repend
   3265  707b		       ff		      .byte.b	$ff
   3264  707b					      repend
   3265  707c		       ff		      .byte.b	$ff
   3264  707c					      repend
   3265  707d		       ff		      .byte.b	$ff
   3264  707d					      repend
   3265  707e		       ff		      .byte.b	$ff
   3264  707e					      repend
   3265  707f		       ff		      .byte.b	$ff
   3264  707f					      repend
   3265  7080		       ff		      .byte.b	$ff
   3264  7080					      repend
   3265  7081		       ff		      .byte.b	$ff
   3264  7081					      repend
   3265  7082		       ff		      .byte.b	$ff
   3264  7082					      repend
   3265  7083		       ff		      .byte.b	$ff
   3264  7083					      repend
   3265  7084		       ff		      .byte.b	$ff
   3264  7084					      repend
   3265  7085		       ff		      .byte.b	$ff
   3264  7085					      repend
   3265  7086		       ff		      .byte.b	$ff
   3264  7086					      repend
   3265  7087		       ff		      .byte.b	$ff
   3264  7087					      repend
   3265  7088		       ff		      .byte.b	$ff
   3264  7088					      repend
   3265  7089		       ff		      .byte.b	$ff
   3264  7089					      repend
   3265  708a		       ff		      .byte.b	$ff
   3264  708a					      repend
   3265  708b		       ff		      .byte.b	$ff
   3264  708b					      repend
   3265  708c		       ff		      .byte.b	$ff
   3264  708c					      repend
   3265  708d		       ff		      .byte.b	$ff
   3264  708d					      repend
   3265  708e		       ff		      .byte.b	$ff
   3264  708e					      repend
   3265  708f		       ff		      .byte.b	$ff
   3264  708f					      repend
   3265  7090		       ff		      .byte.b	$ff
   3264  7090					      repend
   3265  7091		       ff		      .byte.b	$ff
   3264  7091					      repend
   3265  7092		       ff		      .byte.b	$ff
   3264  7092					      repend
   3265  7093		       ff		      .byte.b	$ff
   3264  7093					      repend
   3265  7094		       ff		      .byte.b	$ff
   3264  7094					      repend
   3265  7095		       ff		      .byte.b	$ff
   3264  7095					      repend
   3265  7096		       ff		      .byte.b	$ff
   3264  7096					      repend
   3265  7097		       ff		      .byte.b	$ff
   3264  7097					      repend
   3265  7098		       ff		      .byte.b	$ff
   3264  7098					      repend
   3265  7099		       ff		      .byte.b	$ff
   3264  7099					      repend
   3265  709a		       ff		      .byte.b	$ff
   3264  709a					      repend
   3265  709b		       ff		      .byte.b	$ff
   3264  709b					      repend
   3265  709c		       ff		      .byte.b	$ff
   3264  709c					      repend
   3265  709d		       ff		      .byte.b	$ff
   3264  709d					      repend
   3265  709e		       ff		      .byte.b	$ff
   3264  709e					      repend
   3265  709f		       ff		      .byte.b	$ff
   3264  709f					      repend
   3265  70a0		       ff		      .byte.b	$ff
   3264  70a0					      repend
   3265  70a1		       ff		      .byte.b	$ff
   3264  70a1					      repend
   3265  70a2		       ff		      .byte.b	$ff
   3264  70a2					      repend
   3265  70a3		       ff		      .byte.b	$ff
   3264  70a3					      repend
   3265  70a4		       ff		      .byte.b	$ff
   3264  70a4					      repend
   3265  70a5		       ff		      .byte.b	$ff
   3264  70a5					      repend
   3265  70a6		       ff		      .byte.b	$ff
   3264  70a6					      repend
   3265  70a7		       ff		      .byte.b	$ff
   3264  70a7					      repend
   3265  70a8		       ff		      .byte.b	$ff
   3264  70a8					      repend
   3265  70a9		       ff		      .byte.b	$ff
   3264  70a9					      repend
   3265  70aa		       ff		      .byte.b	$ff
   3264  70aa					      repend
   3265  70ab		       ff		      .byte.b	$ff
   3264  70ab					      repend
   3265  70ac		       ff		      .byte.b	$ff
   3264  70ac					      repend
   3265  70ad		       ff		      .byte.b	$ff
   3264  70ad					      repend
   3265  70ae		       ff		      .byte.b	$ff
   3264  70ae					      repend
   3265  70af		       ff		      .byte.b	$ff
   3264  70af					      repend
   3265  70b0		       ff		      .byte.b	$ff
   3264  70b0					      repend
   3265  70b1		       ff		      .byte.b	$ff
   3264  70b1					      repend
   3265  70b2		       ff		      .byte.b	$ff
   3264  70b2					      repend
   3265  70b3		       ff		      .byte.b	$ff
   3264  70b3					      repend
   3265  70b4		       ff		      .byte.b	$ff
   3264  70b4					      repend
   3265  70b5		       ff		      .byte.b	$ff
   3264  70b5					      repend
   3265  70b6		       ff		      .byte.b	$ff
   3264  70b6					      repend
   3265  70b7		       ff		      .byte.b	$ff
   3264  70b7					      repend
   3265  70b8		       ff		      .byte.b	$ff
   3264  70b8					      repend
   3265  70b9		       ff		      .byte.b	$ff
   3264  70b9					      repend
   3265  70ba		       ff		      .byte.b	$ff
   3264  70ba					      repend
   3265  70bb		       ff		      .byte.b	$ff
   3264  70bb					      repend
   3265  70bc		       ff		      .byte.b	$ff
   3264  70bc					      repend
   3265  70bd		       ff		      .byte.b	$ff
   3264  70bd					      repend
   3265  70be		       ff		      .byte.b	$ff
   3264  70be					      repend
   3265  70bf		       ff		      .byte.b	$ff
   3264  70bf					      repend
   3265  70c0		       ff		      .byte.b	$ff
   3264  70c0					      repend
   3265  70c1		       ff		      .byte.b	$ff
   3264  70c1					      repend
   3265  70c2		       ff		      .byte.b	$ff
   3264  70c2					      repend
   3265  70c3		       ff		      .byte.b	$ff
   3264  70c3					      repend
   3265  70c4		       ff		      .byte.b	$ff
   3264  70c4					      repend
   3265  70c5		       ff		      .byte.b	$ff
   3264  70c5					      repend
   3265  70c6		       ff		      .byte.b	$ff
   3264  70c6					      repend
   3265  70c7		       ff		      .byte.b	$ff
   3264  70c7					      repend
   3265  70c8		       ff		      .byte.b	$ff
   3264  70c8					      repend
   3265  70c9		       ff		      .byte.b	$ff
   3264  70c9					      repend
   3265  70ca		       ff		      .byte.b	$ff
   3264  70ca					      repend
   3265  70cb		       ff		      .byte.b	$ff
   3264  70cb					      repend
   3265  70cc		       ff		      .byte.b	$ff
   3264  70cc					      repend
   3265  70cd		       ff		      .byte.b	$ff
   3264  70cd					      repend
   3265  70ce		       ff		      .byte.b	$ff
   3264  70ce					      repend
   3265  70cf		       ff		      .byte.b	$ff
   3264  70cf					      repend
   3265  70d0		       ff		      .byte.b	$ff
   3264  70d0					      repend
   3265  70d1		       ff		      .byte.b	$ff
   3264  70d1					      repend
   3265  70d2		       ff		      .byte.b	$ff
   3264  70d2					      repend
   3265  70d3		       ff		      .byte.b	$ff
   3264  70d3					      repend
   3265  70d4		       ff		      .byte.b	$ff
   3264  70d4					      repend
   3265  70d5		       ff		      .byte.b	$ff
   3264  70d5					      repend
   3265  70d6		       ff		      .byte.b	$ff
   3264  70d6					      repend
   3265  70d7		       ff		      .byte.b	$ff
   3264  70d7					      repend
   3265  70d8		       ff		      .byte.b	$ff
   3264  70d8					      repend
   3265  70d9		       ff		      .byte.b	$ff
   3264  70d9					      repend
   3265  70da		       ff		      .byte.b	$ff
   3264  70da					      repend
   3265  70db		       ff		      .byte.b	$ff
   3264  70db					      repend
   3265  70dc		       ff		      .byte.b	$ff
   3264  70dc					      repend
   3265  70dd		       ff		      .byte.b	$ff
   3264  70dd					      repend
   3265  70de		       ff		      .byte.b	$ff
   3264  70de					      repend
   3265  70df		       ff		      .byte.b	$ff
   3264  70df					      repend
   3265  70e0		       ff		      .byte.b	$ff
   3264  70e0					      repend
   3265  70e1		       ff		      .byte.b	$ff
   3264  70e1					      repend
   3265  70e2		       ff		      .byte.b	$ff
   3264  70e2					      repend
   3265  70e3		       ff		      .byte.b	$ff
   3264  70e3					      repend
   3265  70e4		       ff		      .byte.b	$ff
   3264  70e4					      repend
   3265  70e5		       ff		      .byte.b	$ff
   3264  70e5					      repend
   3265  70e6		       ff		      .byte.b	$ff
   3264  70e6					      repend
   3265  70e7		       ff		      .byte.b	$ff
   3264  70e7					      repend
   3265  70e8		       ff		      .byte.b	$ff
   3264  70e8					      repend
   3265  70e9		       ff		      .byte.b	$ff
   3264  70e9					      repend
   3265  70ea		       ff		      .byte.b	$ff
   3264  70ea					      repend
   3265  70eb		       ff		      .byte.b	$ff
   3264  70eb					      repend
   3265  70ec		       ff		      .byte.b	$ff
   3264  70ec					      repend
   3265  70ed		       ff		      .byte.b	$ff
   3264  70ed					      repend
   3265  70ee		       ff		      .byte.b	$ff
   3264  70ee					      repend
   3265  70ef		       ff		      .byte.b	$ff
   3264  70ef					      repend
   3265  70f0		       ff		      .byte.b	$ff
   3264  70f0					      repend
   3265  70f1		       ff		      .byte.b	$ff
   3264  70f1					      repend
   3265  70f2		       ff		      .byte.b	$ff
   3264  70f2					      repend
   3265  70f3		       ff		      .byte.b	$ff
   3264  70f3					      repend
   3265  70f4		       ff		      .byte.b	$ff
   3264  70f4					      repend
   3265  70f5		       ff		      .byte.b	$ff
   3264  70f5					      repend
   3265  70f6		       ff		      .byte.b	$ff
   3264  70f6					      repend
   3265  70f7		       ff		      .byte.b	$ff
   3264  70f7					      repend
   3265  70f8		       ff		      .byte.b	$ff
   3264  70f8					      repend
   3265  70f9		       ff		      .byte.b	$ff
   3264  70f9					      repend
   3265  70fa		       ff		      .byte.b	$ff
   3264  70fa					      repend
   3265  70fb		       ff		      .byte.b	$ff
   3264  70fb					      repend
   3265  70fc		       ff		      .byte.b	$ff
   3264  70fc					      repend
   3265  70fd		       ff		      .byte.b	$ff
   3264  70fd					      repend
   3265  70fe		       ff		      .byte.b	$ff
   3264  70fe					      repend
   3265  70ff		       ff		      .byte.b	$ff
   3266  7100					      repend
   3267  7100				   .
   3268  7100							; 
   3269  7100
   3270  7100				   .L0228		;  bank 8
   3271  7100
   3272  7100					      if	ECHO7
      3796 bytes of ROM space left in bank 7
   3273  7100					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
   3274  7100					      endif
   3275  7100		       00 01	   ECHO7      =	1
   3276  7fd4					      ORG	$7FF4-bscode_length
   3277  7fd4					      RORG	$DFF4-bscode_length
   3278  7fd4		       a2 ff	   start_bank7 ldx	#$ff
   3279  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3280  7fd6				  -	      stx	FASTFETCH
   3281  7fd6					      endif
   3282  7fd6		       9a		      txs
   3283  7fd7				  -	      if	bankswitch == 64
   3284  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3285  7fd7					      else
   3286  7fd7		       a9 f3		      lda	#>(start-1)
   3287  7fd9					      endif
   3288  7fd9		       48		      pha
   3289  7fda		       a9 59		      lda	#<(start-1)
   3290  7fdc		       48		      pha
   3291  7fdd		       48		      pha
   3292  7fde		       8a		      txa
   3293  7fdf		       48		      pha
   3294  7fe0		       ba		      tsx
   3295  7fe1					      if	bankswitch != 64
   3296  7fe1		       b5 04		      lda	4,x	; get high byte of return address
   3297  7fe3		       2a		      rol
   3298  7fe4		       2a		      rol
   3299  7fe5		       2a		      rol
   3300  7fe6		       2a		      rol
   3301  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3302  7fe9		       aa		      tax
   3303  7fea		       e8		      inx
   3304  7feb				  -	      else
   3305  7feb				  -	      lda	4,x	; get high byte of return address
   3306  7feb				  -	      tay
   3307  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3308  7feb				  -	      sta	4,x
   3309  7feb				  -	      tya
   3310  7feb				  -	      lsr
   3311  7feb				  -	      lsr
   3312  7feb				  -	      lsr
   3313  7feb				  -	      lsr
   3314  7feb				  -	      tax
   3315  7feb				  -	      inx
   3316  7feb					      endif
   3317  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   3318  7fee		       68		      pla
   3319  7fef		       aa		      tax
   3320  7ff0		       68		      pla
   3321  7ff1		       60		      rts
   3322  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3323  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3324  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3325  7ff2					      endif
   3326  7ffc					      ORG	$7FFC
   3327  7ffc					      RORG	$DFFC
   3328  7ffc		       d4 df		      .word.w	(start_bank7 & $ffff)
   3329  7ffe		       d4 df		      .word.w	(start_bank7 & $ffff)
   3330  8000					      ORG	$8000
   3331  8000					      RORG	$F000
   3332  8000					      repeat	256
   3333  8000		       ff		      .byte.b	$ff
   3332  8000					      repend
   3333  8001		       ff		      .byte.b	$ff
   3332  8001					      repend
   3333  8002		       ff		      .byte.b	$ff
   3332  8002					      repend
   3333  8003		       ff		      .byte.b	$ff
   3332  8003					      repend
   3333  8004		       ff		      .byte.b	$ff
   3332  8004					      repend
   3333  8005		       ff		      .byte.b	$ff
   3332  8005					      repend
   3333  8006		       ff		      .byte.b	$ff
   3332  8006					      repend
   3333  8007		       ff		      .byte.b	$ff
   3332  8007					      repend
   3333  8008		       ff		      .byte.b	$ff
   3332  8008					      repend
   3333  8009		       ff		      .byte.b	$ff
   3332  8009					      repend
   3333  800a		       ff		      .byte.b	$ff
   3332  800a					      repend
   3333  800b		       ff		      .byte.b	$ff
   3332  800b					      repend
   3333  800c		       ff		      .byte.b	$ff
   3332  800c					      repend
   3333  800d		       ff		      .byte.b	$ff
   3332  800d					      repend
   3333  800e		       ff		      .byte.b	$ff
   3332  800e					      repend
   3333  800f		       ff		      .byte.b	$ff
   3332  800f					      repend
   3333  8010		       ff		      .byte.b	$ff
   3332  8010					      repend
   3333  8011		       ff		      .byte.b	$ff
   3332  8011					      repend
   3333  8012		       ff		      .byte.b	$ff
   3332  8012					      repend
   3333  8013		       ff		      .byte.b	$ff
   3332  8013					      repend
   3333  8014		       ff		      .byte.b	$ff
   3332  8014					      repend
   3333  8015		       ff		      .byte.b	$ff
   3332  8015					      repend
   3333  8016		       ff		      .byte.b	$ff
   3332  8016					      repend
   3333  8017		       ff		      .byte.b	$ff
   3332  8017					      repend
   3333  8018		       ff		      .byte.b	$ff
   3332  8018					      repend
   3333  8019		       ff		      .byte.b	$ff
   3332  8019					      repend
   3333  801a		       ff		      .byte.b	$ff
   3332  801a					      repend
   3333  801b		       ff		      .byte.b	$ff
   3332  801b					      repend
   3333  801c		       ff		      .byte.b	$ff
   3332  801c					      repend
   3333  801d		       ff		      .byte.b	$ff
   3332  801d					      repend
   3333  801e		       ff		      .byte.b	$ff
   3332  801e					      repend
   3333  801f		       ff		      .byte.b	$ff
   3332  801f					      repend
   3333  8020		       ff		      .byte.b	$ff
   3332  8020					      repend
   3333  8021		       ff		      .byte.b	$ff
   3332  8021					      repend
   3333  8022		       ff		      .byte.b	$ff
   3332  8022					      repend
   3333  8023		       ff		      .byte.b	$ff
   3332  8023					      repend
   3333  8024		       ff		      .byte.b	$ff
   3332  8024					      repend
   3333  8025		       ff		      .byte.b	$ff
   3332  8025					      repend
   3333  8026		       ff		      .byte.b	$ff
   3332  8026					      repend
   3333  8027		       ff		      .byte.b	$ff
   3332  8027					      repend
   3333  8028		       ff		      .byte.b	$ff
   3332  8028					      repend
   3333  8029		       ff		      .byte.b	$ff
   3332  8029					      repend
   3333  802a		       ff		      .byte.b	$ff
   3332  802a					      repend
   3333  802b		       ff		      .byte.b	$ff
   3332  802b					      repend
   3333  802c		       ff		      .byte.b	$ff
   3332  802c					      repend
   3333  802d		       ff		      .byte.b	$ff
   3332  802d					      repend
   3333  802e		       ff		      .byte.b	$ff
   3332  802e					      repend
   3333  802f		       ff		      .byte.b	$ff
   3332  802f					      repend
   3333  8030		       ff		      .byte.b	$ff
   3332  8030					      repend
   3333  8031		       ff		      .byte.b	$ff
   3332  8031					      repend
   3333  8032		       ff		      .byte.b	$ff
   3332  8032					      repend
   3333  8033		       ff		      .byte.b	$ff
   3332  8033					      repend
   3333  8034		       ff		      .byte.b	$ff
   3332  8034					      repend
   3333  8035		       ff		      .byte.b	$ff
   3332  8035					      repend
   3333  8036		       ff		      .byte.b	$ff
   3332  8036					      repend
   3333  8037		       ff		      .byte.b	$ff
   3332  8037					      repend
   3333  8038		       ff		      .byte.b	$ff
   3332  8038					      repend
   3333  8039		       ff		      .byte.b	$ff
   3332  8039					      repend
   3333  803a		       ff		      .byte.b	$ff
   3332  803a					      repend
   3333  803b		       ff		      .byte.b	$ff
   3332  803b					      repend
   3333  803c		       ff		      .byte.b	$ff
   3332  803c					      repend
   3333  803d		       ff		      .byte.b	$ff
   3332  803d					      repend
   3333  803e		       ff		      .byte.b	$ff
   3332  803e					      repend
   3333  803f		       ff		      .byte.b	$ff
   3332  803f					      repend
   3333  8040		       ff		      .byte.b	$ff
   3332  8040					      repend
   3333  8041		       ff		      .byte.b	$ff
   3332  8041					      repend
   3333  8042		       ff		      .byte.b	$ff
   3332  8042					      repend
   3333  8043		       ff		      .byte.b	$ff
   3332  8043					      repend
   3333  8044		       ff		      .byte.b	$ff
   3332  8044					      repend
   3333  8045		       ff		      .byte.b	$ff
   3332  8045					      repend
   3333  8046		       ff		      .byte.b	$ff
   3332  8046					      repend
   3333  8047		       ff		      .byte.b	$ff
   3332  8047					      repend
   3333  8048		       ff		      .byte.b	$ff
   3332  8048					      repend
   3333  8049		       ff		      .byte.b	$ff
   3332  8049					      repend
   3333  804a		       ff		      .byte.b	$ff
   3332  804a					      repend
   3333  804b		       ff		      .byte.b	$ff
   3332  804b					      repend
   3333  804c		       ff		      .byte.b	$ff
   3332  804c					      repend
   3333  804d		       ff		      .byte.b	$ff
   3332  804d					      repend
   3333  804e		       ff		      .byte.b	$ff
   3332  804e					      repend
   3333  804f		       ff		      .byte.b	$ff
   3332  804f					      repend
   3333  8050		       ff		      .byte.b	$ff
   3332  8050					      repend
   3333  8051		       ff		      .byte.b	$ff
   3332  8051					      repend
   3333  8052		       ff		      .byte.b	$ff
   3332  8052					      repend
   3333  8053		       ff		      .byte.b	$ff
   3332  8053					      repend
   3333  8054		       ff		      .byte.b	$ff
   3332  8054					      repend
   3333  8055		       ff		      .byte.b	$ff
   3332  8055					      repend
   3333  8056		       ff		      .byte.b	$ff
   3332  8056					      repend
   3333  8057		       ff		      .byte.b	$ff
   3332  8057					      repend
   3333  8058		       ff		      .byte.b	$ff
   3332  8058					      repend
   3333  8059		       ff		      .byte.b	$ff
   3332  8059					      repend
   3333  805a		       ff		      .byte.b	$ff
   3332  805a					      repend
   3333  805b		       ff		      .byte.b	$ff
   3332  805b					      repend
   3333  805c		       ff		      .byte.b	$ff
   3332  805c					      repend
   3333  805d		       ff		      .byte.b	$ff
   3332  805d					      repend
   3333  805e		       ff		      .byte.b	$ff
   3332  805e					      repend
   3333  805f		       ff		      .byte.b	$ff
   3332  805f					      repend
   3333  8060		       ff		      .byte.b	$ff
   3332  8060					      repend
   3333  8061		       ff		      .byte.b	$ff
   3332  8061					      repend
   3333  8062		       ff		      .byte.b	$ff
   3332  8062					      repend
   3333  8063		       ff		      .byte.b	$ff
   3332  8063					      repend
   3333  8064		       ff		      .byte.b	$ff
   3332  8064					      repend
   3333  8065		       ff		      .byte.b	$ff
   3332  8065					      repend
   3333  8066		       ff		      .byte.b	$ff
   3332  8066					      repend
   3333  8067		       ff		      .byte.b	$ff
   3332  8067					      repend
   3333  8068		       ff		      .byte.b	$ff
   3332  8068					      repend
   3333  8069		       ff		      .byte.b	$ff
   3332  8069					      repend
   3333  806a		       ff		      .byte.b	$ff
   3332  806a					      repend
   3333  806b		       ff		      .byte.b	$ff
   3332  806b					      repend
   3333  806c		       ff		      .byte.b	$ff
   3332  806c					      repend
   3333  806d		       ff		      .byte.b	$ff
   3332  806d					      repend
   3333  806e		       ff		      .byte.b	$ff
   3332  806e					      repend
   3333  806f		       ff		      .byte.b	$ff
   3332  806f					      repend
   3333  8070		       ff		      .byte.b	$ff
   3332  8070					      repend
   3333  8071		       ff		      .byte.b	$ff
   3332  8071					      repend
   3333  8072		       ff		      .byte.b	$ff
   3332  8072					      repend
   3333  8073		       ff		      .byte.b	$ff
   3332  8073					      repend
   3333  8074		       ff		      .byte.b	$ff
   3332  8074					      repend
   3333  8075		       ff		      .byte.b	$ff
   3332  8075					      repend
   3333  8076		       ff		      .byte.b	$ff
   3332  8076					      repend
   3333  8077		       ff		      .byte.b	$ff
   3332  8077					      repend
   3333  8078		       ff		      .byte.b	$ff
   3332  8078					      repend
   3333  8079		       ff		      .byte.b	$ff
   3332  8079					      repend
   3333  807a		       ff		      .byte.b	$ff
   3332  807a					      repend
   3333  807b		       ff		      .byte.b	$ff
   3332  807b					      repend
   3333  807c		       ff		      .byte.b	$ff
   3332  807c					      repend
   3333  807d		       ff		      .byte.b	$ff
   3332  807d					      repend
   3333  807e		       ff		      .byte.b	$ff
   3332  807e					      repend
   3333  807f		       ff		      .byte.b	$ff
   3332  807f					      repend
   3333  8080		       ff		      .byte.b	$ff
   3332  8080					      repend
   3333  8081		       ff		      .byte.b	$ff
   3332  8081					      repend
   3333  8082		       ff		      .byte.b	$ff
   3332  8082					      repend
   3333  8083		       ff		      .byte.b	$ff
   3332  8083					      repend
   3333  8084		       ff		      .byte.b	$ff
   3332  8084					      repend
   3333  8085		       ff		      .byte.b	$ff
   3332  8085					      repend
   3333  8086		       ff		      .byte.b	$ff
   3332  8086					      repend
   3333  8087		       ff		      .byte.b	$ff
   3332  8087					      repend
   3333  8088		       ff		      .byte.b	$ff
   3332  8088					      repend
   3333  8089		       ff		      .byte.b	$ff
   3332  8089					      repend
   3333  808a		       ff		      .byte.b	$ff
   3332  808a					      repend
   3333  808b		       ff		      .byte.b	$ff
   3332  808b					      repend
   3333  808c		       ff		      .byte.b	$ff
   3332  808c					      repend
   3333  808d		       ff		      .byte.b	$ff
   3332  808d					      repend
   3333  808e		       ff		      .byte.b	$ff
   3332  808e					      repend
   3333  808f		       ff		      .byte.b	$ff
   3332  808f					      repend
   3333  8090		       ff		      .byte.b	$ff
   3332  8090					      repend
   3333  8091		       ff		      .byte.b	$ff
   3332  8091					      repend
   3333  8092		       ff		      .byte.b	$ff
   3332  8092					      repend
   3333  8093		       ff		      .byte.b	$ff
   3332  8093					      repend
   3333  8094		       ff		      .byte.b	$ff
   3332  8094					      repend
   3333  8095		       ff		      .byte.b	$ff
   3332  8095					      repend
   3333  8096		       ff		      .byte.b	$ff
   3332  8096					      repend
   3333  8097		       ff		      .byte.b	$ff
   3332  8097					      repend
   3333  8098		       ff		      .byte.b	$ff
   3332  8098					      repend
   3333  8099		       ff		      .byte.b	$ff
   3332  8099					      repend
   3333  809a		       ff		      .byte.b	$ff
   3332  809a					      repend
   3333  809b		       ff		      .byte.b	$ff
   3332  809b					      repend
   3333  809c		       ff		      .byte.b	$ff
   3332  809c					      repend
   3333  809d		       ff		      .byte.b	$ff
   3332  809d					      repend
   3333  809e		       ff		      .byte.b	$ff
   3332  809e					      repend
   3333  809f		       ff		      .byte.b	$ff
   3332  809f					      repend
   3333  80a0		       ff		      .byte.b	$ff
   3332  80a0					      repend
   3333  80a1		       ff		      .byte.b	$ff
   3332  80a1					      repend
   3333  80a2		       ff		      .byte.b	$ff
   3332  80a2					      repend
   3333  80a3		       ff		      .byte.b	$ff
   3332  80a3					      repend
   3333  80a4		       ff		      .byte.b	$ff
   3332  80a4					      repend
   3333  80a5		       ff		      .byte.b	$ff
   3332  80a5					      repend
   3333  80a6		       ff		      .byte.b	$ff
   3332  80a6					      repend
   3333  80a7		       ff		      .byte.b	$ff
   3332  80a7					      repend
   3333  80a8		       ff		      .byte.b	$ff
   3332  80a8					      repend
   3333  80a9		       ff		      .byte.b	$ff
   3332  80a9					      repend
   3333  80aa		       ff		      .byte.b	$ff
   3332  80aa					      repend
   3333  80ab		       ff		      .byte.b	$ff
   3332  80ab					      repend
   3333  80ac		       ff		      .byte.b	$ff
   3332  80ac					      repend
   3333  80ad		       ff		      .byte.b	$ff
   3332  80ad					      repend
   3333  80ae		       ff		      .byte.b	$ff
   3332  80ae					      repend
   3333  80af		       ff		      .byte.b	$ff
   3332  80af					      repend
   3333  80b0		       ff		      .byte.b	$ff
   3332  80b0					      repend
   3333  80b1		       ff		      .byte.b	$ff
   3332  80b1					      repend
   3333  80b2		       ff		      .byte.b	$ff
   3332  80b2					      repend
   3333  80b3		       ff		      .byte.b	$ff
   3332  80b3					      repend
   3333  80b4		       ff		      .byte.b	$ff
   3332  80b4					      repend
   3333  80b5		       ff		      .byte.b	$ff
   3332  80b5					      repend
   3333  80b6		       ff		      .byte.b	$ff
   3332  80b6					      repend
   3333  80b7		       ff		      .byte.b	$ff
   3332  80b7					      repend
   3333  80b8		       ff		      .byte.b	$ff
   3332  80b8					      repend
   3333  80b9		       ff		      .byte.b	$ff
   3332  80b9					      repend
   3333  80ba		       ff		      .byte.b	$ff
   3332  80ba					      repend
   3333  80bb		       ff		      .byte.b	$ff
   3332  80bb					      repend
   3333  80bc		       ff		      .byte.b	$ff
   3332  80bc					      repend
   3333  80bd		       ff		      .byte.b	$ff
   3332  80bd					      repend
   3333  80be		       ff		      .byte.b	$ff
   3332  80be					      repend
   3333  80bf		       ff		      .byte.b	$ff
   3332  80bf					      repend
   3333  80c0		       ff		      .byte.b	$ff
   3332  80c0					      repend
   3333  80c1		       ff		      .byte.b	$ff
   3332  80c1					      repend
   3333  80c2		       ff		      .byte.b	$ff
   3332  80c2					      repend
   3333  80c3		       ff		      .byte.b	$ff
   3332  80c3					      repend
   3333  80c4		       ff		      .byte.b	$ff
   3332  80c4					      repend
   3333  80c5		       ff		      .byte.b	$ff
   3332  80c5					      repend
   3333  80c6		       ff		      .byte.b	$ff
   3332  80c6					      repend
   3333  80c7		       ff		      .byte.b	$ff
   3332  80c7					      repend
   3333  80c8		       ff		      .byte.b	$ff
   3332  80c8					      repend
   3333  80c9		       ff		      .byte.b	$ff
   3332  80c9					      repend
   3333  80ca		       ff		      .byte.b	$ff
   3332  80ca					      repend
   3333  80cb		       ff		      .byte.b	$ff
   3332  80cb					      repend
   3333  80cc		       ff		      .byte.b	$ff
   3332  80cc					      repend
   3333  80cd		       ff		      .byte.b	$ff
   3332  80cd					      repend
   3333  80ce		       ff		      .byte.b	$ff
   3332  80ce					      repend
   3333  80cf		       ff		      .byte.b	$ff
   3332  80cf					      repend
   3333  80d0		       ff		      .byte.b	$ff
   3332  80d0					      repend
   3333  80d1		       ff		      .byte.b	$ff
   3332  80d1					      repend
   3333  80d2		       ff		      .byte.b	$ff
   3332  80d2					      repend
   3333  80d3		       ff		      .byte.b	$ff
   3332  80d3					      repend
   3333  80d4		       ff		      .byte.b	$ff
   3332  80d4					      repend
   3333  80d5		       ff		      .byte.b	$ff
   3332  80d5					      repend
   3333  80d6		       ff		      .byte.b	$ff
   3332  80d6					      repend
   3333  80d7		       ff		      .byte.b	$ff
   3332  80d7					      repend
   3333  80d8		       ff		      .byte.b	$ff
   3332  80d8					      repend
   3333  80d9		       ff		      .byte.b	$ff
   3332  80d9					      repend
   3333  80da		       ff		      .byte.b	$ff
   3332  80da					      repend
   3333  80db		       ff		      .byte.b	$ff
   3332  80db					      repend
   3333  80dc		       ff		      .byte.b	$ff
   3332  80dc					      repend
   3333  80dd		       ff		      .byte.b	$ff
   3332  80dd					      repend
   3333  80de		       ff		      .byte.b	$ff
   3332  80de					      repend
   3333  80df		       ff		      .byte.b	$ff
   3332  80df					      repend
   3333  80e0		       ff		      .byte.b	$ff
   3332  80e0					      repend
   3333  80e1		       ff		      .byte.b	$ff
   3332  80e1					      repend
   3333  80e2		       ff		      .byte.b	$ff
   3332  80e2					      repend
   3333  80e3		       ff		      .byte.b	$ff
   3332  80e3					      repend
   3333  80e4		       ff		      .byte.b	$ff
   3332  80e4					      repend
   3333  80e5		       ff		      .byte.b	$ff
   3332  80e5					      repend
   3333  80e6		       ff		      .byte.b	$ff
   3332  80e6					      repend
   3333  80e7		       ff		      .byte.b	$ff
   3332  80e7					      repend
   3333  80e8		       ff		      .byte.b	$ff
   3332  80e8					      repend
   3333  80e9		       ff		      .byte.b	$ff
   3332  80e9					      repend
   3333  80ea		       ff		      .byte.b	$ff
   3332  80ea					      repend
   3333  80eb		       ff		      .byte.b	$ff
   3332  80eb					      repend
   3333  80ec		       ff		      .byte.b	$ff
   3332  80ec					      repend
   3333  80ed		       ff		      .byte.b	$ff
   3332  80ed					      repend
   3333  80ee		       ff		      .byte.b	$ff
   3332  80ee					      repend
   3333  80ef		       ff		      .byte.b	$ff
   3332  80ef					      repend
   3333  80f0		       ff		      .byte.b	$ff
   3332  80f0					      repend
   3333  80f1		       ff		      .byte.b	$ff
   3332  80f1					      repend
   3333  80f2		       ff		      .byte.b	$ff
   3332  80f2					      repend
   3333  80f3		       ff		      .byte.b	$ff
   3332  80f3					      repend
   3333  80f4		       ff		      .byte.b	$ff
   3332  80f4					      repend
   3333  80f5		       ff		      .byte.b	$ff
   3332  80f5					      repend
   3333  80f6		       ff		      .byte.b	$ff
   3332  80f6					      repend
   3333  80f7		       ff		      .byte.b	$ff
   3332  80f7					      repend
   3333  80f8		       ff		      .byte.b	$ff
   3332  80f8					      repend
   3333  80f9		       ff		      .byte.b	$ff
   3332  80f9					      repend
   3333  80fa		       ff		      .byte.b	$ff
   3332  80fa					      repend
   3333  80fb		       ff		      .byte.b	$ff
   3332  80fb					      repend
   3333  80fc		       ff		      .byte.b	$ff
   3332  80fc					      repend
   3333  80fd		       ff		      .byte.b	$ff
   3332  80fd					      repend
   3333  80fe		       ff		      .byte.b	$ff
   3332  80fe					      repend
   3333  80ff		       ff		      .byte.b	$ff
   3334  8100					      repend
   3335  8100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3336  8100
   3337  8100							; This is a 2-line kernel!
   3338  8100					      ifnconst	vertical_reflect
   3339  8100				   kernel
   3340  8100					      endif
   3341  8100		       85 02		      sta	WSYNC
   3342  8102		       a9 ff		      lda	#255
   3343  8104		       8d 96 02 	      sta	TIM64T
   3344  8107
   3345  8107		       a9 01		      lda	#1
   3346  8109		       85 27		      sta	VDELBL
   3347  810b		       85 25		      sta	VDELP0
   3348  810d		       a6 92		      ldx	ballheight
   3349  810f		       e8		      inx
   3350  8110		       e8		      inx
   3351  8111		       86 9f		      stx	temp4
   3352  8113		       a5 86		      lda	player1y
   3353  8115		       85 9e		      sta	temp3
   3354  8117
   3355  8117					      ifconst	shakescreen
   3356  8117		       20 50 f3 	      jsr	doshakescreen
   3357  811a				  -	      else
   3358  811a				  -	      ldx	missile0height
   3359  811a				  -	      inx
   3360  811a					      endif
   3361  811a
   3362  811a		       e8		      inx
   3363  811b		       86 f6		      stx	stack1
   3364  811d
   3365  811d		       a5 89		      lda	bally
   3366  811f		       85 f7		      sta	stack2
   3367  8121
   3368  8121		       a5 85		      lda	player0y
   3369  8123		       a2 00		      ldx	#0
   3370  8125		       85 02		      sta	WSYNC
   3371  8127		       86 1b		      stx	GRP0
   3372  8129		       86 1c		      stx	GRP1
   3373  812b		       86 0e		      stx	PF1L
   3374  812d		       86 0f		      stx	PF2
   3375  812f		       86 2c		      stx	CXCLR
   3376  8131				  -	      ifconst	readpaddle
   3377  8131				  -	      stx	paddle
   3378  8131					      else
      0  8131					      sleep	3
      1  8131				   .CYCLES    SET	3
      2  8131
      3  8131				  -	      IF	.CYCLES < 2
      4  8131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8131				  -	      ERR
      6  8131					      ENDIF
      7  8131
      8  8131					      IF	.CYCLES & 1
      9  8131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8131		       04 00		      nop	0
     11  8133				  -	      ELSE
     12  8133				  -	      bit	VSYNC
     13  8133					      ENDIF
     14  8133				   .CYCLES    SET	.CYCLES - 3
     15  8133					      ENDIF
     16  8133
     17  8133				  -	      REPEAT	.CYCLES / 2
     18  8133				  -	      nop
     19  8133					      REPEND
   3380  8133					      endif
   3381  8133
   3382  8133		       95 9d		      sta	temp2,x
   3383  8135
   3384  8135							;store these so they can be retrieved later
   3385  8135				  -	      ifnconst	pfres
   3386  8135				  -	      ldx	#128-44+(4-pfwidth)*12
   3387  8135					      else
   3388  8135		       a2 24		      ldx	#132-pfres*pfwidth
   3389  8137					      endif
   3390  8137
   3391  8137		       c6 85		      dec	player0y
   3392  8139
   3393  8139		       a5 91		      lda	missile0y
   3394  813b		       85 a0		      sta	temp5
   3395  813d		       a5 88		      lda	missile1y
   3396  813f		       85 a1		      sta	temp6
   3397  8141
   3398  8141		       a5 ef		      lda	playfieldpos
   3399  8143		       85 9c		      sta	temp1
   3400  8145
   3401  8145					      ifconst	pfrowheight
   3402  8145		       a9 06		      lda	#pfrowheight+2
   3403  8147				  -	      else
   3404  8147				  -	      ifnconst	pfres
   3405  8147				  -	      lda	#10
   3406  8147				  -	      else
   3407  8147				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   3408  8147				  -	      endif
   3409  8147					      endif
   3410  8147		       18		      clc
   3411  8148		       e5 ef		      sbc	playfieldpos
   3412  814a		       85 ef		      sta	playfieldpos
   3413  814c		       4c 78 f1 	      jmp	.startkernel
   3414  814f
   3415  814f				   .skipDrawP0
   3416  814f		       a9 00		      lda	#0
   3417  8151		       a8		      tay
   3418  8152		       4c aa f1 	      jmp	.continueP0
   3419  8155
   3420  8155				   .skipDrawP1
   3421  8155		       a9 00		      lda	#0
   3422  8157		       a8		      tay
   3423  8158		       4c 82 f1 	      jmp	.continueP1
   3424  815b
   3425  815b				   .kerloop		; enter at cycle 59??
   3426  815b
   3427  815b				   continuekernel
      0  815b					      sleep	2
      1  815b				   .CYCLES    SET	2
      2  815b
      3  815b				  -	      IF	.CYCLES < 2
      4  815b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  815b				  -	      ERR
      6  815b					      ENDIF
      7  815b
      8  815b				  -	      IF	.CYCLES & 1
      9  815b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  815b				  -	      nop	0
     11  815b				  -	      ELSE
     12  815b				  -	      bit	VSYNC
     13  815b				  -	      ENDIF
     14  815b				  -.CYCLES    SET	.CYCLES - 3
     15  815b					      ENDIF
     16  815b
     17  815b					      REPEAT	.CYCLES / 2
     18  815b		       ea		      nop
     19  815c					      REPEND
   3429  815c				   continuekernel2
   3430  815c		       a5 92		      lda	ballheight
   3431  815e
   3432  815e					      ifconst	pfres
   3433  815e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   3434  8161		       84 0e		      sty	PF1L	;3
   3435  8163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   3436  8166		       84 0f		      sty	PF2L	;3
   3437  8168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   3438  816b		       84 0e		      sty	PF1R	; 3 too early?
   3439  816d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   3440  8170		       84 0f		      sty	PF2R	;3
   3441  8172				  -	      else
   3442  8172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   3443  8172				  -	      sty	PF1L	;3
   3444  8172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3445  8172				  -	      sty	PF2L	;3
   3446  8172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   3447  8172				  -	      sty	PF1R	; 3 too early?
   3448  8172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3449  8172				  -	      sty	PF2R	;3
   3450  8172					      endif
   3451  8172
   3452  8172							; should be playfield+$38 for width=2
   3453  8172
   3454  8172		       c7 89		      dcp	bally
   3455  8174		       2a		      rol
   3456  8175		       2a		      rol
   3457  8176							; rol
   3458  8176							; rol
   3459  8176				   goback
   3460  8176		       85 1f		      sta	ENABL
   3461  8178				   .startkernel
   3462  8178		       a5 8f		      lda	player1height	;3
   3463  817a		       c7 86		      dcp	player1y	;5
   3464  817c		       90 d7		      bcc	.skipDrawP1	;2
   3465  817e		       a4 86		      ldy	player1y	;3
   3466  8180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   3467  8182							; so it doesn't cross a page boundary!
   3468  8182
   3469  8182				   .continueP1
   3470  8182		       85 1c		      sta	GRP1	;3
   3471  8184
   3472  8184					      ifnconst	player1colors
   3473  8184		       a5 87		      lda	missile1height	;3
   3474  8186		       c7 88		      dcp	missile1y	;5
   3475  8188		       2a		      rol		;2
   3476  8189		       2a		      rol		;2
   3477  818a		       85 1e		      sta	ENAM1	;3
   3478  818c				  -	      else
   3479  818c				  -	      lda	(player1color),y
   3480  818c				  -	      sta	COLUP1
   3481  818c				  -	      ifnconst	playercolors
   3482  818c				  -	      sleep	7
   3483  818c				  -	      else
   3484  818c				  -	      lda.w	player0colorstore
   3485  818c				  -	      sta	COLUP0
   3486  818c				  -	      endif
   3487  818c					      endif
   3488  818c
   3489  818c					      ifconst	pfres
   3490  818c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   3491  818f		       85 0e		      sta	PF1L	;3
   3492  8191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   3493  8194		       85 0f		      sta	PF2L	;3
   3494  8196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   3495  8199		       85 0e		      sta	PF1R	; 3 too early?
   3496  819b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   3497  819e		       85 0f		      sta	PF2R	;3
   3498  81a0				  -	      else
   3499  81a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   3500  81a0				  -	      sta	PF1L	;3
   3501  81a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3502  81a0				  -	      sta	PF2L	;3
   3503  81a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   3504  81a0				  -	      sta	PF1R	; 3 too early?
   3505  81a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3506  81a0				  -	      sta	PF2R	;3
   3507  81a0					      endif
   3508  81a0							; sleep 3
   3509  81a0
   3510  81a0		       a5 8e		      lda	player0height
   3511  81a2		       c7 85		      dcp	player0y
   3512  81a4		       90 a9		      bcc	.skipDrawP0
   3513  81a6		       a4 85		      ldy	player0y
   3514  81a8		       b1 8a		      lda	(player0pointer),y
   3515  81aa				   .continueP0
   3516  81aa		       85 1b		      sta	GRP0
   3517  81ac
   3518  81ac				  -	      ifnconst	no_blank_lines
   3519  81ac				  -	      ifnconst	playercolors
   3520  81ac				  -	      lda	missile0height	;3
   3521  81ac				  -	      dcp	missile0y	;5
   3522  81ac				  -	      sbc	stack1
   3523  81ac				  -	      sta	ENAM0	;3
   3524  81ac				  -	      else
   3525  81ac				  -	      lda	(player0color),y
   3526  81ac				  -	      sta	player0colorstore
   3527  81ac				  -	      sleep	6
   3528  81ac				  -	      endif
   3529  81ac				  -	      dec	temp1
   3530  81ac				  -	      bne	continuekernel
   3531  81ac					      else
   3532  81ac		       c6 9c		      dec	temp1
   3533  81ae		       f0 09		      beq	altkernel2
   3534  81b0				  -	      ifconst	readpaddle
   3535  81b0				  -	      ldy	currentpaddle
   3536  81b0				  -	      lda	INPT0,y
   3537  81b0				  -	      bpl	noreadpaddle
   3538  81b0				  -	      inc	paddle
   3539  81b0				  -	      jmp	continuekernel2
   3540  81b0				  -noreadpaddle
   3541  81b0				  -	      sleep	2
   3542  81b0				  -	      jmp	continuekernel
   3543  81b0					      else
   3544  81b0					      ifnconst	playercolors
   3545  81b0				  -	      ifconst	PFcolors
   3546  81b0				  -	      txa
   3547  81b0				  -	      tay
   3548  81b0				  -	      lda	(pfcolortable),y
   3549  81b0				  -	      ifnconst	backgroundchange
   3550  81b0				  -	      sta	COLUPF
   3551  81b0				  -	      else
   3552  81b0				  -	      sta	COLUBK
   3553  81b0				  -	      endif
   3554  81b0				  -	      jmp	continuekernel
   3555  81b0					      else
   3556  81b0				  -	      ifconst	kernelmacrodef
   3557  81b0				  -	      kernelmacro
   3558  81b0					      else
      0  81b0					      sleep	12
      1  81b0				   .CYCLES    SET	12
      2  81b0
      3  81b0				  -	      IF	.CYCLES < 2
      4  81b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  81b0				  -	      ERR
      6  81b0					      ENDIF
      7  81b0
      8  81b0				  -	      IF	.CYCLES & 1
      9  81b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  81b0				  -	      nop	0
     11  81b0				  -	      ELSE
     12  81b0				  -	      bit	VSYNC
     13  81b0				  -	      ENDIF
     14  81b0				  -.CYCLES    SET	.CYCLES - 3
     15  81b0					      ENDIF
     16  81b0
     17  81b0					      REPEAT	.CYCLES / 2
     18  81b0		       ea		      nop
     17  81b0					      REPEND
     18  81b1		       ea		      nop
     17  81b1					      REPEND
     18  81b2		       ea		      nop
     17  81b2					      REPEND
     18  81b3		       ea		      nop
     17  81b3					      REPEND
     18  81b4		       ea		      nop
     17  81b4					      REPEND
     18  81b5		       ea		      nop
     19  81b6					      REPEND
   3560  81b6					      endif
   3561  81b6					      endif
   3562  81b6				  -	      else
   3563  81b6				  -	      lda	(player0color),y
   3564  81b6				  -	      sta	player0colorstore
   3565  81b6				  -	      sleep	4
   3566  81b6					      endif
   3567  81b6		       4c 5b f1 	      jmp	continuekernel
   3568  81b9					      endif
   3569  81b9				   altkernel2
   3570  81b9		       8a		      txa
   3571  81ba					      ifnconst	vertical_reflect
   3572  81ba		       cb fc		      sbx	#256-pfwidth
   3573  81bc				  -	      else
   3574  81bc				  -	      sbx	#256-pfwidth/2
   3575  81bc					      endif
   3576  81bc		       30 1b		      bmi	lastkernelline
   3577  81be					      ifconst	pfrowheight
   3578  81be		       a9 04		      lda	#pfrowheight
   3579  81c0				  -	      else
   3580  81c0				  -	      ifnconst	pfres
   3581  81c0				  -	      lda	#8
   3582  81c0				  -	      else
   3583  81c0				  -	      lda	#(96/pfres)	; try to come close to the real size
   3584  81c0				  -	      endif
   3585  81c0					      endif
   3586  81c0		       85 9c		      sta	temp1
   3587  81c2		       4c 5b f1 	      jmp	continuekernel
   3588  81c5					      endif
   3589  81c5
   3590  81c5				   altkernel
   3591  81c5
   3592  81c5				  -	      ifconst	PFmaskvalue
   3593  81c5				  -	      lda	#PFmaskvalue
   3594  81c5					      else
   3595  81c5		       a9 00		      lda	#0
   3596  81c7					      endif
   3597  81c7		       85 0e		      sta	PF1L
   3598  81c9		       85 0f		      sta	PF2
   3599  81cb
   3600  81cb
   3601  81cb							;sleep 3
   3602  81cb
   3603  81cb							;28 cycles to fix things
   3604  81cb							;minus 11=17
   3605  81cb
   3606  81cb							; lax temp4
   3607  81cb							; clc
   3608  81cb		       8a		      txa
   3609  81cc					      ifnconst	vertical_reflect
   3610  81cc		       cb fc		      sbx	#256-pfwidth
   3611  81ce				  -	      else
   3612  81ce				  -	      sbx	#256-pfwidth/2
   3613  81ce					      endif
   3614  81ce
   3615  81ce		       30 09		      bmi	lastkernelline
   3616  81d0
   3617  81d0				  -	      ifconst	PFcolorandheight
   3618  81d0				  -	      ifconst	pfres
   3619  81d0				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   3620  81d0				  -	      else
   3621  81d0				  -	      ldy	playfieldcolorandheight-87,x
   3622  81d0				  -	      endif
   3623  81d0				  -	      ifnconst	backgroundchange
   3624  81d0				  -	      sty	COLUPF
   3625  81d0				  -	      else
   3626  81d0				  -	      sty	COLUBK
   3627  81d0				  -	      endif
   3628  81d0				  -	      ifconst	pfres
   3629  81d0				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   3630  81d0				  -	      else
   3631  81d0				  -	      lda	playfieldcolorandheight-88,x
   3632  81d0				  -	      endif
   3633  81d0				  -	      sta.w	temp1
   3634  81d0					      endif
   3635  81d0				  -	      ifconst	PFheights
   3636  81d0				  -	      lsr
   3637  81d0				  -	      lsr
   3638  81d0				  -	      tay
   3639  81d0				  -	      lda	(pfheighttable),y
   3640  81d0				  -	      sta.w	temp1
   3641  81d0					      endif
   3642  81d0				  -	      ifconst	PFcolors
   3643  81d0				  -	      tay
   3644  81d0				  -	      lda	(pfcolortable),y
   3645  81d0				  -	      ifnconst	backgroundchange
   3646  81d0				  -	      sta	COLUPF
   3647  81d0				  -	      else
   3648  81d0				  -	      sta	COLUBK
   3649  81d0				  -	      endif
   3650  81d0				  -	      ifconst	pfrowheight
   3651  81d0				  -	      lda	#pfrowheight
   3652  81d0				  -	      else
   3653  81d0				  -	      ifnconst	pfres
   3654  81d0				  -	      lda	#8
   3655  81d0				  -	      else
   3656  81d0				  -	      lda	#(96/pfres)	; try to come close to the real size
   3657  81d0				  -	      endif
   3658  81d0				  -	      endif
   3659  81d0				  -	      sta	temp1
   3660  81d0					      endif
   3661  81d0					      ifnconst	PFcolorandheight
   3662  81d0					      ifnconst	PFcolors
   3663  81d0					      ifnconst	PFheights
   3664  81d0				  -	      ifnconst	no_blank_lines
   3665  81d0				  -			; read paddle 0
   3666  81d0				  -			; lo-res paddle read
   3667  81d0				  -			; bit INPT0
   3668  81d0				  -			; bmi paddleskipread
   3669  81d0				  -			; inc paddle0
   3670  81d0				  -			;donepaddleskip
   3671  81d0				  -	      sleep	10
   3672  81d0				  -	      ifconst	pfrowheight
   3673  81d0				  -	      lda	#pfrowheight
   3674  81d0				  -	      else
   3675  81d0				  -	      ifnconst	pfres
   3676  81d0				  -	      lda	#8
   3677  81d0				  -	      else
   3678  81d0				  -	      lda	#(96/pfres)	; try to come close to the real size
   3679  81d0				  -	      endif
   3680  81d0				  -	      endif
   3681  81d0				  -	      sta	temp1
   3682  81d0					      endif
   3683  81d0					      endif
   3684  81d0					      endif
   3685  81d0					      endif
   3686  81d0
   3687  81d0
   3688  81d0		       a5 92		      lda	ballheight
   3689  81d2		       c7 89		      dcp	bally
   3690  81d4		       e5 9f		      sbc	temp4
   3691  81d6
   3692  81d6
   3693  81d6		       4c 76 f1 	      jmp	goback
   3694  81d9
   3695  81d9
   3696  81d9				  -	      ifnconst	no_blank_lines
   3697  81d9				  -lastkernelline
   3698  81d9				  -	      ifnconst	PFcolors
   3699  81d9				  -	      sleep	10
   3700  81d9				  -	      else
   3701  81d9				  -	      ldy	#124
   3702  81d9				  -	      lda	(pfcolortable),y
   3703  81d9				  -	      sta	COLUPF
   3704  81d9				  -	      endif
   3705  81d9				  -
   3706  81d9				  -	      ifconst	PFheights
   3707  81d9				  -	      ldx	#1
   3708  81d9				  -			;sleep 4
   3709  81d9				  -	      sleep	3	; this was over 1 cycle
   3710  81d9				  -	      else
   3711  81d9				  -	      ldx	playfieldpos
   3712  81d9				  -			;sleep 3
   3713  81d9				  -	      sleep	2	; this was over 1 cycle
   3714  81d9				  -	      endif
   3715  81d9				  -
   3716  81d9				  -	      jmp	enterlastkernel
   3717  81d9				  -
   3718  81d9					      else
   3719  81d9				   lastkernelline
   3720  81d9
   3721  81d9				  -	      ifconst	PFheights
   3722  81d9				  -	      ldx	#1
   3723  81d9				  -			;sleep 5
   3724  81d9				  -	      sleep	4	; this was over 1 cycle
   3725  81d9					      else
   3726  81d9		       a6 ef		      ldx	playfieldpos
   3727  81db							;sleep 4
      0  81db					      sleep	3	; this was over 1 cycle
      1  81db				   .CYCLES    SET	3
      2  81db
      3  81db				  -	      IF	.CYCLES < 2
      4  81db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  81db				  -	      ERR
      6  81db					      ENDIF
      7  81db
      8  81db					      IF	.CYCLES & 1
      9  81db					      IFNCONST	NO_ILLEGAL_OPCODES
     10  81db		       04 00		      nop	0
     11  81dd				  -	      ELSE
     12  81dd				  -	      bit	VSYNC
     13  81dd					      ENDIF
     14  81dd				   .CYCLES    SET	.CYCLES - 3
     15  81dd					      ENDIF
     16  81dd
     17  81dd				  -	      REPEAT	.CYCLES / 2
     18  81dd				  -	      nop
     19  81dd					      REPEND
   3729  81dd					      endif
   3730  81dd
   3731  81dd		       e0 00		      cpx	#0
   3732  81df		       d0 26		      bne	.enterfromNBL
   3733  81e1		       4c 68 f2 	      jmp	no_blank_lines_bailout
   3734  81e4					      endif
   3735  81e4
   3736  81e4					      if	((<*)>$d5)
   3737  8200		       00 00 00 00*	      align	256
   3738  8200					      endif
   3739  8200							; this is a kludge to prevent page wrapping - fix!!!
   3740  8200
   3741  8200				   .skipDrawlastP1
   3742  8200		       a9 00		      lda	#0
   3743  8202		       a8		      tay		; added so we don't cross a page
   3744  8203		       4c 2d f2 	      jmp	.continuelastP1
   3745  8206
   3746  8206				   .endkerloop		; enter at cycle 59??
   3747  8206
   3748  8206		       ea		      nop
   3749  8207
   3750  8207				   .enterfromNBL
   3751  8207					      ifconst	pfres
   3752  8207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   3753  820a		       84 0e		      sty	PF1L	;3
   3754  820c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   3755  820f		       84 0f		      sty	PF2L	;3
   3756  8211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   3757  8214		       84 0e		      sty	PF1R	; possibly too early?
   3758  8216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   3759  8219		       84 0f		      sty	PF2R	;3
   3760  821b				  -	      else
   3761  821b				  -	      ldy.w	playfield-48+pfwidth*12+44
   3762  821b				  -	      sty	PF1L	;3
   3763  821b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   3764  821b				  -	      sty	PF2L	;3
   3765  821b				  -	      ldy.w	playfield-48+pfwidth*12+47
   3766  821b				  -	      sty	PF1R	; possibly too early?
   3767  821b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   3768  821b				  -	      sty	PF2R	;3
   3769  821b					      endif
   3770  821b
   3771  821b				   enterlastkernel
   3772  821b		       a5 92		      lda	ballheight
   3773  821d
   3774  821d							; tya
   3775  821d		       c7 89		      dcp	bally
   3776  821f							; sleep 4
   3777  821f
   3778  821f							; sbc stack3
   3779  821f		       2a		      rol
   3780  8220		       2a		      rol
   3781  8221		       85 1f		      sta	ENABL
   3782  8223
   3783  8223		       a5 8f		      lda	player1height	;3
   3784  8225		       c7 86		      dcp	player1y	;5
   3785  8227		       90 d7		      bcc	.skipDrawlastP1
   3786  8229		       a4 86		      ldy	player1y	;3
   3787  822b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   3788  822d							; so it doesn't cross a page boundary!
   3789  822d
   3790  822d				   .continuelastP1
   3791  822d		       85 1c		      sta	GRP1	;3
   3792  822f
   3793  822f					      ifnconst	player1colors
   3794  822f		       a5 87		      lda	missile1height	;3
   3795  8231		       c7 88		      dcp	missile1y	;5
   3796  8233				  -	      else
   3797  8233				  -	      lda	(player1color),y
   3798  8233				  -	      sta	COLUP1
   3799  8233					      endif
   3800  8233
   3801  8233		       ca		      dex
   3802  8234							;dec temp4 ; might try putting this above PF writes
   3803  8234		       f0 34		      beq	endkernel
   3804  8236
   3805  8236
   3806  8236					      ifconst	pfres
   3807  8236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   3808  8239		       84 0e		      sty	PF1L	;3
   3809  823b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   3810  823e		       84 0f		      sty	PF2L	;3
   3811  8240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   3812  8243		       84 0e		      sty	PF1R	; possibly too early?
   3813  8245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   3814  8248		       84 0f		      sty	PF2R	;3
   3815  824a				  -	      else
   3816  824a				  -	      ldy.w	playfield-48+pfwidth*12+44
   3817  824a				  -	      sty	PF1L	;3
   3818  824a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   3819  824a				  -	      sty	PF2L	;3
   3820  824a				  -	      ldy.w	playfield-48+pfwidth*12+47
   3821  824a				  -	      sty	PF1R	; possibly too early?
   3822  824a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   3823  824a				  -	      sty	PF2R	;3
   3824  824a					      endif
   3825  824a
   3826  824a					      ifnconst	player1colors
   3827  824a		       2a		      rol		;2
   3828  824b		       2a		      rol		;2
   3829  824c		       85 1e		      sta	ENAM1	;3
   3830  824e				  -	      else
   3831  824e				  -	      ifnconst	playercolors
   3832  824e				  -	      sleep	7
   3833  824e				  -	      else
   3834  824e				  -	      lda.w	player0colorstore
   3835  824e				  -	      sta	COLUP0
   3836  824e				  -	      endif
   3837  824e					      endif
   3838  824e
   3839  824e		       ad 8e 00 	      lda.w	player0height
   3840  8251		       c7 85		      dcp	player0y
   3841  8253		       90 0d		      bcc	.skipDrawlastP0
   3842  8255		       a4 85		      ldy	player0y
   3843  8257		       b1 8a		      lda	(player0pointer),y
   3844  8259				   .continuelastP0
   3845  8259		       85 1b		      sta	GRP0
   3846  825b
   3847  825b
   3848  825b
   3849  825b				  -	      ifnconst	no_blank_lines
   3850  825b				  -	      lda	missile0height	;3
   3851  825b				  -	      dcp	missile0y	;5
   3852  825b				  -	      sbc	stack1
   3853  825b				  -	      sta	ENAM0	;3
   3854  825b				  -	      jmp	.endkerloop
   3855  825b					      else
   3856  825b				  -	      ifconst	readpaddle
   3857  825b				  -	      ldy	currentpaddle
   3858  825b				  -	      lda	INPT0,y
   3859  825b				  -	      bpl	noreadpaddle2
   3860  825b				  -	      inc	paddle
   3861  825b				  -	      jmp	.endkerloop
   3862  825b				  -noreadpaddle2
   3863  825b				  -	      sleep	4
   3864  825b				  -	      jmp	.endkerloop
   3865  825b					      else		; no_blank_lines and no paddle reading
   3866  825b		       68		      pla
   3867  825c		       48		      pha		; 14 cycles in 4 bytes
   3868  825d		       68		      pla
   3869  825e		       48		      pha
   3870  825f							; sleep 14
   3871  825f		       4c 06 f2 	      jmp	.endkerloop
   3872  8262					      endif
   3873  8262					      endif
   3874  8262
   3875  8262
   3876  8262							; ifconst donepaddleskip
   3877  8262							;paddleskipread
   3878  8262							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   3879  8262							; plus we get a lo-res paddle read
   3880  8262							; bmi donepaddleskip
   3881  8262							; endif
   3882  8262
   3883  8262				   .skipDrawlastP0
   3884  8262		       a9 00		      lda	#0
   3885  8264		       a8		      tay
   3886  8265		       4c 59 f2 	      jmp	.continuelastP0
   3887  8268
   3888  8268					      ifconst	no_blank_lines
   3889  8268				   no_blank_lines_bailout
   3890  8268		       a2 00		      ldx	#0
   3891  826a					      endif
   3892  826a
   3893  826a				   endkernel
   3894  826a							; 6 digit score routine
   3895  826a		       86 0e		      stx	PF1
   3896  826c		       86 0f		      stx	PF2
   3897  826e		       86 0d		      stx	PF0
   3898  8270		       18		      clc
   3899  8271
   3900  8271					      ifconst	pfrowheight
   3901  8271		       a9 06		      lda	#pfrowheight+2
   3902  8273				  -	      else
   3903  8273				  -	      ifnconst	pfres
   3904  8273				  -	      lda	#10
   3905  8273				  -	      else
   3906  8273				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   3907  8273				  -	      endif
   3908  8273					      endif
   3909  8273
   3910  8273		       e5 ef		      sbc	playfieldpos
   3911  8275		       85 ef		      sta	playfieldpos
   3912  8277		       8a		      txa
   3913  8278
   3914  8278					      ifconst	shakescreen
   3915  8278		       24 e0		      bit	shakescreen
   3916  827a		       30 02		      bmi	noshakescreen2
   3917  827c		       a2 3d		      ldx	#$3D
   3918  827e				   noshakescreen2
   3919  827e					      endif
   3920  827e
   3921  827e		       95 02		      sta	WSYNC,x
   3922  8280
   3923  8280							; STA WSYNC ;first one, need one more
   3924  8280		       85 0b		      sta	REFP0
   3925  8282		       85 0c		      sta	REFP1
   3926  8284		       85 1b		      STA	GRP0
   3927  8286		       85 1c		      STA	GRP1
   3928  8288							; STA PF1
   3929  8288							; STA PF2
   3930  8288		       85 2b		      sta	HMCLR
   3931  828a		       85 1d		      sta	ENAM0
   3932  828c		       85 1e		      sta	ENAM1
   3933  828e		       85 1f		      sta	ENABL
   3934  8290
   3935  8290		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   3936  8292		       85 85		      sta	player0y
   3937  8294		       a5 9e		      lda	temp3
   3938  8296		       85 86		      sta	player1y
   3939  8298					      ifnconst	player1colors
   3940  8298		       a5 a1		      lda	temp6
   3941  829a		       85 88		      sta	missile1y
   3942  829c					      endif
   3943  829c					      ifnconst	playercolors
   3944  829c					      ifnconst	readpaddle
   3945  829c		       a5 a0		      lda	temp5
   3946  829e		       85 91		      sta	missile0y
   3947  82a0					      endif
   3948  82a0					      endif
   3949  82a0		       a5 f7		      lda	stack2
   3950  82a2		       85 89		      sta	bally
   3951  82a4
   3952  82a4							; strangely, this isn't required any more. might have
   3953  82a4							; resulted from the no_blank_lines score bounce fix
   3954  82a4							;ifconst no_blank_lines
   3955  82a4							;sta WSYNC
   3956  82a4							;endif
   3957  82a4
   3958  82a4		       ad 84 02 	      lda	INTIM
   3959  82a7		       18		      clc
   3960  82a8				  -	      ifnconst	vblank_time
   3961  82a8				  -	      adc	#43+12+87
   3962  82a8					      else
   3963  82a8		       69 8e		      adc	#vblank_time+12+87
   3964  82aa
   3965  82aa					      endif
   3966  82aa							; sta WSYNC
   3967  82aa		       8d 96 02 	      sta	TIM64T
   3968  82ad
   3969  82ad				  -	      ifconst	minikernel
   3970  82ad				  -	      jsr	minikernel
   3971  82ad					      endif
   3972  82ad
   3973  82ad							; now reassign temp vars for score pointers
   3974  82ad
   3975  82ad							; score pointers contain:
   3976  82ad							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   3977  82ad							; swap lo2->temp1
   3978  82ad							; swap lo4->temp3
   3979  82ad							; swap lo6->temp5
   3980  82ad					      ifnconst	noscore
   3981  82ad		       a5 97		      lda	scorepointers+1
   3982  82af							; ldy temp1
   3983  82af		       85 9c		      sta	temp1
   3984  82b1							; sty scorepointers+1
   3985  82b1
   3986  82b1		       a5 99		      lda	scorepointers+3
   3987  82b3							; ldy temp3
   3988  82b3		       85 9e		      sta	temp3
   3989  82b5							; sty scorepointers+3
   3990  82b5
   3991  82b5
   3992  82b5		       85 2b		      sta	HMCLR
   3993  82b7		       ba		      tsx
   3994  82b8		       86 f6		      stx	stack1
   3995  82ba		       a2 e0		      ldx	#$E0
   3996  82bc		       86 20		      stx	HMP0
   3997  82be
   3998  82be		       a5 a3		      LDA	scorecolor
   3999  82c0		       85 06		      STA	COLUP0
   4000  82c2		       85 07		      STA	COLUP1
   4001  82c4				  -	      ifconst	scorefade
   4002  82c4				  -	      STA	stack2
   4003  82c4					      endif
   4004  82c4				  -	      ifconst	pfscore
   4005  82c4				  -	      lda	pfscorecolor
   4006  82c4				  -	      sta	COLUPF
   4007  82c4					      endif
   4008  82c4		       85 02		      sta	WSYNC
   4009  82c6		       a2 00		      ldx	#0
   4010  82c8		       86 1b		      STx	GRP0
   4011  82ca		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4012  82cc
   4013  82cc		       a5 9b		      lda	scorepointers+5
   4014  82ce							; ldy temp5
   4015  82ce		       95 a0		      sta	temp5,x
   4016  82d0							; sty scorepointers+5
   4017  82d0		       a9 ff		      lda	#>scoretable
   4018  82d2		       85 97		      sta	scorepointers+1
   4019  82d4		       85 99		      sta	scorepointers+3
   4020  82d6		       85 9b		      sta	scorepointers+5
   4021  82d8		       85 9d		      sta	temp2
   4022  82da		       85 9f		      sta	temp4
   4023  82dc		       85 a1		      sta	temp6
   4024  82de		       a0 07		      LDY	#7
   4025  82e0		       84 25		      STY	VDELP0
   4026  82e2		       85 10		      STA	RESP0
   4027  82e4		       85 11		      STA	RESP1
   4028  82e6
   4029  82e6
   4030  82e6		       a9 03		      LDA	#$03
   4031  82e8		       85 04		      STA	NUSIZ0
   4032  82ea		       85 05		      STA	NUSIZ1
   4033  82ec		       85 26		      STA	VDELP1
   4034  82ee		       a9 f0		      LDA	#$F0
   4035  82f0		       85 21		      STA	HMP1
   4036  82f2		       b1 96		      lda	(scorepointers),y
   4037  82f4		       85 1b		      sta	GRP0
   4038  82f6		       85 2a		      STA	HMOVE	; cycle 73 ?
   4039  82f8		       4c 08 f3 	      jmp	beginscore
   4040  82fb
   4041  82fb
   4042  82fb					      if	((<*)>$d4)
   4043  8300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   4044  8300					      endif
   4045  8300
   4046  8300				   loop2
   4047  8300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   4048  8302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   4049  8304				  -	      ifconst	pfscore
   4050  8304				  -	      lda.w	pfscore1
   4051  8304				  -	      sta	PF1
   4052  8304					      else
   4053  8304				  -	      ifconst	scorefade
   4054  8304				  -	      sleep	2
   4055  8304				  -	      dec	stack2	; decrement the temporary scorecolor
   4056  8304					      else
      0  8304					      sleep	7
      1  8304				   .CYCLES    SET	7
      2  8304
      3  8304				  -	      IF	.CYCLES < 2
      4  8304				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8304				  -	      ERR
      6  8304					      ENDIF
      7  8304
      8  8304					      IF	.CYCLES & 1
      9  8304					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8304		       04 00		      nop	0
     11  8306				  -	      ELSE
     12  8306				  -	      bit	VSYNC
     13  8306					      ENDIF
     14  8306				   .CYCLES    SET	.CYCLES - 3
     15  8306					      ENDIF
     16  8306
     17  8306					      REPEAT	.CYCLES / 2
     18  8306		       ea		      nop
     17  8306					      REPEND
     18  8307		       ea		      nop
     19  8308					      REPEND
   4058  8308					      endif
   4059  8308					      endif
   4060  8308							; cycle 0
   4061  8308				   beginscore
   4062  8308		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   4063  830a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   4064  830c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   4065  830e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   4066  8310		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   4067  8312		       9a		      txs
   4068  8313		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   4069  8315				  -	      ifconst	scorefade
   4070  8315				  -	      lda	stack2
   4071  8315					      else
      0  8315					      sleep	3
      1  8315				   .CYCLES    SET	3
      2  8315
      3  8315				  -	      IF	.CYCLES < 2
      4  8315				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8315				  -	      ERR
      6  8315					      ENDIF
      7  8315
      8  8315					      IF	.CYCLES & 1
      9  8315					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8315		       04 00		      nop	0
     11  8317				  -	      ELSE
     12  8317				  -	      bit	VSYNC
     13  8317					      ENDIF
     14  8317				   .CYCLES    SET	.CYCLES - 3
     15  8317					      ENDIF
     16  8317
     17  8317				  -	      REPEAT	.CYCLES / 2
     18  8317				  -	      nop
     19  8317					      REPEND
   4073  8317					      endif
   4074  8317
   4075  8317				  -	      ifconst	pfscore
   4076  8317				  -	      lda	pfscore2
   4077  8317				  -	      sta	PF1
   4078  8317					      else
   4079  8317				  -	      ifconst	scorefade
   4080  8317				  -	      sta	COLUP0
   4081  8317				  -	      sta	COLUP1
   4082  8317					      else
      0  8317					      sleep	6
      1  8317				   .CYCLES    SET	6
      2  8317
      3  8317				  -	      IF	.CYCLES < 2
      4  8317				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8317				  -	      ERR
      6  8317					      ENDIF
      7  8317
      8  8317				  -	      IF	.CYCLES & 1
      9  8317				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8317				  -	      nop	0
     11  8317				  -	      ELSE
     12  8317				  -	      bit	VSYNC
     13  8317				  -	      ENDIF
     14  8317				  -.CYCLES    SET	.CYCLES - 3
     15  8317					      ENDIF
     16  8317
     17  8317					      REPEAT	.CYCLES / 2
     18  8317		       ea		      nop
     17  8317					      REPEND
     18  8318		       ea		      nop
     17  8318					      REPEND
     18  8319		       ea		      nop
     19  831a					      REPEND
   4084  831a					      endif
   4085  831a					      endif
   4086  831a
   4087  831a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   4088  831c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   4089  831e		       ba		      tsx
   4090  831f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   4091  8321		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   4092  8323		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   4093  8325		       88		      dey
   4094  8326		       10 d8		      bpl	loop2	;+2 60 180
   4095  8328
   4096  8328		       a6 f6		      ldx	stack1
   4097  832a		       9a		      txs
   4098  832b							; lda scorepointers+1
   4099  832b		       a4 9c		      ldy	temp1
   4100  832d							; sta temp1
   4101  832d		       84 97		      sty	scorepointers+1
   4102  832f
   4103  832f		       a9 00		      LDA	#0
   4104  8331		       85 0e		      sta	PF1
   4105  8333		       85 1b		      STA	GRP0
   4106  8335		       85 1c		      STA	GRP1
   4107  8337		       85 25		      STA	VDELP0
   4108  8339		       85 26		      STA	VDELP1	;do we need these
   4109  833b		       85 04		      STA	NUSIZ0
   4110  833d		       85 05		      STA	NUSIZ1
   4111  833f
   4112  833f							; lda scorepointers+3
   4113  833f		       a4 9e		      ldy	temp3
   4114  8341							; sta temp3
   4115  8341		       84 99		      sty	scorepointers+3
   4116  8343
   4117  8343							; lda scorepointers+5
   4118  8343		       a4 a0		      ldy	temp5
   4119  8345							; sta temp5
   4120  8345		       84 9b		      sty	scorepointers+5
   4121  8347					      endif		;noscore
   4122  8347				  -	      ifconst	readpaddle
   4123  8347				  -	      lda	#%11000010
   4124  8347					      else
   4125  8347				  -	      ifconst	qtcontroller
   4126  8347				  -	      lda	qtcontroller
   4127  8347				  -	      lsr		; bit 0 in carry
   4128  8347				  -	      lda	#4
   4129  8347				  -	      ror		; carry into top of A
   4130  8347					      else
   4131  8347		       a9 02		      lda	#2
   4132  8349					      endif		; qtcontroller
   4133  8349					      endif		; readpaddle
   4134  8349		       85 02		      sta	WSYNC
   4135  834b		       85 01		      sta	VBLANK
      0  834d					      RETURN
      1  834d				  -	      ifnconst	bankswitch
      2  834d				  -	      rts
      3  834d					      else
      4  834d		       4c dd ff 	      jmp	BS_return
      5  8350					      endif
   4137  8350					      ifconst	shakescreen
   4138  8350				   doshakescreen
   4139  8350		       24 e0		      bit	shakescreen
   4140  8352		       30 02		      bmi	noshakescreen
   4141  8354		       85 02		      sta	WSYNC
   4142  8356				   noshakescreen
   4143  8356		       a6 90		      ldx	missile0height
   4144  8358		       e8		      inx
   4145  8359		       60		      rts
   4146  835a					      endif
   4147  835a
   4148  835a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4149  835a
   4150  835a				   start
   4151  835a		       78		      sei
   4152  835b		       d8		      cld
   4153  835c		       a0 00		      ldy	#0
   4154  835e		       a5 d0		      lda	$D0
   4155  8360		       c9 2c		      cmp	#$2C	;check RAM location #1
   4156  8362		       d0 07		      bne	MachineIs2600
   4157  8364		       a5 d1		      lda	$D1
   4158  8366		       c9 a9		      cmp	#$A9	;check RAM location #2
   4159  8368		       d0 01		      bne	MachineIs2600
   4160  836a		       88		      dey
   4161  836b				   MachineIs2600
   4162  836b		       a2 00		      ldx	#0
   4163  836d		       8a		      txa
   4164  836e				   clearmem
   4165  836e		       e8		      inx
   4166  836f		       9a		      txs
   4167  8370		       48		      pha
   4168  8371		       d0 fb		      bne	clearmem
   4169  8373		       84 9c		      sty	temp1
   4170  8375					      ifnconst	multisprite
   4171  8375					      ifconst	pfrowheight
   4172  8375		       a9 04		      lda	#pfrowheight
   4173  8377				  -	      else
   4174  8377				  -	      ifconst	pfres
   4175  8377				  -	      lda	#(96/pfres)
   4176  8377				  -	      else
   4177  8377				  -	      lda	#8
   4178  8377				  -	      endif
   4179  8377					      endif
   4180  8377		       85 ef		      sta	playfieldpos
   4181  8379					      endif
   4182  8379		       a2 05		      ldx	#5
   4183  837b				   initscore
   4184  837b		       a9 74		      lda	#<scoretable
   4185  837d		       95 96		      sta	scorepointers,x
   4186  837f		       ca		      dex
   4187  8380		       10 f9		      bpl	initscore
   4188  8382		       a9 01		      lda	#1
   4189  8384		       85 0a		      sta	CTRLPF
   4190  8386		       0d 84 02 	      ora	INTIM
   4191  8389		       85 a2		      sta	rand
   4192  838b
   4193  838b				  -	      ifconst	multisprite
   4194  838b				  -	      jsr	multisprite_setup
   4195  838b					      endif
   4196  838b
   4197  838b				  -	      ifnconst	bankswitch
   4198  838b				  -	      jmp	game
   4199  838b					      else
   4200  838b		       a9 10		      lda	#>(game-1)
   4201  838d		       48		      pha
   4202  838e		       a9 ff		      lda	#<(game-1)
   4203  8390		       48		      pha
   4204  8391		       48		      pha
   4205  8392		       48		      pha
   4206  8393		       a2 01		      ldx	#1
   4207  8395		       4c eb ff 	      jmp	BS_jsr
   4208  8398					      endif
   4209  8398							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4210  8398
   4211  8398							; playfield drawing routines
   4212  8398							; you get a 32x12 bitmapped display in a single color :)
   4213  8398							; 0-31 and 0-11
   4214  8398
   4215  8398				   pfclear		; clears playfield - or fill with pattern
   4216  8398					      ifconst	pfres
   4217  8398		       a2 5f		      ldx	#pfres*pfwidth-1
   4218  839a				  -	      else
   4219  839a				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   4220  839a					      endif
   4221  839a				   pfclear_loop
   4222  839a				  -	      ifnconst	superchip
   4223  839a				  -	      sta	playfield,x
   4224  839a					      else
   4225  839a		       9d 20 10 	      sta	playfield-128,x
   4226  839d					      endif
   4227  839d		       ca		      dex
   4228  839e		       10 fa		      bpl	pfclear_loop
      0  83a0					      RETURN
      1  83a0				  -	      ifnconst	bankswitch
      2  83a0				  -	      rts
      3  83a0					      else
      4  83a0		       4c dd ff 	      jmp	BS_return
      5  83a3					      endif
   4230  83a3
   4231  83a3				   setuppointers
   4232  83a3		       86 9d		      stx	temp2	; store on.off.flip value
   4233  83a5		       aa		      tax		; put x-value in x 
   4234  83a6		       4a		      lsr
   4235  83a7		       4a		      lsr
   4236  83a8		       4a		      lsr		; divide x pos by 8 
   4237  83a9		       85 9c		      sta	temp1
   4238  83ab		       98		      tya
   4239  83ac		       0a		      asl
   4240  83ad					      if	pfwidth=4
   4241  83ad		       0a		      asl		; multiply y pos by 4
   4242  83ae					      endif		; else multiply by 2
   4243  83ae		       18		      clc
   4244  83af		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   4245  83b1		       a8		      tay		; put the value in y
   4246  83b2		       a5 9d		      lda	temp2	; restore on.off.flip value
   4247  83b4		       60		      rts
   4248  83b5
   4249  83b5				   pfread
   4250  83b5							;x=xvalue, y=yvalue
   4251  83b5		       20 a3 f3 	      jsr	setuppointers
   4252  83b8		       bd 4d f4 	      lda	setbyte,x
   4253  83bb		       39 a0 10 	      and	playfield,y
   4254  83be		       5d 4d f4 	      eor	setbyte,x
   4255  83c1							; beq readzero
   4256  83c1							; lda #1
   4257  83c1							; readzero
      0  83c1					      RETURN
      1  83c1				  -	      ifnconst	bankswitch
      2  83c1				  -	      rts
      3  83c1					      else
      4  83c1		       4c dd ff 	      jmp	BS_return
      5  83c4					      endif
   4259  83c4
   4260  83c4				   pfpixel
   4261  83c4							;x=xvalue, y=yvalue, a=0,1,2
   4262  83c4		       20 a3 f3 	      jsr	setuppointers
   4263  83c7
   4264  83c7					      ifconst	bankswitch
   4265  83c7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4266  83c9		       f0 0f		      beq	pixelon_r	; if "on" go to on
   4267  83cb		       4a		      lsr
   4268  83cc		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   4269  83ce		       b9 a0 10 	      lda	playfield,y	; if here, it's "flip"
   4270  83d1		       5d 4d f4 	      eor	setbyte,x
   4271  83d4					      ifconst	superchip
   4272  83d4		       99 20 10 	      sta	playfield-128,y
   4273  83d7				  -	      else
   4274  83d7				  -	      sta	playfield,y
   4275  83d7					      endif
      0  83d7					      RETURN
      1  83d7				  -	      ifnconst	bankswitch
      2  83d7				  -	      rts
      3  83d7					      else
      4  83d7		       4c dd ff 	      jmp	BS_return
      5  83da					      endif
   4277  83da				   pixelon_r
   4278  83da		       b9 a0 10 	      lda	playfield,y
   4279  83dd		       1d 4d f4 	      ora	setbyte,x
   4280  83e0					      ifconst	superchip
   4281  83e0		       99 20 10 	      sta	playfield-128,y
   4282  83e3				  -	      else
   4283  83e3				  -	      sta	playfield,y
   4284  83e3					      endif
      0  83e3					      RETURN
      1  83e3				  -	      ifnconst	bankswitch
      2  83e3				  -	      rts
      3  83e3					      else
      4  83e3		       4c dd ff 	      jmp	BS_return
      5  83e6					      endif
   4286  83e6				   pixeloff_r
   4287  83e6		       bd 4d f4 	      lda	setbyte,x
   4288  83e9		       49 ff		      eor	#$ff
   4289  83eb		       39 a0 10 	      and	playfield,y
   4290  83ee					      ifconst	superchip
   4291  83ee		       99 20 10 	      sta	playfield-128,y
   4292  83f1				  -	      else
   4293  83f1				  -	      sta	playfield,y
   4294  83f1					      endif
      0  83f1					      RETURN
      1  83f1				  -	      ifnconst	bankswitch
      2  83f1				  -	      rts
      3  83f1					      else
      4  83f1		       4c dd ff 	      jmp	BS_return
      5  83f4					      endif
   4296  83f4
   4297  83f4				  -	      else
   4298  83f4				  -	      jmp	plotpoint
   4299  83f4					      endif
   4300  83f4
   4301  83f4				   pfhline
   4302  83f4							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4303  83f4		       20 a3 f3 	      jsr	setuppointers
   4304  83f7		       4c 01 f4 	      jmp	noinc
   4305  83fa				   keepgoing
   4306  83fa		       e8		      inx
   4307  83fb		       8a		      txa
   4308  83fc		       29 07		      and	#7
   4309  83fe		       d0 01		      bne	noinc
   4310  8400		       c8		      iny
   4311  8401				   noinc
   4312  8401		       20 26 f4 	      jsr	plotpoint
   4313  8404		       e4 9e		      cpx	temp3
   4314  8406		       30 f2		      bmi	keepgoing
      0  8408					      RETURN
      1  8408				  -	      ifnconst	bankswitch
      2  8408				  -	      rts
      3  8408					      else
      4  8408		       4c dd ff 	      jmp	BS_return
      5  840b					      endif
   4316  840b
   4317  840b				   pfvline
   4318  840b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4319  840b		       20 a3 f3 	      jsr	setuppointers
   4320  840e		       84 9c		      sty	temp1	; store memory location offset
   4321  8410		       e6 9e		      inc	temp3	; increase final x by 1 
   4322  8412		       a5 9e		      lda	temp3
   4323  8414		       0a		      asl
   4324  8415					      if	pfwidth=4
   4325  8415		       0a		      asl		; multiply by 4
   4326  8416					      endif		; else multiply by 2
   4327  8416		       85 9e		      sta	temp3	; store it
   4328  8418							; Thanks to Michael Rideout for fixing a bug in this code
   4329  8418							; right now, temp1=y=starting memory location, temp3=final
   4330  8418							; x should equal original x value
   4331  8418				   keepgoingy
   4332  8418		       20 26 f4 	      jsr	plotpoint
   4333  841b		       c8		      iny
   4334  841c		       c8		      iny
   4335  841d					      if	pfwidth=4
   4336  841d		       c8		      iny
   4337  841e		       c8		      iny
   4338  841f					      endif
   4339  841f		       c4 9e		      cpy	temp3
   4340  8421		       30 f5		      bmi	keepgoingy
      0  8423					      RETURN
      1  8423				  -	      ifnconst	bankswitch
      2  8423				  -	      rts
      3  8423					      else
      4  8423		       4c dd ff 	      jmp	BS_return
      5  8426					      endif
   4342  8426
   4343  8426				   plotpoint
   4344  8426		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4345  8428		       f0 0d		      beq	pixelon	; if "on" go to on
   4346  842a		       4a		      lsr
   4347  842b		       b0 14		      bcs	pixeloff	; value is 1 if true
   4348  842d		       b9 a0 10 	      lda	playfield,y	; if here, it's "flip"
   4349  8430		       5d 4d f4 	      eor	setbyte,x
   4350  8433					      ifconst	superchip
   4351  8433		       99 20 10 	      sta	playfield-128,y
   4352  8436				  -	      else
   4353  8436				  -	      sta	playfield,y
   4354  8436					      endif
   4355  8436		       60		      rts
   4356  8437				   pixelon
   4357  8437		       b9 a0 10 	      lda	playfield,y
   4358  843a		       1d 4d f4 	      ora	setbyte,x
   4359  843d					      ifconst	superchip
   4360  843d		       99 20 10 	      sta	playfield-128,y
   4361  8440				  -	      else
   4362  8440				  -	      sta	playfield,y
   4363  8440					      endif
   4364  8440		       60		      rts
   4365  8441				   pixeloff
   4366  8441		       bd 4d f4 	      lda	setbyte,x
   4367  8444		       49 ff		      eor	#$ff
   4368  8446		       39 a0 10 	      and	playfield,y
   4369  8449					      ifconst	superchip
   4370  8449		       99 20 10 	      sta	playfield-128,y
   4371  844c				  -	      else
   4372  844c				  -	      sta	playfield,y
   4373  844c					      endif
   4374  844c		       60		      rts
   4375  844d
   4376  844d				   setbyte
   4377  844d					      ifnconst	pfcenter
   4378  844d		       80		      .byte.b	$80
   4379  844e		       40		      .byte.b	$40
   4380  844f		       20		      .byte.b	$20
   4381  8450		       10		      .byte.b	$10
   4382  8451		       08		      .byte.b	$08
   4383  8452		       04		      .byte.b	$04
   4384  8453		       02		      .byte.b	$02
   4385  8454		       01		      .byte.b	$01
   4386  8455					      endif
   4387  8455		       01		      .byte.b	$01
   4388  8456		       02		      .byte.b	$02
   4389  8457		       04		      .byte.b	$04
   4390  8458		       08		      .byte.b	$08
   4391  8459		       10		      .byte.b	$10
   4392  845a		       20		      .byte.b	$20
   4393  845b		       40		      .byte.b	$40
   4394  845c		       80		      .byte.b	$80
   4395  845d		       80		      .byte.b	$80
   4396  845e		       40		      .byte.b	$40
   4397  845f		       20		      .byte.b	$20
   4398  8460		       10		      .byte.b	$10
   4399  8461		       08		      .byte.b	$08
   4400  8462		       04		      .byte.b	$04
   4401  8463		       02		      .byte.b	$02
   4402  8464		       01		      .byte.b	$01
   4403  8465		       01		      .byte.b	$01
   4404  8466		       02		      .byte.b	$02
   4405  8467		       04		      .byte.b	$04
   4406  8468		       08		      .byte.b	$08
   4407  8469		       10		      .byte.b	$10
   4408  846a		       20		      .byte.b	$20
   4409  846b		       40		      .byte.b	$40
   4410  846c		       80		      .byte.b	$80
   4411  846d							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4412  846d
   4413  846d				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   4414  846d		       d0 2a		      bne	notleft
   4415  846f							;left
   4416  846f					      ifconst	pfres
   4417  846f		       a2 60		      ldx	#pfres*4
   4418  8471				  -	      else
   4419  8471				  -	      ldx	#48
   4420  8471					      endif
   4421  8471				   leftloop
   4422  8471		       bd 9f 10 	      lda	playfield-1,x
   4423  8474		       4a		      lsr
   4424  8475
   4425  8475					      ifconst	superchip
   4426  8475		       bd 9e 10 	      lda	playfield-2,x
   4427  8478		       2a		      rol
   4428  8479		       9d 1e 10 	      sta	playfield-130,x
   4429  847c		       bd 9d 10 	      lda	playfield-3,x
   4430  847f		       6a		      ror
   4431  8480		       9d 1d 10 	      sta	playfield-131,x
   4432  8483		       bd 9c 10 	      lda	playfield-4,x
   4433  8486		       2a		      rol
   4434  8487		       9d 1c 10 	      sta	playfield-132,x
   4435  848a		       bd 9f 10 	      lda	playfield-1,x
   4436  848d		       6a		      ror
   4437  848e		       9d 1f 10 	      sta	playfield-129,x
   4438  8491				  -	      else
   4439  8491				  -	      rol	playfield-2,x
   4440  8491				  -	      ror	playfield-3,x
   4441  8491				  -	      rol	playfield-4,x
   4442  8491				  -	      ror	playfield-1,x
   4443  8491					      endif
   4444  8491
   4445  8491		       8a		      txa
   4446  8492		       cb 04		      sbx	#4
   4447  8494		       d0 db		      bne	leftloop
      0  8496					      RETURN
      1  8496				  -	      ifnconst	bankswitch
      2  8496				  -	      rts
      3  8496					      else
      4  8496		       4c dd ff 	      jmp	BS_return
      5  8499					      endif
   4449  8499
   4450  8499				   notleft
   4451  8499		       4a		      lsr
   4452  849a		       90 2a		      bcc	notright
   4453  849c							;right
   4454  849c
   4455  849c					      ifconst	pfres
   4456  849c		       a2 60		      ldx	#pfres*4
   4457  849e				  -	      else
   4458  849e				  -	      ldx	#48
   4459  849e					      endif
   4460  849e				   rightloop
   4461  849e		       bd 9c 10 	      lda	playfield-4,x
   4462  84a1		       4a		      lsr
   4463  84a2					      ifconst	superchip
   4464  84a2		       bd 9d 10 	      lda	playfield-3,x
   4465  84a5		       2a		      rol
   4466  84a6		       9d 1d 10 	      sta	playfield-131,x
   4467  84a9		       bd 9e 10 	      lda	playfield-2,x
   4468  84ac		       6a		      ror
   4469  84ad		       9d 1e 10 	      sta	playfield-130,x
   4470  84b0		       bd 9f 10 	      lda	playfield-1,x
   4471  84b3		       2a		      rol
   4472  84b4		       9d 1f 10 	      sta	playfield-129,x
   4473  84b7		       bd 9c 10 	      lda	playfield-4,x
   4474  84ba		       6a		      ror
   4475  84bb		       9d 1c 10 	      sta	playfield-132,x
   4476  84be				  -	      else
   4477  84be				  -	      rol	playfield-3,x
   4478  84be				  -	      ror	playfield-2,x
   4479  84be				  -	      rol	playfield-1,x
   4480  84be				  -	      ror	playfield-4,x
   4481  84be					      endif
   4482  84be		       8a		      txa
   4483  84bf		       cb 04		      sbx	#4
   4484  84c1		       d0 db		      bne	rightloop
      0  84c3					      RETURN
      1  84c3				  -	      ifnconst	bankswitch
      2  84c3				  -	      rts
      3  84c3					      else
      4  84c3		       4c dd ff 	      jmp	BS_return
      5  84c6					      endif
   4486  84c6
   4487  84c6				   notright
   4488  84c6		       4a		      lsr
   4489  84c7		       90 5b		      bcc	notup
   4490  84c9							;up
   4491  84c9		       4a		      lsr
   4492  84ca		       90 02		      bcc	onedecup
   4493  84cc		       c6 ef		      dec	playfieldpos
   4494  84ce				   onedecup
   4495  84ce		       c6 ef		      dec	playfieldpos
   4496  84d0		       f0 02		      beq	shiftdown
   4497  84d2		       10 4d		      bpl	noshiftdown2
   4498  84d4				   shiftdown
   4499  84d4					      ifconst	pfrowheight
   4500  84d4		       a9 04		      lda	#pfrowheight
   4501  84d6				  -	      else
   4502  84d6				  -	      ifnconst	pfres
   4503  84d6				  -	      lda	#8
   4504  84d6				  -	      else
   4505  84d6				  -	      lda	#(96/pfres)	; try to come close to the real size
   4506  84d6				  -	      endif
   4507  84d6					      endif
   4508  84d6
   4509  84d6		       85 ef		      sta	playfieldpos
   4510  84d8		       ad a3 10 	      lda	playfield+3
   4511  84db		       85 9f		      sta	temp4
   4512  84dd		       ad a2 10 	      lda	playfield+2
   4513  84e0		       85 9e		      sta	temp3
   4514  84e2		       ad a1 10 	      lda	playfield+1
   4515  84e5		       85 9d		      sta	temp2
   4516  84e7		       ad a0 10 	      lda	playfield
   4517  84ea		       85 9c		      sta	temp1
   4518  84ec		       a2 00		      ldx	#0
   4519  84ee				   up2
   4520  84ee		       bd a4 10 	      lda	playfield+4,x
   4521  84f1					      ifconst	superchip
   4522  84f1		       9d 20 10 	      sta	playfield-128,x
   4523  84f4		       bd a5 10 	      lda	playfield+5,x
   4524  84f7		       9d 21 10 	      sta	playfield-127,x
   4525  84fa		       bd a6 10 	      lda	playfield+6,x
   4526  84fd		       9d 22 10 	      sta	playfield-126,x
   4527  8500		       bd a7 10 	      lda	playfield+7,x
   4528  8503		       9d 23 10 	      sta	playfield-125,x
   4529  8506				  -	      else
   4530  8506				  -	      sta	playfield,x
   4531  8506				  -	      lda	playfield+5,x
   4532  8506				  -	      sta	playfield+1,x
   4533  8506				  -	      lda	playfield+6,x
   4534  8506				  -	      sta	playfield+2,x
   4535  8506				  -	      lda	playfield+7,x
   4536  8506				  -	      sta	playfield+3,x
   4537  8506					      endif
   4538  8506		       8a		      txa
   4539  8507		       cb fc		      sbx	#252
   4540  8509					      ifconst	pfres
   4541  8509		       e0 5c		      cpx	#(pfres-1)*4
   4542  850b				  -	      else
   4543  850b				  -	      cpx	#44
   4544  850b					      endif
   4545  850b		       d0 e1		      bne	up2
   4546  850d
   4547  850d		       a5 9f		      lda	temp4
   4548  850f
   4549  850f					      ifconst	superchip
   4550  850f					      ifconst	pfres
   4551  850f		       8d 7f 10 	      sta	playfield+pfres*4-129
   4552  8512		       a5 9e		      lda	temp3
   4553  8514		       8d 7e 10 	      sta	playfield+pfres*4-130
   4554  8517		       a5 9d		      lda	temp2
   4555  8519		       8d 7d 10 	      sta	playfield+pfres*4-131
   4556  851c		       a5 9c		      lda	temp1
   4557  851e		       8d 7c 10 	      sta	playfield+pfres*4-132
   4558  8521				  -	      else
   4559  8521				  -	      sta	playfield+47-128
   4560  8521				  -	      lda	temp3
   4561  8521				  -	      sta	playfield+46-128
   4562  8521				  -	      lda	temp2
   4563  8521				  -	      sta	playfield+45-128
   4564  8521				  -	      lda	temp1
   4565  8521				  -	      sta	playfield+44-128
   4566  8521					      endif
   4567  8521				  -	      else
   4568  8521				  -	      ifconst	pfres
   4569  8521				  -	      sta	playfield+pfres*4-1
   4570  8521				  -	      lda	temp3
   4571  8521				  -	      sta	playfield+pfres*4-2
   4572  8521				  -	      lda	temp2
   4573  8521				  -	      sta	playfield+pfres*4-3
   4574  8521				  -	      lda	temp1
   4575  8521				  -	      sta	playfield+pfres*4-4
   4576  8521				  -	      else
   4577  8521				  -	      sta	playfield+47
   4578  8521				  -	      lda	temp3
   4579  8521				  -	      sta	playfield+46
   4580  8521				  -	      lda	temp2
   4581  8521				  -	      sta	playfield+45
   4582  8521				  -	      lda	temp1
   4583  8521				  -	      sta	playfield+44
   4584  8521				  -	      endif
   4585  8521					      endif
   4586  8521				   noshiftdown2
      0  8521					      RETURN
      1  8521				  -	      ifnconst	bankswitch
      2  8521				  -	      rts
      3  8521					      else
      4  8521		       4c dd ff 	      jmp	BS_return
      5  8524					      endif
   4588  8524
   4589  8524
   4590  8524				   notup
   4591  8524							;down
   4592  8524		       4a		      lsr
   4593  8525		       b0 02		      bcs	oneincup
   4594  8527		       e6 ef		      inc	playfieldpos
   4595  8529				   oneincup
   4596  8529		       e6 ef		      inc	playfieldpos
   4597  852b		       a5 ef		      lda	playfieldpos
   4598  852d
   4599  852d					      ifconst	pfrowheight
   4600  852d		       c9 05		      cmp	#pfrowheight+1
   4601  852f				  -	      else
   4602  852f				  -	      ifnconst	pfres
   4603  852f				  -	      cmp	#9
   4604  852f				  -	      else
   4605  852f				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   4606  852f				  -	      endif
   4607  852f					      endif
   4608  852f
   4609  852f		       90 4b		      bcc	noshiftdown
   4610  8531		       a9 01		      lda	#1
   4611  8533		       85 ef		      sta	playfieldpos
   4612  8535
   4613  8535					      ifconst	pfres
   4614  8535		       ad ff 10 	      lda	playfield+pfres*4-1
   4615  8538		       85 9f		      sta	temp4
   4616  853a		       ad fe 10 	      lda	playfield+pfres*4-2
   4617  853d		       85 9e		      sta	temp3
   4618  853f		       ad fd 10 	      lda	playfield+pfres*4-3
   4619  8542		       85 9d		      sta	temp2
   4620  8544		       ad fc 10 	      lda	playfield+pfres*4-4
   4621  8547				  -	      else
   4622  8547				  -	      lda	playfield+47
   4623  8547				  -	      sta	temp4
   4624  8547				  -	      lda	playfield+46
   4625  8547				  -	      sta	temp3
   4626  8547				  -	      lda	playfield+45
   4627  8547				  -	      sta	temp2
   4628  8547				  -	      lda	playfield+44
   4629  8547					      endif
   4630  8547
   4631  8547		       85 9c		      sta	temp1
   4632  8549
   4633  8549					      ifconst	pfres
   4634  8549		       a2 5c		      ldx	#(pfres-1)*4
   4635  854b				  -	      else
   4636  854b				  -	      ldx	#44
   4637  854b					      endif
   4638  854b				   down2
   4639  854b		       bd 9f 10 	      lda	playfield-1,x
   4640  854e					      ifconst	superchip
   4641  854e		       9d 23 10 	      sta	playfield-125,x
   4642  8551		       bd 9e 10 	      lda	playfield-2,x
   4643  8554		       9d 22 10 	      sta	playfield-126,x
   4644  8557		       bd 9d 10 	      lda	playfield-3,x
   4645  855a		       9d 21 10 	      sta	playfield-127,x
   4646  855d		       bd 9c 10 	      lda	playfield-4,x
   4647  8560		       9d 20 10 	      sta	playfield-128,x
   4648  8563				  -	      else
   4649  8563				  -	      sta	playfield+3,x
   4650  8563				  -	      lda	playfield-2,x
   4651  8563				  -	      sta	playfield+2,x
   4652  8563				  -	      lda	playfield-3,x
   4653  8563				  -	      sta	playfield+1,x
   4654  8563				  -	      lda	playfield-4,x
   4655  8563				  -	      sta	playfield,x
   4656  8563					      endif
   4657  8563		       8a		      txa
   4658  8564		       cb 04		      sbx	#4
   4659  8566		       d0 e3		      bne	down2
   4660  8568
   4661  8568		       a5 9f		      lda	temp4
   4662  856a					      ifconst	superchip
   4663  856a		       8d 23 10 	      sta	playfield-125
   4664  856d		       a5 9e		      lda	temp3
   4665  856f		       8d 22 10 	      sta	playfield-126
   4666  8572		       a5 9d		      lda	temp2
   4667  8574		       8d 21 10 	      sta	playfield-127
   4668  8577		       a5 9c		      lda	temp1
   4669  8579		       8d 20 10 	      sta	playfield-128
   4670  857c				  -	      else
   4671  857c				  -	      sta	playfield+3
   4672  857c				  -	      lda	temp3
   4673  857c				  -	      sta	playfield+2
   4674  857c				  -	      lda	temp2
   4675  857c				  -	      sta	playfield+1
   4676  857c				  -	      lda	temp1
   4677  857c				  -	      sta	playfield
   4678  857c					      endif
   4679  857c				   noshiftdown
      0  857c					      RETURN
      1  857c				  -	      ifnconst	bankswitch
      2  857c				  -	      rts
      3  857c					      else
      4  857c		       4c dd ff 	      jmp	BS_return
      5  857f					      endif
   4681  857f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4682  857f
   4683  857f							;standard routines needed for pretty much all games
   4684  857f							; just the random number generator is left - maybe we should remove this asm file altogether?
   4685  857f							; repositioning code and score pointer setup moved to overscan
   4686  857f							; read switches, joysticks now compiler generated (more efficient)
   4687  857f
   4688  857f				   randomize
   4689  857f		       a5 a2		      lda	rand
   4690  8581		       4a		      lsr
   4691  8582				  -	      ifconst	rand16
   4692  8582				  -	      rol	rand16
   4693  8582					      endif
   4694  8582		       90 02		      bcc	noeor
   4695  8584		       49 b4		      eor	#$B4
   4696  8586				   noeor
   4697  8586		       85 a2		      sta	rand
   4698  8588				  -	      ifconst	rand16
   4699  8588				  -	      eor	rand16
   4700  8588					      endif
      0  8588					      RETURN
      1  8588				  -	      ifnconst	bankswitch
      2  8588				  -	      rts
      3  8588					      else
      4  8588		       4c dd ff 	      jmp	BS_return
      5  858b					      endif
   4702  858b							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4703  858b
   4704  858b				   drawscreen
   4705  858b				  -	      ifconst	debugscore
   4706  858b				  -	      ldx	#14
   4707  858b				  -	      lda	INTIM	; display # cycles left in the score
   4708  858b				  -
   4709  858b				  -	      ifconst	mincycles
   4710  858b				  -	      lda	mincycles
   4711  858b				  -	      cmp	INTIM
   4712  858b				  -	      lda	mincycles
   4713  858b				  -	      bcc	nochange
   4714  858b				  -	      lda	INTIM
   4715  858b				  -	      sta	mincycles
   4716  858b				  -nochange
   4717  858b				  -	      endif
   4718  858b				  -
   4719  858b				  -			; cmp #$2B
   4720  858b				  -			; bcs no_cycles_left
   4721  858b				  -	      bmi	cycles_left
   4722  858b				  -	      ldx	#64
   4723  858b				  -	      eor	#$ff	;make negative
   4724  858b				  -cycles_left
   4725  858b				  -	      stx	scorecolor
   4726  858b				  -	      and	#$7f	; clear sign bit
   4727  858b				  -	      tax
   4728  858b				  -	      lda	scorebcd,x
   4729  858b				  -	      sta	score+2
   4730  858b				  -	      lda	scorebcd1,x
   4731  858b				  -	      sta	score+1
   4732  858b				  -	      jmp	done_debugscore
   4733  858b				  -scorebcd
   4734  858b				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4735  858b				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4736  858b				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4737  858b				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4738  858b				  -scorebcd1
   4739  858b				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4740  858b				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4741  858b				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4742  858b				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4743  858b				  -done_debugscore
   4744  858b					      endif
   4745  858b
   4746  858b				  -	      ifconst	debugcycles
   4747  858b				  -	      lda	INTIM	; if we go over, it mucks up the background color
   4748  858b				  -			; cmp #$2B
   4749  858b				  -			; BCC overscan
   4750  858b				  -	      bmi	overscan
   4751  858b				  -	      sta	COLUBK
   4752  858b				  -	      bcs	doneoverscan
   4753  858b					      endif
   4754  858b
   4755  858b				   overscan
   4756  858b				  -	      ifconst	interlaced
   4757  858b				  -	      PHP
   4758  858b				  -	      PLA
   4759  858b				  -	      EOR	#4	; flip interrupt bit
   4760  858b				  -	      PHA
   4761  858b				  -	      PLP
   4762  858b				  -	      AND	#4	; isolate the interrupt bit
   4763  858b				  -	      TAX		; save it for later
   4764  858b					      endif
   4765  858b
   4766  858b				   overscanloop
   4767  858b		       ad 84 02 	      lda	INTIM	;wait for sync
   4768  858e		       30 fb		      bmi	overscanloop
   4769  8590				   doneoverscan
   4770  8590
   4771  8590							;do VSYNC
   4772  8590
   4773  8590				  -	      ifconst	interlaced
   4774  8590				  -	      CPX	#4
   4775  8590				  -	      BNE	oddframevsync
   4776  8590					      endif
   4777  8590
   4778  8590		       a9 02		      lda	#2
   4779  8592		       85 02		      sta	WSYNC
   4780  8594		       85 00		      sta	VSYNC
   4781  8596		       85 02		      STA	WSYNC
   4782  8598		       85 02		      STA	WSYNC
   4783  859a		       4a		      lsr
   4784  859b		       85 02		      STA	WSYNC
   4785  859d		       85 00		      STA	VSYNC
   4786  859f		       85 01		      sta	VBLANK
   4787  85a1				  -	      ifnconst	overscan_time
   4788  85a1				  -	      lda	#37+128
   4789  85a1					      else
   4790  85a1		       a9 a5		      lda	#overscan_time+128
   4791  85a3					      endif
   4792  85a3		       8d 96 02 	      sta	TIM64T
   4793  85a6
   4794  85a6				  -	      ifconst	interlaced
   4795  85a6				  -	      jmp	postsync
   4796  85a6				  -
   4797  85a6				  -oddframevsync
   4798  85a6				  -	      sta	WSYNC
   4799  85a6				  -
   4800  85a6				  -	      LDA	($80,X)	; 11 waste
   4801  85a6				  -	      LDA	($80,X)	; 11 waste
   4802  85a6				  -	      LDA	($80,X)	; 11 waste
   4803  85a6				  -
   4804  85a6				  -	      lda	#2
   4805  85a6				  -	      sta	VSYNC
   4806  85a6				  -	      sta	WSYNC
   4807  85a6				  -	      sta	WSYNC
   4808  85a6				  -	      sta	WSYNC
   4809  85a6				  -
   4810  85a6				  -	      LDA	($80,X)	; 11 waste
   4811  85a6				  -	      LDA	($80,X)	; 11 waste
   4812  85a6				  -	      LDA	($80,X)	; 11 waste
   4813  85a6				  -
   4814  85a6				  -	      lda	#0
   4815  85a6				  -	      sta	VSYNC
   4816  85a6				  -	      sta	VBLANK
   4817  85a6				  -	      ifnconst	overscan_time
   4818  85a6				  -	      lda	#37+128
   4819  85a6				  -	      else
   4820  85a6				  -	      lda	#overscan_time+128
   4821  85a6				  -	      endif
   4822  85a6				  -	      sta	TIM64T
   4823  85a6				  -
   4824  85a6				  -postsync
   4825  85a6					      endif
   4826  85a6
   4827  85a6				  -	      ifconst	legacy
   4828  85a6				  -	      if	legacy < 100
   4829  85a6				  -	      ldx	#4
   4830  85a6				  -adjustloop
   4831  85a6				  -	      lda	player0x,x
   4832  85a6				  -	      sec
   4833  85a6				  -	      sbc	#14	;?
   4834  85a6				  -	      sta	player0x,x
   4835  85a6				  -	      dex
   4836  85a6				  -	      bpl	adjustloop
   4837  85a6				  -	      endif
   4838  85a6					      endif
   4839  85a6				  -	      if	((<*)>$e9)&&((<*)<$fa)
   4840  85a6				  -	      repeat	($fa-(<*))
   4841  85a6				  -	      nop
   4842  85a6				  -	      repend
   4843  85a6					      endif
   4844  85a6		       85 02		      sta	WSYNC
   4845  85a8		       a2 04		      ldx	#4
      0  85aa					      SLEEP	3
      1  85aa				   .CYCLES    SET	3
      2  85aa
      3  85aa				  -	      IF	.CYCLES < 2
      4  85aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  85aa				  -	      ERR
      6  85aa					      ENDIF
      7  85aa
      8  85aa					      IF	.CYCLES & 1
      9  85aa					      IFNCONST	NO_ILLEGAL_OPCODES
     10  85aa		       04 00		      nop	0
     11  85ac				  -	      ELSE
     12  85ac				  -	      bit	VSYNC
     13  85ac					      ENDIF
     14  85ac				   .CYCLES    SET	.CYCLES - 3
     15  85ac					      ENDIF
     16  85ac
     17  85ac				  -	      REPEAT	.CYCLES / 2
     18  85ac				  -	      nop
     19  85ac					      REPEND
   4847  85ac				   HorPosLoop		; 5
   4848  85ac		       b5 80		      lda	player0x,X	;+4 9
   4849  85ae		       38		      sec		;+2 11
   4850  85af				   DivideLoop
   4851  85af		       e9 0f		      sbc	#15
   4852  85b1		       b0 fc		      bcs	DivideLoop	;+4 15
   4853  85b3		       95 9c		      sta	temp1,X	;+4 19
   4854  85b5		       95 10		      sta	RESP0,X	;+4 23
   4855  85b7		       85 02		      sta	WSYNC
   4856  85b9		       ca		      dex
   4857  85ba		       10 f0		      bpl	HorPosLoop	;+5 5
   4858  85bc							; 4
   4859  85bc
   4860  85bc		       a2 04		      ldx	#4
   4861  85be		       b4 9c		      ldy	temp1,X
   4862  85c0		       b9 1c f5 	      lda	repostable-256,Y
   4863  85c3		       95 20		      sta	HMP0,X	;+14 18
   4864  85c5
   4865  85c5		       ca		      dex
   4866  85c6		       b4 9c		      ldy	temp1,X
   4867  85c8		       b9 1c f5 	      lda	repostable-256,Y
   4868  85cb		       95 20		      sta	HMP0,X	;+14 32
   4869  85cd
   4870  85cd		       ca		      dex
   4871  85ce		       b4 9c		      ldy	temp1,X
   4872  85d0		       b9 1c f5 	      lda	repostable-256,Y
   4873  85d3		       95 20		      sta	HMP0,X	;+14 46
   4874  85d5
   4875  85d5		       ca		      dex
   4876  85d6		       b4 9c		      ldy	temp1,X
   4877  85d8		       b9 1c f5 	      lda	repostable-256,Y
   4878  85db		       95 20		      sta	HMP0,X	;+14 60
   4879  85dd
   4880  85dd		       ca		      dex
   4881  85de		       b4 9c		      ldy	temp1,X
   4882  85e0		       b9 1c f5 	      lda	repostable-256,Y
   4883  85e3		       95 20		      sta	HMP0,X	;+14 74
   4884  85e5
   4885  85e5		       85 02		      sta	WSYNC
   4886  85e7
   4887  85e7		       85 2a		      sta	HMOVE	;+3 3
   4888  85e9
   4889  85e9
   4890  85e9				  -	      ifconst	legacy
   4891  85e9				  -	      if	legacy < 100
   4892  85e9				  -	      ldx	#4
   4893  85e9				  -adjustloop2
   4894  85e9				  -	      lda	player0x,x
   4895  85e9				  -	      clc
   4896  85e9				  -	      adc	#14	;?
   4897  85e9				  -	      sta	player0x,x
   4898  85e9				  -	      dex
   4899  85e9				  -	      bpl	adjustloop2
   4900  85e9				  -	      endif
   4901  85e9					      endif
   4902  85e9
   4903  85e9
   4904  85e9
   4905  85e9
   4906  85e9							;set score pointers
   4907  85e9		       a7 95		      lax	score+2
   4908  85eb		       20 1c f6 	      jsr	scorepointerset
   4909  85ee		       84 9b		      sty	scorepointers+5
   4910  85f0		       86 98		      stx	scorepointers+2
   4911  85f2		       a7 94		      lax	score+1
   4912  85f4		       20 1c f6 	      jsr	scorepointerset
   4913  85f7		       84 9a		      sty	scorepointers+4
   4914  85f9		       86 97		      stx	scorepointers+1
   4915  85fb		       a7 93		      lax	score
   4916  85fd		       20 1c f6 	      jsr	scorepointerset
   4917  8600		       84 99		      sty	scorepointers+3
   4918  8602		       86 96		      stx	scorepointers
   4919  8604
   4920  8604				   vblk
   4921  8604							; run possible vblank bB code
   4922  8604				  -	      ifconst	vblank_bB_code
   4923  8604				  -	      jsr	vblank_bB_code
   4924  8604					      endif
   4925  8604				   vblk2
   4926  8604		       ad 84 02 	      LDA	INTIM
   4927  8607		       30 fb		      bmi	vblk2
   4928  8609		       4c 00 f1 	      jmp	kernel
   4929  860c
   4930  860c
   4931  860c		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   4932  8615		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   4933  861c				   repostable
   4934  861c
   4935  861c				   scorepointerset
   4936  861c		       29 0f		      and	#$0F
   4937  861e		       0a		      asl
   4938  861f		       0a		      asl
   4939  8620		       0a		      asl
   4940  8621		       69 74		      adc	#<scoretable
   4941  8623		       a8		      tay
   4942  8624		       8a		      txa
   4943  8625							; and #$F0
   4944  8625							; lsr
   4945  8625		       4b f0		      asr	#$F0
   4946  8627		       69 74		      adc	#<scoretable
   4947  8629		       aa		      tax
   4948  862a		       60		      rts
   4949  862b							;bB.asm
   4950  862b							; bB.asm file is split here
   4951  862b				  -	      if	(<*) > (<(*+7))
   4952  862b				  -	      repeat	($100-<*)
   4953  862b				  -	      .byte	0
   4954  862b				  -	      repend
   4955  862b					      endif
   4956  862b				   playerL0113_0
   4957  862b		       60		      .byte.b	%01100000
   4958  862c		       f0		      .byte.b	%11110000
   4959  862d		       f0		      .byte.b	%11110000
   4960  862e		       60		      .byte.b	%01100000
   4961  862f		       00		      .byte.b	%00000000
   4962  8630		       00		      .byte.b	%00000000
   4963  8631		       00		      .byte.b	%00000000
   4964  8632		       00		      .byte.b	%00000000
   4965  8633					      if	ECHOFIRST
      2369 bytes of ROM space left in bank 8
   4966  8633					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
   4967  8633					      endif
   4968  8633		       00 01	   ECHOFIRST  =	1
   4969  8633
   4970  8633
   4971  8633							; feel free to modify the score graphics - just keep each digit 8 highj
   4972  8633							; and keep the conditional compilation stuff intact
   4973  8633
   4974  8633		       00 50	   scorelength =	(LENDEC+LENHEX+LENSPACE+LENDOLLAR+LENPOUND+LENMRHAPPY+LENMRSAD+LENCOPYRIGHT+LENFUJI+LENHEART+LENDIAMOND+LENSPADE+LENCLUB+LENCOLON+LENBLOCK+LENUNDERLINE+LENARISIDE+LENARIFACE)
   4975  8633
   4976  8633				  -	      ifconst	ROM2k
   4977  8633				  -	      ORG	$F7FC-scorelength
   4978  8633					      else
   4979  8633					      ifconst	bankswitch
   4980  8633				  -	      if	bankswitch == 8
   4981  8633				  -	      ORG	$2FE4-scorelength-bscode_length
   4982  8633				  -	      RORG	$FFE4-scorelength-bscode_length
   4983  8633					      endif
   4984  8633				  -	      if	bankswitch == 16
   4985  8633				  -	      ORG	$4FE4-scorelength-bscode_length
   4986  8633				  -	      RORG	$FFE4-scorelength-bscode_length
   4987  8633					      endif
   4988  8633					      if	bankswitch == 32
   4989  8f74					      ORG	$8FE4-scorelength-bscode_length
   4990  8f74					      RORG	$FFE4-scorelength-bscode_length
   4991  8f74					      endif
   4992  8f74				  -	      else
   4993  8f74				  -	      ORG	$FFEC-scorelength
   4994  8f74					      endif
   4995  8f74					      endif
   4996  8f74
   4997  8f74		       00 00	   NOFONT     =	0
   4998  8f74		       00 01	   STOCK      =	1	;_FONTNAME
   4999  8f74		       00 02	   NEWCENTURY =	2	;_FONTNAME
   5000  8f74		       00 03	   WHIMSEY    =	3	;_FONTNAME
   5001  8f74		       00 04	   ALARMCLOCK =	4	;_FONTNAME
   5002  8f74		       00 05	   HANDWRITTEN =	5	;_FONTNAME
   5003  8f74		       00 06	   INTERRUPTED =	6	;_FONTNAME
   5004  8f74		       00 07	   TINY       =	7	;_FONTNAME
   5005  8f74		       00 08	   RETROPUTER =	8	;_FONTNAME
   5006  8f74		       00 09	   CURVES     =	9	;_FONTNAME
   5007  8f74		       00 0a	   HUSKY      =	10	;_FONTNAME
   5008  8f74		       00 0b	   SNAKE      =	11	;_FONTNAME
   5009  8f74		       00 0d	   PLOK       =	13	;_FONTNAME
   5010  8f74
   5011  8f74		       00 00	   SYMBOLS    =	0	;_FONTNAME 
   5012  8f74
   5013  8f74							; ### setup some defaults
   5014  8f74				  -	      ifnconst	fontstyle
   5015  8f74				  -fontstyle  =	STOCK
   5016  8f74					      endif
   5017  8f74
   5018  8f74				   scoretable
   5019  8f74
   5020  8f74				  -	      if	fontstyle == STOCK
   5021  8f74				  -
   5022  8f74				  -LENDEC     =	80
   5023  8f74				  -
   5024  8f74				  -			;byte %00000000 ; STOCK
   5025  8f74				  -
   5026  8f74				  -	      .byte	%00111100	; STOCK
   5027  8f74				  -	      .byte	%01100110	; STOCK
   5028  8f74				  -	      .byte	%01100110	; STOCK
   5029  8f74				  -	      .byte	%01100110	; STOCK
   5030  8f74				  -	      .byte	%01100110	; STOCK
   5031  8f74				  -	      .byte	%01100110	; STOCK
   5032  8f74				  -	      .byte	%01100110	; STOCK
   5033  8f74				  -	      .byte	%00111100	; STOCK
   5034  8f74				  -
   5035  8f74				  -			;byte %00000000 ; STOCK
   5036  8f74				  -
   5037  8f74				  -	      .byte	%01111110	; STOCK
   5038  8f74				  -	      .byte	%00011000	; STOCK
   5039  8f74				  -	      .byte	%00011000	; STOCK
   5040  8f74				  -	      .byte	%00011000	; STOCK
   5041  8f74				  -	      .byte	%00011000	; STOCK
   5042  8f74				  -	      .byte	%00111000	; STOCK
   5043  8f74				  -	      .byte	%00011000	; STOCK
   5044  8f74				  -	      .byte	%00001000	; STOCK
   5045  8f74				  -
   5046  8f74				  -			;byte %00000000 ; STOCK
   5047  8f74				  -
   5048  8f74				  -	      .byte	%01111110	; STOCK
   5049  8f74				  -	      .byte	%01100000	; STOCK
   5050  8f74				  -	      .byte	%01100000	; STOCK
   5051  8f74				  -	      .byte	%00111100	; STOCK
   5052  8f74				  -	      .byte	%00000110	; STOCK
   5053  8f74				  -	      .byte	%00000110	; STOCK
   5054  8f74				  -	      .byte	%01000110	; STOCK
   5055  8f74				  -	      .byte	%00111100	; STOCK
   5056  8f74				  -
   5057  8f74				  -			;byte %00000000 ; STOCK
   5058  8f74				  -
   5059  8f74				  -	      .byte	%00111100	; STOCK
   5060  8f74				  -	      .byte	%01000110	; STOCK
   5061  8f74				  -	      .byte	%00000110	; STOCK
   5062  8f74				  -	      .byte	%00000110	; STOCK
   5063  8f74				  -	      .byte	%00011100	; STOCK
   5064  8f74				  -	      .byte	%00000110	; STOCK
   5065  8f74				  -	      .byte	%01000110	; STOCK
   5066  8f74				  -	      .byte	%00111100	; STOCK
   5067  8f74				  -
   5068  8f74				  -			;byte %00000000 ; STOCK
   5069  8f74				  -
   5070  8f74				  -	      .byte	%00001100	; STOCK
   5071  8f74				  -	      .byte	%00001100	; STOCK
   5072  8f74				  -	      .byte	%01111110	; STOCK
   5073  8f74				  -	      .byte	%01001100	; STOCK
   5074  8f74				  -	      .byte	%01001100	; STOCK
   5075  8f74				  -	      .byte	%00101100	; STOCK
   5076  8f74				  -	      .byte	%00011100	; STOCK
   5077  8f74				  -	      .byte	%00001100	; STOCK
   5078  8f74				  -
   5079  8f74				  -			;byte %00000000 ; STOCK
   5080  8f74				  -
   5081  8f74				  -	      .byte	%00111100	; STOCK
   5082  8f74				  -	      .byte	%01000110	; STOCK
   5083  8f74				  -	      .byte	%00000110	; STOCK
   5084  8f74				  -	      .byte	%00000110	; STOCK
   5085  8f74				  -	      .byte	%00111100	; STOCK
   5086  8f74				  -	      .byte	%01100000	; STOCK
   5087  8f74				  -	      .byte	%01100000	; STOCK
   5088  8f74				  -	      .byte	%01111110	; STOCK
   5089  8f74				  -
   5090  8f74				  -			;byte %00000000 ; STOCK
   5091  8f74				  -
   5092  8f74				  -	      .byte	%00111100	; STOCK
   5093  8f74				  -	      .byte	%01100110	; STOCK
   5094  8f74				  -	      .byte	%01100110	; STOCK
   5095  8f74				  -	      .byte	%01100110	; STOCK
   5096  8f74				  -	      .byte	%01111100	; STOCK
   5097  8f74				  -	      .byte	%01100000	; STOCK
   5098  8f74				  -	      .byte	%01100010	; STOCK
   5099  8f74				  -	      .byte	%00111100	; STOCK
   5100  8f74				  -
   5101  8f74				  -			;byte %00000000 ; STOCK
   5102  8f74				  -
   5103  8f74				  -	      .byte	%00110000	; STOCK
   5104  8f74				  -	      .byte	%00110000	; STOCK
   5105  8f74				  -	      .byte	%00110000	; STOCK
   5106  8f74				  -	      .byte	%00011000	; STOCK
   5107  8f74				  -	      .byte	%00001100	; STOCK
   5108  8f74				  -	      .byte	%00000110	; STOCK
   5109  8f74				  -	      .byte	%01000010	; STOCK
   5110  8f74				  -	      .byte	%00111110	; STOCK
   5111  8f74				  -
   5112  8f74				  -			;byte %00000000 ; STOCK
   5113  8f74				  -
   5114  8f74				  -	      .byte	%00111100	; STOCK
   5115  8f74				  -	      .byte	%01100110	; STOCK
   5116  8f74				  -	      .byte	%01100110	; STOCK
   5117  8f74				  -	      .byte	%01100110	; STOCK
   5118  8f74				  -	      .byte	%00111100	; STOCK
   5119  8f74				  -	      .byte	%01100110	; STOCK
   5120  8f74				  -	      .byte	%01100110	; STOCK
   5121  8f74				  -	      .byte	%00111100	; STOCK
   5122  8f74				  -
   5123  8f74				  -			;byte %00000000 ; STOCK
   5124  8f74				  -
   5125  8f74				  -	      .byte	%00111100	; STOCK
   5126  8f74				  -	      .byte	%01000110	; STOCK
   5127  8f74				  -	      .byte	%00000110	; STOCK
   5128  8f74				  -	      .byte	%00111110	; STOCK
   5129  8f74				  -	      .byte	%01100110	; STOCK
   5130  8f74				  -	      .byte	%01100110	; STOCK
   5131  8f74				  -	      .byte	%01100110	; STOCK
   5132  8f74				  -	      .byte	%00111100	; STOCK
   5133  8f74				  -
   5134  8f74				  -			;byte %00000000 ; STOCK
   5135  8f74				  -
   5136  8f74				  -	      ifconst	fontcharsHEX
   5137  8f74				  -LENHEX     =	48
   5138  8f74				  -
   5139  8f74				  -	      .byte	%01100110	; STOCK
   5140  8f74				  -	      .byte	%01100110	; STOCK
   5141  8f74				  -	      .byte	%01100110	; STOCK
   5142  8f74				  -	      .byte	%01111110	; STOCK
   5143  8f74				  -	      .byte	%01100110	; STOCK
   5144  8f74				  -	      .byte	%01100110	; STOCK
   5145  8f74				  -	      .byte	%01100110	; STOCK
   5146  8f74				  -	      .byte	%00111100	; STOCK
   5147  8f74				  -
   5148  8f74				  -			;byte %00000000 ; STOCK
   5149  8f74				  -
   5150  8f74				  -	      .byte	%01111100	; STOCK
   5151  8f74				  -	      .byte	%01100110	; STOCK
   5152  8f74				  -	      .byte	%01100110	; STOCK
   5153  8f74				  -	      .byte	%01100110	; STOCK
   5154  8f74				  -	      .byte	%01111100	; STOCK
   5155  8f74				  -	      .byte	%01100110	; STOCK
   5156  8f74				  -	      .byte	%01100110	; STOCK
   5157  8f74				  -	      .byte	%01111100	; STOCK
   5158  8f74				  -
   5159  8f74				  -			;byte %00000000 ; STOCK
   5160  8f74				  -
   5161  8f74				  -	      .byte	%00111100	; STOCK
   5162  8f74				  -	      .byte	%01100110	; STOCK
   5163  8f74				  -	      .byte	%01100000	; STOCK
   5164  8f74				  -	      .byte	%01100000	; STOCK
   5165  8f74				  -	      .byte	%01100000	; STOCK
   5166  8f74				  -	      .byte	%01100000	; STOCK
   5167  8f74				  -	      .byte	%01100110	; STOCK
   5168  8f74				  -	      .byte	%00111100	; STOCK
   5169  8f74				  -
   5170  8f74				  -			;byte %00000000 ; STOCK
   5171  8f74				  -
   5172  8f74				  -	      .byte	%01111100	; STOCK
   5173  8f74				  -	      .byte	%01100110	; STOCK
   5174  8f74				  -	      .byte	%01100110	; STOCK
   5175  8f74				  -	      .byte	%01100110	; STOCK
   5176  8f74				  -	      .byte	%01100110	; STOCK
   5177  8f74				  -	      .byte	%01100110	; STOCK
   5178  8f74				  -	      .byte	%01100110	; STOCK
   5179  8f74				  -	      .byte	%01111100	; STOCK
   5180  8f74				  -
   5181  8f74				  -			;byte %00000000 ; STOCK
   5182  8f74				  -
   5183  8f74				  -	      .byte	%01111110	; STOCK
   5184  8f74				  -	      .byte	%01100000	; STOCK
   5185  8f74				  -	      .byte	%01100000	; STOCK
   5186  8f74				  -	      .byte	%01100000	; STOCK
   5187  8f74				  -	      .byte	%01111100	; STOCK
   5188  8f74				  -	      .byte	%01100000	; STOCK
   5189  8f74				  -	      .byte	%01100000	; STOCK
   5190  8f74				  -	      .byte	%01111110	; STOCK
   5191  8f74				  -
   5192  8f74				  -			;byte %00000000 ; STOCK
   5193  8f74				  -
   5194  8f74				  -	      .byte	%01100000	; STOCK
   5195  8f74				  -	      .byte	%01100000	; STOCK
   5196  8f74				  -	      .byte	%01100000	; STOCK
   5197  8f74				  -	      .byte	%01100000	; STOCK
   5198  8f74				  -	      .byte	%01111100	; STOCK
   5199  8f74				  -	      .byte	%01100000	; STOCK
   5200  8f74				  -	      .byte	%01100000	; STOCK
   5201  8f74				  -	      .byte	%01111110	; STOCK
   5202  8f74				  -
   5203  8f74				  -			;byte %00000000 ; STOCK
   5204  8f74				  -			;byte %00000000 ; STOCK
   5205  8f74				  -			;byte %00000000 ; STOCK
   5206  8f74				  -			;byte %00000000 ; STOCK
   5207  8f74				  -
   5208  8f74				  -	      else
   5209  8f74				  -LENHEX     =	0
   5210  8f74				  -	      endif		; fontcharsHEX 
   5211  8f74					      endif		; STOCK
   5212  8f74
   5213  8f74				  -	      if	fontstyle == NEWCENTURY
   5214  8f74				  -LENDEC     =	80
   5215  8f74				  -			;byte %00000000 ; NEWCENTURY
   5216  8f74				  -
   5217  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5218  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5219  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5220  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5221  8f74				  -	      .byte	%00100100	; NEWCENTURY
   5222  8f74				  -	      .byte	%00100100	; NEWCENTURY
   5223  8f74				  -	      .byte	%00100100	; NEWCENTURY
   5224  8f74				  -	      .byte	%00011000	; NEWCENTURY
   5225  8f74				  -
   5226  8f74				  -			;byte %00000000 ; NEWCENTURY
   5227  8f74				  -
   5228  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5229  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5230  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5231  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5232  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5233  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5234  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5235  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5236  8f74				  -
   5237  8f74				  -			;byte %00000000 ; NEWCENTURY
   5238  8f74				  -
   5239  8f74				  -	      .byte	%01111110	; NEWCENTURY
   5240  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5241  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5242  8f74				  -	      .byte	%00100000	; NEWCENTURY
   5243  8f74				  -	      .byte	%00011100	; NEWCENTURY
   5244  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5245  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5246  8f74				  -	      .byte	%00011100	; NEWCENTURY
   5247  8f74				  -
   5248  8f74				  -			;byte %00000000 ; NEWCENTURY
   5249  8f74				  -
   5250  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5251  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5252  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5253  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5254  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5255  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5256  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5257  8f74				  -	      .byte	%00011100	; NEWCENTURY
   5258  8f74				  -
   5259  8f74				  -			;byte %00000000 ; NEWCENTURY
   5260  8f74				  -
   5261  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5262  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5263  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5264  8f74				  -	      .byte	%00111110	; NEWCENTURY
   5265  8f74				  -	      .byte	%00100010	; NEWCENTURY
   5266  8f74				  -	      .byte	%00100010	; NEWCENTURY
   5267  8f74				  -	      .byte	%00010010	; NEWCENTURY
   5268  8f74				  -	      .byte	%00010010	; NEWCENTURY
   5269  8f74				  -
   5270  8f74				  -			;byte %00000000 ; NEWCENTURY
   5271  8f74				  -
   5272  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5273  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5274  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5275  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5276  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5277  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5278  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5279  8f74				  -	      .byte	%01111000	; NEWCENTURY
   5280  8f74				  -
   5281  8f74				  -			;byte %00000000 ; NEWCENTURY
   5282  8f74				  -
   5283  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5284  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5285  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5286  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5287  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5288  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5289  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5290  8f74				  -	      .byte	%00110000	; NEWCENTURY
   5291  8f74				  -
   5292  8f74				  -			;byte %00000000 ; NEWCENTURY
   5293  8f74				  -
   5294  8f74				  -	      .byte	%00010000	; NEWCENTURY
   5295  8f74				  -	      .byte	%00010000	; NEWCENTURY
   5296  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5297  8f74				  -	      .byte	%00001000	; NEWCENTURY
   5298  8f74				  -	      .byte	%00000100	; NEWCENTURY
   5299  8f74				  -	      .byte	%00000100	; NEWCENTURY
   5300  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5301  8f74				  -	      .byte	%00011110	; NEWCENTURY
   5302  8f74				  -
   5303  8f74				  -			;byte %00000000 ; NEWCENTURY
   5304  8f74				  -
   5305  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5306  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5307  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5308  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5309  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5310  8f74				  -	      .byte	%00100100	; NEWCENTURY
   5311  8f74				  -	      .byte	%00100100	; NEWCENTURY
   5312  8f74				  -	      .byte	%00011000	; NEWCENTURY
   5313  8f74				  -
   5314  8f74				  -			;byte %00000000 ; NEWCENTURY
   5315  8f74				  -
   5316  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5317  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5318  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5319  8f74				  -	      .byte	%00000010	; NEWCENTURY
   5320  8f74				  -	      .byte	%00001110	; NEWCENTURY
   5321  8f74				  -	      .byte	%00010010	; NEWCENTURY
   5322  8f74				  -	      .byte	%00010010	; NEWCENTURY
   5323  8f74				  -	      .byte	%00001100	; NEWCENTURY
   5324  8f74				  -
   5325  8f74				  -	      ifconst	fontcharsHEX
   5326  8f74				  -LENHEX     =	48
   5327  8f74				  -
   5328  8f74				  -			;byte %00000000 ; NEWCENTURY
   5329  8f74				  -
   5330  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5331  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5332  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5333  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5334  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5335  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5336  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5337  8f74				  -	      .byte	%00111000	; NEWCENTURY
   5338  8f74				  -
   5339  8f74				  -			;byte %00000000 ; NEWCENTURY
   5340  8f74				  -
   5341  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5342  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5343  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5344  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5345  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5346  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5347  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5348  8f74				  -	      .byte	%01111000	; NEWCENTURY
   5349  8f74				  -
   5350  8f74				  -			;byte %00000000 ; NEWCENTURY
   5351  8f74				  -
   5352  8f74				  -	      .byte	%00111100	; NEWCENTURY
   5353  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5354  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5355  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5356  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5357  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5358  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5359  8f74				  -	      .byte	%00111000	; NEWCENTURY
   5360  8f74				  -
   5361  8f74				  -			;byte %00000000 ; NEWCENTURY
   5362  8f74				  -
   5363  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5364  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5365  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5366  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5367  8f74				  -	      .byte	%01000010	; NEWCENTURY
   5368  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5369  8f74				  -	      .byte	%01000100	; NEWCENTURY
   5370  8f74				  -	      .byte	%01111000	; NEWCENTURY
   5371  8f74				  -
   5372  8f74				  -			;byte %00000000 ; NEWCENTURY
   5373  8f74				  -
   5374  8f74				  -	      .byte	%01111110	; NEWCENTURY
   5375  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5376  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5377  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5378  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5379  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5380  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5381  8f74				  -	      .byte	%01111000	; NEWCENTURY
   5382  8f74				  -
   5383  8f74				  -			;byte %00000000 ; NEWCENTURY
   5384  8f74				  -
   5385  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5386  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5387  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5388  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5389  8f74				  -	      .byte	%01111100	; NEWCENTURY
   5390  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5391  8f74				  -	      .byte	%01000000	; NEWCENTURY
   5392  8f74				  -	      .byte	%01111000	; NEWCENTURY
   5393  8f74				  -
   5394  8f74				  -			;byte %00000000 ; NEWCENTURY
   5395  8f74				  -			;byte %00000000 ; NEWCENTURY
   5396  8f74				  -			;byte %00000000 ; NEWCENTURY
   5397  8f74				  -			;byte %00000000 ; NEWCENTURY
   5398  8f74				  -
   5399  8f74				  -	      else
   5400  8f74				  -LENHEX     =	0
   5401  8f74				  -	      endif		; fontcharsHEX 
   5402  8f74					      endif		; NEWCENTURY
   5403  8f74
   5404  8f74				  -	      if	fontstyle == WHIMSEY
   5405  8f74				  -LENDEC     =	80
   5406  8f74				  -			;byte %00000000 ; WHIMSEY
   5407  8f74				  -
   5408  8f74				  -	      .byte	%00111100	; WHIMSEY
   5409  8f74				  -	      .byte	%01111110	; WHIMSEY
   5410  8f74				  -	      .byte	%01111110	; WHIMSEY
   5411  8f74				  -	      .byte	%01111110	; WHIMSEY
   5412  8f74				  -	      .byte	%01110110	; WHIMSEY
   5413  8f74				  -	      .byte	%01110110	; WHIMSEY
   5414  8f74				  -	      .byte	%01110110	; WHIMSEY
   5415  8f74				  -	      .byte	%00111100	; WHIMSEY
   5416  8f74				  -
   5417  8f74				  -			;byte %00000000 ; WHIMSEY
   5418  8f74				  -
   5419  8f74				  -	      .byte	%01111110	; WHIMSEY
   5420  8f74				  -	      .byte	%01111110	; WHIMSEY
   5421  8f74				  -	      .byte	%01111110	; WHIMSEY
   5422  8f74				  -	      .byte	%00011000	; WHIMSEY
   5423  8f74				  -	      .byte	%00011000	; WHIMSEY
   5424  8f74				  -	      .byte	%00011000	; WHIMSEY
   5425  8f74				  -	      .byte	%01111000	; WHIMSEY
   5426  8f74				  -	      .byte	%00011000	; WHIMSEY
   5427  8f74				  -
   5428  8f74				  -			;byte %00000000 ; WHIMSEY
   5429  8f74				  -
   5430  8f74				  -	      .byte	%01111110	; WHIMSEY
   5431  8f74				  -	      .byte	%01111110	; WHIMSEY
   5432  8f74				  -	      .byte	%01111110	; WHIMSEY
   5433  8f74				  -	      .byte	%01111000	; WHIMSEY
   5434  8f74				  -	      .byte	%00111100	; WHIMSEY
   5435  8f74				  -	      .byte	%00001110	; WHIMSEY
   5436  8f74				  -	      .byte	%01100110	; WHIMSEY
   5437  8f74				  -	      .byte	%00111100	; WHIMSEY
   5438  8f74				  -
   5439  8f74				  -			;byte %00000000 ; WHIMSEY
   5440  8f74				  -
   5441  8f74				  -	      .byte	%00111100	; WHIMSEY
   5442  8f74				  -	      .byte	%01111110	; WHIMSEY
   5443  8f74				  -	      .byte	%01111110	; WHIMSEY
   5444  8f74				  -	      .byte	%01101110	; WHIMSEY
   5445  8f74				  -	      .byte	%00001110	; WHIMSEY
   5446  8f74				  -	      .byte	%00111100	; WHIMSEY
   5447  8f74				  -	      .byte	%00011100	; WHIMSEY
   5448  8f74				  -	      .byte	%01111110	; WHIMSEY
   5449  8f74				  -
   5450  8f74				  -			;byte %00000000 ; WHIMSEY
   5451  8f74				  -
   5452  8f74				  -	      .byte	%00011100	; WHIMSEY
   5453  8f74				  -	      .byte	%00011100	; WHIMSEY
   5454  8f74				  -	      .byte	%01111110	; WHIMSEY
   5455  8f74				  -	      .byte	%01011100	; WHIMSEY
   5456  8f74				  -	      .byte	%01011100	; WHIMSEY
   5457  8f74				  -	      .byte	%00011100	; WHIMSEY
   5458  8f74				  -	      .byte	%00011100	; WHIMSEY
   5459  8f74				  -	      .byte	%00011100	; WHIMSEY
   5460  8f74				  -
   5461  8f74				  -			;byte %00000000 ; WHIMSEY
   5462  8f74				  -
   5463  8f74				  -	      .byte	%00111100	; WHIMSEY
   5464  8f74				  -	      .byte	%01111110	; WHIMSEY
   5465  8f74				  -	      .byte	%01111110	; WHIMSEY
   5466  8f74				  -	      .byte	%01101110	; WHIMSEY
   5467  8f74				  -	      .byte	%00001110	; WHIMSEY
   5468  8f74				  -	      .byte	%01111100	; WHIMSEY
   5469  8f74				  -	      .byte	%01110000	; WHIMSEY
   5470  8f74				  -	      .byte	%01111110	; WHIMSEY
   5471  8f74				  -
   5472  8f74				  -			;byte %00000000 ; WHIMSEY
   5473  8f74				  -
   5474  8f74				  -	      .byte	%00111100	; WHIMSEY
   5475  8f74				  -	      .byte	%01111110	; WHIMSEY
   5476  8f74				  -	      .byte	%01111110	; WHIMSEY
   5477  8f74				  -	      .byte	%01110110	; WHIMSEY
   5478  8f74				  -	      .byte	%01110110	; WHIMSEY
   5479  8f74				  -	      .byte	%01111100	; WHIMSEY
   5480  8f74				  -	      .byte	%01110000	; WHIMSEY
   5481  8f74				  -	      .byte	%00111110	; WHIMSEY
   5482  8f74				  -
   5483  8f74				  -			;byte %00000000 ; WHIMSEY
   5484  8f74				  -
   5485  8f74				  -	      .byte	%01111000	; WHIMSEY
   5486  8f74				  -	      .byte	%01111000	; WHIMSEY
   5487  8f74				  -	      .byte	%01111000	; WHIMSEY
   5488  8f74				  -	      .byte	%00111100	; WHIMSEY
   5489  8f74				  -	      .byte	%00011100	; WHIMSEY
   5490  8f74				  -	      .byte	%00001110	; WHIMSEY
   5491  8f74				  -	      .byte	%00001110	; WHIMSEY
   5492  8f74				  -	      .byte	%01111110	; WHIMSEY
   5493  8f74				  -
   5494  8f74				  -			;byte %00000000 ; WHIMSEY
   5495  8f74				  -
   5496  8f74				  -	      .byte	%00111100	; WHIMSEY
   5497  8f74				  -	      .byte	%01111110	; WHIMSEY
   5498  8f74				  -	      .byte	%01111110	; WHIMSEY
   5499  8f74				  -	      .byte	%01110110	; WHIMSEY
   5500  8f74				  -	      .byte	%01110110	; WHIMSEY
   5501  8f74				  -	      .byte	%00111100	; WHIMSEY
   5502  8f74				  -	      .byte	%01110110	; WHIMSEY
   5503  8f74				  -	      .byte	%00111100	; WHIMSEY
   5504  8f74				  -
   5505  8f74				  -			;byte %00000000 ; WHIMSEY
   5506  8f74				  -
   5507  8f74				  -	      .byte	%00111100	; WHIMSEY
   5508  8f74				  -	      .byte	%01111110	; WHIMSEY
   5509  8f74				  -	      .byte	%01111110	; WHIMSEY
   5510  8f74				  -	      .byte	%01110110	; WHIMSEY
   5511  8f74				  -	      .byte	%00000110	; WHIMSEY
   5512  8f74				  -	      .byte	%00111110	; WHIMSEY
   5513  8f74				  -	      .byte	%01110110	; WHIMSEY
   5514  8f74				  -	      .byte	%00111100	; WHIMSEY
   5515  8f74				  -
   5516  8f74				  -	      ifconst	fontcharsHEX
   5517  8f74				  -LENHEX     =	48
   5518  8f74				  -
   5519  8f74				  -			;byte %00000000 ; WHIMSEY
   5520  8f74				  -
   5521  8f74				  -	      .byte	%01110110	; WHIMSEY
   5522  8f74				  -	      .byte	%01110110	; WHIMSEY
   5523  8f74				  -	      .byte	%01111110	; WHIMSEY
   5524  8f74				  -	      .byte	%01111110	; WHIMSEY
   5525  8f74				  -	      .byte	%01111110	; WHIMSEY
   5526  8f74				  -	      .byte	%01110110	; WHIMSEY
   5527  8f74				  -	      .byte	%01110110	; WHIMSEY
   5528  8f74				  -	      .byte	%00111100	; WHIMSEY
   5529  8f74				  -
   5530  8f74				  -			;byte %00000000 ; WHIMSEY
   5531  8f74				  -
   5532  8f74				  -	      .byte	%01111100	; WHIMSEY
   5533  8f74				  -	      .byte	%01111110	; WHIMSEY
   5534  8f74				  -	      .byte	%01111110	; WHIMSEY
   5535  8f74				  -	      .byte	%01110110	; WHIMSEY
   5536  8f74				  -	      .byte	%01110110	; WHIMSEY
   5537  8f74				  -	      .byte	%01111100	; WHIMSEY
   5538  8f74				  -	      .byte	%01110110	; WHIMSEY
   5539  8f74				  -	      .byte	%01111100	; WHIMSEY
   5540  8f74				  -
   5541  8f74				  -			;byte %00000000 ; WHIMSEY
   5542  8f74				  -
   5543  8f74				  -	      .byte	%00111100	; WHIMSEY
   5544  8f74				  -	      .byte	%01111110	; WHIMSEY
   5545  8f74				  -	      .byte	%01111110	; WHIMSEY
   5546  8f74				  -	      .byte	%01110110	; WHIMSEY
   5547  8f74				  -	      .byte	%01110000	; WHIMSEY
   5548  8f74				  -	      .byte	%01110000	; WHIMSEY
   5549  8f74				  -	      .byte	%01110110	; WHIMSEY
   5550  8f74				  -	      .byte	%00111100	; WHIMSEY
   5551  8f74				  -
   5552  8f74				  -			;byte %00000000 ; WHIMSEY
   5553  8f74				  -
   5554  8f74				  -	      .byte	%01111100	; WHIMSEY
   5555  8f74				  -	      .byte	%01111110	; WHIMSEY
   5556  8f74				  -	      .byte	%01111110	; WHIMSEY
   5557  8f74				  -	      .byte	%01111110	; WHIMSEY
   5558  8f74				  -	      .byte	%01110110	; WHIMSEY
   5559  8f74				  -	      .byte	%01110110	; WHIMSEY
   5560  8f74				  -	      .byte	%01110110	; WHIMSEY
   5561  8f74				  -	      .byte	%01111100	; WHIMSEY
   5562  8f74				  -
   5563  8f74				  -			;byte %00000000 ; WHIMSEY
   5564  8f74				  -
   5565  8f74				  -	      .byte	%01111110	; WHIMSEY
   5566  8f74				  -	      .byte	%01111110	; WHIMSEY
   5567  8f74				  -	      .byte	%01111110	; WHIMSEY
   5568  8f74				  -	      .byte	%01110000	; WHIMSEY
   5569  8f74				  -	      .byte	%01110000	; WHIMSEY
   5570  8f74				  -	      .byte	%01111100	; WHIMSEY
   5571  8f74				  -	      .byte	%01110000	; WHIMSEY
   5572  8f74				  -	      .byte	%01111100	; WHIMSEY
   5573  8f74				  -
   5574  8f74				  -			;byte %00000000 ; WHIMSEY
   5575  8f74				  -
   5576  8f74				  -	      .byte	%01110000	; WHIMSEY
   5577  8f74				  -	      .byte	%01110000	; WHIMSEY
   5578  8f74				  -	      .byte	%01110000	; WHIMSEY
   5579  8f74				  -	      .byte	%01110000	; WHIMSEY
   5580  8f74				  -	      .byte	%01110000	; WHIMSEY
   5581  8f74				  -	      .byte	%01111100	; WHIMSEY
   5582  8f74				  -	      .byte	%01110000	; WHIMSEY
   5583  8f74				  -	      .byte	%01111100	; WHIMSEY
   5584  8f74				  -
   5585  8f74				  -			;byte %00000000 ; WHIMSEY
   5586  8f74				  -			;byte %00000000 ; WHIMSEY
   5587  8f74				  -			;byte %00000000 ; WHIMSEY
   5588  8f74				  -			;byte %00000000 ; WHIMSEY
   5589  8f74				  -
   5590  8f74				  -	      else
   5591  8f74				  -LENHEX     =	0
   5592  8f74				  -	      endif		; fontcharsHEX
   5593  8f74				  -
   5594  8f74					      endif		; WHIMSEY
   5595  8f74
   5596  8f74					      if	fontstyle == ALARMCLOCK
   5597  8f74		       00 50	   LENDEC     =	80
   5598  8f74
   5599  8f74							;byte %00000000 ; ALARMCLOCK
   5600  8f74
   5601  8f74		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5602  8f75		       42		      .byte.b	%01000010	; ALARMCLOCK
   5603  8f76		       42		      .byte.b	%01000010	; ALARMCLOCK
   5604  8f77		       42		      .byte.b	%01000010	; ALARMCLOCK
   5605  8f78		       00		      .byte.b	%00000000	; ALARMCLOCK
   5606  8f79		       42		      .byte.b	%01000010	; ALARMCLOCK
   5607  8f7a		       42		      .byte.b	%01000010	; ALARMCLOCK
   5608  8f7b		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5609  8f7c
   5610  8f7c							;byte %00000000 ; ALARMCLOCK
   5611  8f7c
   5612  8f7c		       00		      .byte.b	%00000000	; ALARMCLOCK
   5613  8f7d		       02		      .byte.b	%00000010	; ALARMCLOCK
   5614  8f7e		       02		      .byte.b	%00000010	; ALARMCLOCK
   5615  8f7f		       02		      .byte.b	%00000010	; ALARMCLOCK
   5616  8f80		       00		      .byte.b	%00000000	; ALARMCLOCK
   5617  8f81		       02		      .byte.b	%00000010	; ALARMCLOCK
   5618  8f82		       02		      .byte.b	%00000010	; ALARMCLOCK
   5619  8f83		       00		      .byte.b	%00000000	; ALARMCLOCK
   5620  8f84
   5621  8f84							;byte %00000000 ; ALARMCLOCK
   5622  8f84
   5623  8f84		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5624  8f85		       40		      .byte.b	%01000000	; ALARMCLOCK
   5625  8f86		       40		      .byte.b	%01000000	; ALARMCLOCK
   5626  8f87		       40		      .byte.b	%01000000	; ALARMCLOCK
   5627  8f88		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5628  8f89		       02		      .byte.b	%00000010	; ALARMCLOCK
   5629  8f8a		       02		      .byte.b	%00000010	; ALARMCLOCK
   5630  8f8b		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5631  8f8c
   5632  8f8c							;byte %00000000 ; ALARMCLOCK
   5633  8f8c
   5634  8f8c		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5635  8f8d		       02		      .byte.b	%00000010	; ALARMCLOCK
   5636  8f8e		       02		      .byte.b	%00000010	; ALARMCLOCK
   5637  8f8f		       02		      .byte.b	%00000010	; ALARMCLOCK
   5638  8f90		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5639  8f91		       02		      .byte.b	%00000010	; ALARMCLOCK
   5640  8f92		       02		      .byte.b	%00000010	; ALARMCLOCK
   5641  8f93		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5642  8f94
   5643  8f94							;byte %00000000 ; ALARMCLOCK
   5644  8f94
   5645  8f94		       00		      .byte.b	%00000000	; ALARMCLOCK
   5646  8f95		       02		      .byte.b	%00000010	; ALARMCLOCK
   5647  8f96		       02		      .byte.b	%00000010	; ALARMCLOCK
   5648  8f97		       02		      .byte.b	%00000010	; ALARMCLOCK
   5649  8f98		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5650  8f99		       42		      .byte.b	%01000010	; ALARMCLOCK
   5651  8f9a		       42		      .byte.b	%01000010	; ALARMCLOCK
   5652  8f9b		       00		      .byte.b	%00000000	; ALARMCLOCK
   5653  8f9c
   5654  8f9c							;byte %00000000 ; ALARMCLOCK
   5655  8f9c
   5656  8f9c		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5657  8f9d		       02		      .byte.b	%00000010	; ALARMCLOCK
   5658  8f9e		       02		      .byte.b	%00000010	; ALARMCLOCK
   5659  8f9f		       02		      .byte.b	%00000010	; ALARMCLOCK
   5660  8fa0		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5661  8fa1		       40		      .byte.b	%01000000	; ALARMCLOCK
   5662  8fa2		       40		      .byte.b	%01000000	; ALARMCLOCK
   5663  8fa3		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5664  8fa4
   5665  8fa4							;byte %00000000 ; ALARMCLOCK
   5666  8fa4
   5667  8fa4		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5668  8fa5		       42		      .byte.b	%01000010	; ALARMCLOCK
   5669  8fa6		       42		      .byte.b	%01000010	; ALARMCLOCK
   5670  8fa7		       42		      .byte.b	%01000010	; ALARMCLOCK
   5671  8fa8		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5672  8fa9		       40		      .byte.b	%01000000	; ALARMCLOCK
   5673  8faa		       40		      .byte.b	%01000000	; ALARMCLOCK
   5674  8fab		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5675  8fac
   5676  8fac							;byte %00000000 ; ALARMCLOCK
   5677  8fac
   5678  8fac		       00		      .byte.b	%00000000	; ALARMCLOCK
   5679  8fad		       02		      .byte.b	%00000010	; ALARMCLOCK
   5680  8fae		       02		      .byte.b	%00000010	; ALARMCLOCK
   5681  8faf		       02		      .byte.b	%00000010	; ALARMCLOCK
   5682  8fb0		       00		      .byte.b	%00000000	; ALARMCLOCK
   5683  8fb1		       02		      .byte.b	%00000010	; ALARMCLOCK
   5684  8fb2		       02		      .byte.b	%00000010	; ALARMCLOCK
   5685  8fb3		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5686  8fb4
   5687  8fb4							;byte %00000000 ; ALARMCLOCK
   5688  8fb4
   5689  8fb4		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5690  8fb5		       42		      .byte.b	%01000010	; ALARMCLOCK
   5691  8fb6		       42		      .byte.b	%01000010	; ALARMCLOCK
   5692  8fb7		       42		      .byte.b	%01000010	; ALARMCLOCK
   5693  8fb8		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5694  8fb9		       42		      .byte.b	%01000010	; ALARMCLOCK
   5695  8fba		       42		      .byte.b	%01000010	; ALARMCLOCK
   5696  8fbb		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5697  8fbc
   5698  8fbc							;byte %00000000 ; ALARMCLOCK
   5699  8fbc
   5700  8fbc		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5701  8fbd		       02		      .byte.b	%00000010	; ALARMCLOCK
   5702  8fbe		       02		      .byte.b	%00000010	; ALARMCLOCK
   5703  8fbf		       02		      .byte.b	%00000010	; ALARMCLOCK
   5704  8fc0		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5705  8fc1		       42		      .byte.b	%01000010	; ALARMCLOCK
   5706  8fc2		       42		      .byte.b	%01000010	; ALARMCLOCK
   5707  8fc3		       3c		      .byte.b	%00111100	; ALARMCLOCK
   5708  8fc4
   5709  8fc4
   5710  8fc4				  -	      ifconst	fontcharsHEX
   5711  8fc4				  -LENHEX     =	48
   5712  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5713  8fc4				  -
   5714  8fc4				  -
   5715  8fc4				  -	      .byte	%00000000	; ALARMCLOCK
   5716  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5717  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5718  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5719  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5720  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5721  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5722  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5723  8fc4				  -
   5724  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5725  8fc4				  -
   5726  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5727  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5728  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5729  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5730  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5731  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5732  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5733  8fc4				  -	      .byte	%00000000	; ALARMCLOCK
   5734  8fc4				  -
   5735  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5736  8fc4				  -
   5737  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5738  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5739  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5740  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5741  8fc4				  -	      .byte	%00000000	; ALARMCLOCK
   5742  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5743  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5744  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5745  8fc4				  -
   5746  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5747  8fc4				  -
   5748  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5749  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5750  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5751  8fc4				  -	      .byte	%01000010	; ALARMCLOCK
   5752  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5753  8fc4				  -	      .byte	%00000010	; ALARMCLOCK
   5754  8fc4				  -	      .byte	%00000010	; ALARMCLOCK
   5755  8fc4				  -	      .byte	%00000000	; ALARMCLOCK
   5756  8fc4				  -
   5757  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5758  8fc4				  -
   5759  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5760  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5761  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5762  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5763  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5764  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5765  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5766  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5767  8fc4				  -
   5768  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5769  8fc4				  -
   5770  8fc4				  -	      .byte	%00000000	; ALARMCLOCK
   5771  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5772  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5773  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5774  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5775  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5776  8fc4				  -	      .byte	%01000000	; ALARMCLOCK
   5777  8fc4				  -	      .byte	%00111100	; ALARMCLOCK
   5778  8fc4				  -
   5779  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5780  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5781  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5782  8fc4				  -			;byte %00000000 ; ALARMCLOCK
   5783  8fc4				  -
   5784  8fc4					      else
   5785  8fc4		       00 00	   LENHEX     =	0
   5786  8fc4					      endif		; fontcharsHEX
   5787  8fc4					      endif		; ALARMCLOCK
   5788  8fc4
   5789  8fc4				  -	      if	fontstyle == HANDWRITTEN
   5790  8fc4				  -LENDEC     =	80
   5791  8fc4				  -
   5792  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5793  8fc4				  -
   5794  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5795  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5796  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5797  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5798  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5799  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5800  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5801  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5802  8fc4				  -
   5803  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5804  8fc4				  -
   5805  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5806  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5807  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5808  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5809  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5810  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5811  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5812  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5813  8fc4				  -
   5814  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5815  8fc4				  -
   5816  8fc4				  -	      .byte	%01110000	; HANDWRITTEN
   5817  8fc4				  -	      .byte	%01001100	; HANDWRITTEN
   5818  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5819  8fc4				  -	      .byte	%00100000	; HANDWRITTEN
   5820  8fc4				  -	      .byte	%00011000	; HANDWRITTEN
   5821  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5822  8fc4				  -	      .byte	%00100010	; HANDWRITTEN
   5823  8fc4				  -	      .byte	%00011100	; HANDWRITTEN
   5824  8fc4				  -
   5825  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5826  8fc4				  -
   5827  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5828  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5829  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5830  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5831  8fc4				  -	      .byte	%00011000	; HANDWRITTEN
   5832  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5833  8fc4				  -	      .byte	%00100010	; HANDWRITTEN
   5834  8fc4				  -	      .byte	%00011100	; HANDWRITTEN
   5835  8fc4				  -
   5836  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5837  8fc4				  -
   5838  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5839  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5840  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5841  8fc4				  -	      .byte	%01111000	; HANDWRITTEN
   5842  8fc4				  -	      .byte	%01000100	; HANDWRITTEN
   5843  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5844  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5845  8fc4				  -	      .byte	%00000010	; HANDWRITTEN
   5846  8fc4				  -
   5847  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5848  8fc4				  -
   5849  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5850  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5851  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5852  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5853  8fc4				  -	      .byte	%00011000	; HANDWRITTEN
   5854  8fc4				  -	      .byte	%00100000	; HANDWRITTEN
   5855  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5856  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5857  8fc4				  -
   5858  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5859  8fc4				  -
   5860  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5861  8fc4				  -	      .byte	%00101000	; HANDWRITTEN
   5862  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5863  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5864  8fc4				  -	      .byte	%00011000	; HANDWRITTEN
   5865  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5866  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5867  8fc4				  -	      .byte	%00000110	; HANDWRITTEN
   5868  8fc4				  -
   5869  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5870  8fc4				  -
   5871  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5872  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5873  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5874  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5875  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5876  8fc4				  -	      .byte	%00000100	; HANDWRITTEN
   5877  8fc4				  -	      .byte	%00110010	; HANDWRITTEN
   5878  8fc4				  -	      .byte	%00001110	; HANDWRITTEN
   5879  8fc4				  -
   5880  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5881  8fc4				  -
   5882  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5883  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5884  8fc4				  -	      .byte	%01000100	; HANDWRITTEN
   5885  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5886  8fc4				  -	      .byte	%00011100	; HANDWRITTEN
   5887  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5888  8fc4				  -	      .byte	%00001010	; HANDWRITTEN
   5889  8fc4				  -	      .byte	%00000110	; HANDWRITTEN
   5890  8fc4				  -
   5891  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5892  8fc4				  -
   5893  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5894  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5895  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5896  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5897  8fc4				  -	      .byte	%00011100	; HANDWRITTEN
   5898  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5899  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5900  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5901  8fc4				  -
   5902  8fc4				  -	      ifconst	fontcharsHEX
   5903  8fc4				  -LENHEX     =	48
   5904  8fc4				  -
   5905  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5906  8fc4				  -
   5907  8fc4				  -	      .byte	%00110110	; HANDWRITTEN
   5908  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5909  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5910  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5911  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5912  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5913  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5914  8fc4				  -	      .byte	%00001110	; HANDWRITTEN
   5915  8fc4				  -
   5916  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5917  8fc4				  -
   5918  8fc4				  -	      .byte	%11110000	; HANDWRITTEN
   5919  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5920  8fc4				  -	      .byte	%01000100	; HANDWRITTEN
   5921  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5922  8fc4				  -	      .byte	%00111100	; HANDWRITTEN
   5923  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5924  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5925  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5926  8fc4				  -
   5927  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5928  8fc4				  -
   5929  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5930  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5931  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5932  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5933  8fc4				  -	      .byte	%00100000	; HANDWRITTEN
   5934  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5935  8fc4				  -	      .byte	%00010100	; HANDWRITTEN
   5936  8fc4				  -	      .byte	%00001000	; HANDWRITTEN
   5937  8fc4				  -
   5938  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5939  8fc4				  -
   5940  8fc4				  -	      .byte	%01111000	; HANDWRITTEN
   5941  8fc4				  -	      .byte	%01000100	; HANDWRITTEN
   5942  8fc4				  -	      .byte	%01000100	; HANDWRITTEN
   5943  8fc4				  -	      .byte	%00100100	; HANDWRITTEN
   5944  8fc4				  -	      .byte	%00100010	; HANDWRITTEN
   5945  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5946  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5947  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5948  8fc4				  -
   5949  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5950  8fc4				  -
   5951  8fc4				  -	      .byte	%00110000	; HANDWRITTEN
   5952  8fc4				  -	      .byte	%01001000	; HANDWRITTEN
   5953  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5954  8fc4				  -	      .byte	%00100000	; HANDWRITTEN
   5955  8fc4				  -	      .byte	%00011000	; HANDWRITTEN
   5956  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5957  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5958  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5959  8fc4				  -
   5960  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5961  8fc4				  -
   5962  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5963  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5964  8fc4				  -	      .byte	%01000000	; HANDWRITTEN
   5965  8fc4				  -	      .byte	%00100000	; HANDWRITTEN
   5966  8fc4				  -	      .byte	%00111000	; HANDWRITTEN
   5967  8fc4				  -	      .byte	%00010000	; HANDWRITTEN
   5968  8fc4				  -	      .byte	%00010010	; HANDWRITTEN
   5969  8fc4				  -	      .byte	%00001100	; HANDWRITTEN
   5970  8fc4				  -
   5971  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5972  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5973  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5974  8fc4				  -			;byte %00000000 ; HANDWRITTEN
   5975  8fc4				  -
   5976  8fc4				  -	      else
   5977  8fc4				  -LENHEX     =	0
   5978  8fc4				  -	      endif		; fontcharsHEX
   5979  8fc4					      endif		; HANDWRITTEN
   5980  8fc4
   5981  8fc4				  -	      if	fontstyle == INTERRUPTED
   5982  8fc4				  -LENDEC     =	80
   5983  8fc4				  -
   5984  8fc4				  -			;byte %00000000 ; INTERRUPTED
   5985  8fc4				  -
   5986  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   5987  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5988  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5989  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5990  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5991  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5992  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   5993  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   5994  8fc4				  -
   5995  8fc4				  -			;byte %00000000 ; INTERRUPTED
   5996  8fc4				  -
   5997  8fc4				  -	      .byte	%00111100	; INTERRUPTED
   5998  8fc4				  -	      .byte	%00000000	; INTERRUPTED
   5999  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6000  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6001  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6002  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6003  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6004  8fc4				  -	      .byte	%00111000	; INTERRUPTED
   6005  8fc4				  -
   6006  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6007  8fc4				  -
   6008  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6009  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6010  8fc4				  -	      .byte	%00110000	; INTERRUPTED
   6011  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6012  8fc4				  -	      .byte	%00001100	; INTERRUPTED
   6013  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6014  8fc4				  -	      .byte	%01000110	; INTERRUPTED
   6015  8fc4				  -	      .byte	%00111100	; INTERRUPTED
   6016  8fc4				  -
   6017  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6018  8fc4				  -
   6019  8fc4				  -	      .byte	%01111100	; INTERRUPTED
   6020  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6021  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6022  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6023  8fc4				  -	      .byte	%01110110	; INTERRUPTED
   6024  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6025  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6026  8fc4				  -	      .byte	%01110100	; INTERRUPTED
   6027  8fc4				  -
   6028  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6029  8fc4				  -
   6030  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6031  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6032  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6033  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6034  8fc4				  -	      .byte	%01110110	; INTERRUPTED
   6035  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6036  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6037  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6038  8fc4				  -
   6039  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6040  8fc4				  -
   6041  8fc4				  -	      .byte	%01111100	; INTERRUPTED
   6042  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6043  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6044  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6045  8fc4				  -	      .byte	%01111100	; INTERRUPTED
   6046  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6047  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6048  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6049  8fc4				  -
   6050  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6051  8fc4				  -
   6052  8fc4				  -	      .byte	%00101100	; INTERRUPTED
   6053  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6054  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6055  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6056  8fc4				  -	      .byte	%01101100	; INTERRUPTED
   6057  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6058  8fc4				  -	      .byte	%00110000	; INTERRUPTED
   6059  8fc4				  -	      .byte	%00011100	; INTERRUPTED
   6060  8fc4				  -
   6061  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6062  8fc4				  -
   6063  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6064  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6065  8fc4				  -	      .byte	%00011000	; INTERRUPTED
   6066  8fc4				  -	      .byte	%00011100	; INTERRUPTED
   6067  8fc4				  -	      .byte	%00001110	; INTERRUPTED
   6068  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6069  8fc4				  -	      .byte	%00000000	; INTERRUPTED
   6070  8fc4				  -	      .byte	%01111110	; INTERRUPTED
   6071  8fc4				  -
   6072  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6073  8fc4				  -
   6074  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   6075  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6076  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6077  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6078  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   6079  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6080  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6081  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   6082  8fc4				  -
   6083  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6084  8fc4				  -
   6085  8fc4				  -	      .byte	%00111000	; INTERRUPTED
   6086  8fc4				  -	      .byte	%00001100	; INTERRUPTED
   6087  8fc4				  -	      .byte	%00000110	; INTERRUPTED
   6088  8fc4				  -	      .byte	%00110110	; INTERRUPTED
   6089  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6090  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6091  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6092  8fc4				  -	      .byte	%00110100	; INTERRUPTED
   6093  8fc4				  -
   6094  8fc4				  -	      ifconst	fontcharsHEX
   6095  8fc4				  -LENHEX     =	48
   6096  8fc4				  -
   6097  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6098  8fc4				  -
   6099  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6100  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6101  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6102  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6103  8fc4				  -	      .byte	%01110110	; INTERRUPTED
   6104  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6105  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6106  8fc4				  -	      .byte	%00111100	; INTERRUPTED
   6107  8fc4				  -
   6108  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6109  8fc4				  -
   6110  8fc4				  -	      .byte	%01110100	; INTERRUPTED
   6111  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6112  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6113  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6114  8fc4				  -	      .byte	%01110100	; INTERRUPTED
   6115  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6116  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6117  8fc4				  -	      .byte	%01110100	; INTERRUPTED
   6118  8fc4				  -
   6119  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6120  8fc4				  -
   6121  8fc4				  -	      .byte	%00101100	; INTERRUPTED
   6122  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6123  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6124  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6125  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6126  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6127  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6128  8fc4				  -	      .byte	%00101100	; INTERRUPTED
   6129  8fc4				  -
   6130  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6131  8fc4				  -
   6132  8fc4				  -	      .byte	%01111100	; INTERRUPTED
   6133  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6134  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6135  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6136  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6137  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6138  8fc4				  -	      .byte	%01100110	; INTERRUPTED
   6139  8fc4				  -	      .byte	%01101100	; INTERRUPTED
   6140  8fc4				  -
   6141  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6142  8fc4				  -
   6143  8fc4				  -	      .byte	%01111110	; INTERRUPTED
   6144  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6145  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6146  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6147  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6148  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6149  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6150  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6151  8fc4				  -
   6152  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6153  8fc4				  -
   6154  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6155  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6156  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6157  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6158  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6159  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6160  8fc4				  -	      .byte	%01100000	; INTERRUPTED
   6161  8fc4				  -	      .byte	%01101110	; INTERRUPTED
   6162  8fc4				  -
   6163  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6164  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6165  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6166  8fc4				  -			;byte %00000000 ; INTERRUPTED
   6167  8fc4				  -
   6168  8fc4				  -	      else
   6169  8fc4				  -LENHEX     =	0
   6170  8fc4				  -	      endif		; fontcharsHEX
   6171  8fc4					      endif		; INTERRUPTED
   6172  8fc4
   6173  8fc4
   6174  8fc4				  -	      if	fontstyle == TINY
   6175  8fc4				  -LENDEC     =	80
   6176  8fc4				  -
   6177  8fc4				  -			;byte %00000000 ; TINY
   6178  8fc4				  -
   6179  8fc4				  -	      .byte	%00000000	; TINY
   6180  8fc4				  -	      .byte	%00111000	; TINY
   6181  8fc4				  -	      .byte	%00101000	; TINY
   6182  8fc4				  -	      .byte	%00101000	; TINY
   6183  8fc4				  -	      .byte	%00101000	; TINY
   6184  8fc4				  -	      .byte	%00111000	; TINY
   6185  8fc4				  -	      .byte	%00000000	; TINY
   6186  8fc4				  -	      .byte	%00000000	; TINY
   6187  8fc4				  -
   6188  8fc4				  -			;byte %00000000 ; TINY
   6189  8fc4				  -
   6190  8fc4				  -	      .byte	%00000000	; TINY
   6191  8fc4				  -	      .byte	%00010000	; TINY
   6192  8fc4				  -	      .byte	%00010000	; TINY
   6193  8fc4				  -	      .byte	%00010000	; TINY
   6194  8fc4				  -	      .byte	%00010000	; TINY
   6195  8fc4				  -	      .byte	%00010000	; TINY
   6196  8fc4				  -	      .byte	%00000000	; TINY
   6197  8fc4				  -	      .byte	%00000000	; TINY
   6198  8fc4				  -
   6199  8fc4				  -			;byte %00000000 ; TINY
   6200  8fc4				  -
   6201  8fc4				  -	      .byte	%00000000	; TINY
   6202  8fc4				  -	      .byte	%00111000	; TINY
   6203  8fc4				  -	      .byte	%00100000	; TINY
   6204  8fc4				  -	      .byte	%00111000	; TINY
   6205  8fc4				  -	      .byte	%00001000	; TINY
   6206  8fc4				  -	      .byte	%00111000	; TINY
   6207  8fc4				  -	      .byte	%00000000	; TINY
   6208  8fc4				  -	      .byte	%00000000	; TINY
   6209  8fc4				  -
   6210  8fc4				  -			;byte %00000000 ; TINY
   6211  8fc4				  -
   6212  8fc4				  -	      .byte	%00000000	; TINY
   6213  8fc4				  -	      .byte	%00111000	; TINY
   6214  8fc4				  -	      .byte	%00001000	; TINY
   6215  8fc4				  -	      .byte	%00111000	; TINY
   6216  8fc4				  -	      .byte	%00001000	; TINY
   6217  8fc4				  -	      .byte	%00111000	; TINY
   6218  8fc4				  -	      .byte	%00000000	; TINY
   6219  8fc4				  -	      .byte	%00000000	; TINY
   6220  8fc4				  -
   6221  8fc4				  -			;byte %00000000 ; TINY
   6222  8fc4				  -
   6223  8fc4				  -	      .byte	%00000000	; TINY
   6224  8fc4				  -	      .byte	%00001000	; TINY
   6225  8fc4				  -	      .byte	%00001000	; TINY
   6226  8fc4				  -	      .byte	%00111000	; TINY
   6227  8fc4				  -	      .byte	%00101000	; TINY
   6228  8fc4				  -	      .byte	%00101000	; TINY
   6229  8fc4				  -	      .byte	%00000000	; TINY
   6230  8fc4				  -	      .byte	%00000000	; TINY
   6231  8fc4				  -
   6232  8fc4				  -			;byte %00000000 ; TINY
   6233  8fc4				  -
   6234  8fc4				  -	      .byte	%00000000	; TINY
   6235  8fc4				  -	      .byte	%00111000	; TINY
   6236  8fc4				  -	      .byte	%00001000	; TINY
   6237  8fc4				  -	      .byte	%00111000	; TINY
   6238  8fc4				  -	      .byte	%00100000	; TINY
   6239  8fc4				  -	      .byte	%00111000	; TINY
   6240  8fc4				  -	      .byte	%00000000	; TINY
   6241  8fc4				  -	      .byte	%00000000	; TINY
   6242  8fc4				  -
   6243  8fc4				  -			;byte %00000000 ; TINY
   6244  8fc4				  -
   6245  8fc4				  -	      .byte	%00000000	; TINY
   6246  8fc4				  -	      .byte	%00111000	; TINY
   6247  8fc4				  -	      .byte	%00101000	; TINY
   6248  8fc4				  -	      .byte	%00111000	; TINY
   6249  8fc4				  -	      .byte	%00100000	; TINY
   6250  8fc4				  -	      .byte	%00111000	; TINY
   6251  8fc4				  -	      .byte	%00000000	; TINY
   6252  8fc4				  -	      .byte	%00000000	; TINY
   6253  8fc4				  -
   6254  8fc4				  -			;byte %00000000 ; TINY
   6255  8fc4				  -
   6256  8fc4				  -	      .byte	%00000000	; TINY
   6257  8fc4				  -	      .byte	%00001000	; TINY
   6258  8fc4				  -	      .byte	%00001000	; TINY
   6259  8fc4				  -	      .byte	%00001000	; TINY
   6260  8fc4				  -	      .byte	%00001000	; TINY
   6261  8fc4				  -	      .byte	%00111000	; TINY
   6262  8fc4				  -	      .byte	%00000000	; TINY
   6263  8fc4				  -	      .byte	%00000000	; TINY
   6264  8fc4				  -
   6265  8fc4				  -			;byte %00000000 ; TINY
   6266  8fc4				  -
   6267  8fc4				  -	      .byte	%00000000	; TINY
   6268  8fc4				  -	      .byte	%00111000	; TINY
   6269  8fc4				  -	      .byte	%00101000	; TINY
   6270  8fc4				  -	      .byte	%00111000	; TINY
   6271  8fc4				  -	      .byte	%00101000	; TINY
   6272  8fc4				  -	      .byte	%00111000	; TINY
   6273  8fc4				  -	      .byte	%00000000	; TINY
   6274  8fc4				  -	      .byte	%00000000	; TINY
   6275  8fc4				  -
   6276  8fc4				  -			;byte %00000000 ; TINY
   6277  8fc4				  -
   6278  8fc4				  -	      .byte	%00000000	; TINY
   6279  8fc4				  -	      .byte	%00001000	; TINY
   6280  8fc4				  -	      .byte	%00001000	; TINY
   6281  8fc4				  -	      .byte	%00111000	; TINY
   6282  8fc4				  -	      .byte	%00101000	; TINY
   6283  8fc4				  -	      .byte	%00111000	; TINY
   6284  8fc4				  -	      .byte	%00000000	; TINY
   6285  8fc4				  -	      .byte	%00000000	; TINY
   6286  8fc4				  -
   6287  8fc4				  -	      ifconst	fontcharsHEX
   6288  8fc4				  -LENHEX     =	48
   6289  8fc4				  -
   6290  8fc4				  -			;byte %00000000 ; TINY
   6291  8fc4				  -
   6292  8fc4				  -	      .byte	%00000000	; TINY
   6293  8fc4				  -	      .byte	%00101000	; TINY
   6294  8fc4				  -	      .byte	%00101000	; TINY
   6295  8fc4				  -	      .byte	%00111000	; TINY
   6296  8fc4				  -	      .byte	%00101000	; TINY
   6297  8fc4				  -	      .byte	%00111000	; TINY
   6298  8fc4				  -	      .byte	%00000000	; TINY
   6299  8fc4				  -	      .byte	%00000000	; TINY
   6300  8fc4				  -
   6301  8fc4				  -			;byte %00000000 ; TINY
   6302  8fc4				  -
   6303  8fc4				  -	      .byte	%00000000	; TINY
   6304  8fc4				  -	      .byte	%00110000	; TINY
   6305  8fc4				  -	      .byte	%00101000	; TINY
   6306  8fc4				  -	      .byte	%00110000	; TINY
   6307  8fc4				  -	      .byte	%00101000	; TINY
   6308  8fc4				  -	      .byte	%00110000	; TINY
   6309  8fc4				  -	      .byte	%00000000	; TINY
   6310  8fc4				  -	      .byte	%00000000	; TINY
   6311  8fc4				  -
   6312  8fc4				  -			;byte %00000000 ; TINY
   6313  8fc4				  -
   6314  8fc4				  -	      .byte	%00000000	; TINY
   6315  8fc4				  -	      .byte	%00111000	; TINY
   6316  8fc4				  -	      .byte	%00100000	; TINY
   6317  8fc4				  -	      .byte	%00100000	; TINY
   6318  8fc4				  -	      .byte	%00100000	; TINY
   6319  8fc4				  -	      .byte	%00111000	; TINY
   6320  8fc4				  -	      .byte	%00000000	; TINY
   6321  8fc4				  -	      .byte	%00000000	; TINY
   6322  8fc4				  -
   6323  8fc4				  -			;byte %00000000 ; TINY
   6324  8fc4				  -
   6325  8fc4				  -	      .byte	%00000000	; TINY
   6326  8fc4				  -	      .byte	%00110000	; TINY
   6327  8fc4				  -	      .byte	%00101000	; TINY
   6328  8fc4				  -	      .byte	%00101000	; TINY
   6329  8fc4				  -	      .byte	%00101000	; TINY
   6330  8fc4				  -	      .byte	%00110000	; TINY
   6331  8fc4				  -	      .byte	%00000000	; TINY
   6332  8fc4				  -	      .byte	%00000000	; TINY
   6333  8fc4				  -
   6334  8fc4				  -			;byte %00000000 ; TINY
   6335  8fc4				  -
   6336  8fc4				  -	      .byte	%00000000	; TINY
   6337  8fc4				  -	      .byte	%00111000	; TINY
   6338  8fc4				  -	      .byte	%00100000	; TINY
   6339  8fc4				  -	      .byte	%00111000	; TINY
   6340  8fc4				  -	      .byte	%00100000	; TINY
   6341  8fc4				  -	      .byte	%00111000	; TINY
   6342  8fc4				  -	      .byte	%00000000	; TINY
   6343  8fc4				  -	      .byte	%00000000	; TINY
   6344  8fc4				  -
   6345  8fc4				  -			;byte %00000000 ; TINY
   6346  8fc4				  -
   6347  8fc4				  -	      .byte	%00000000	; TINY
   6348  8fc4				  -	      .byte	%00100000	; TINY
   6349  8fc4				  -	      .byte	%00100000	; TINY
   6350  8fc4				  -	      .byte	%00111000	; TINY
   6351  8fc4				  -	      .byte	%00100000	; TINY
   6352  8fc4				  -	      .byte	%00111000	; TINY
   6353  8fc4				  -	      .byte	%00000000	; TINY
   6354  8fc4				  -	      .byte	%00000000	; TINY
   6355  8fc4				  -
   6356  8fc4				  -			;byte %00000000 ; TINY
   6357  8fc4				  -			;byte %00000000 ; TINY
   6358  8fc4				  -			;byte %00000000 ; TINY
   6359  8fc4				  -			;byte %00000000 ; TINY
   6360  8fc4				  -
   6361  8fc4				  -	      else
   6362  8fc4				  -LENHEX     =	0
   6363  8fc4				  -
   6364  8fc4				  -	      endif		; fontcharsHEX
   6365  8fc4					      endif		; TINY
   6366  8fc4
   6367  8fc4				  -	      if	fontstyle == RETROPUTER
   6368  8fc4				  -LENDEC     =	80
   6369  8fc4				  -
   6370  8fc4				  -			;byte %00000000 ; RETROPUTER
   6371  8fc4				  -
   6372  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6373  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6374  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6375  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6376  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6377  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6378  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6379  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6380  8fc4				  -
   6381  8fc4				  -			;byte %00000000 ; RETROPUTER
   6382  8fc4				  -
   6383  8fc4				  -	      .byte	%00111000	; RETROPUTER
   6384  8fc4				  -	      .byte	%00111000	; RETROPUTER
   6385  8fc4				  -	      .byte	%00111000	; RETROPUTER
   6386  8fc4				  -	      .byte	%00111000	; RETROPUTER
   6387  8fc4				  -	      .byte	%00011000	; RETROPUTER
   6388  8fc4				  -	      .byte	%00011000	; RETROPUTER
   6389  8fc4				  -	      .byte	%00011000	; RETROPUTER
   6390  8fc4				  -	      .byte	%00011000	; RETROPUTER
   6391  8fc4				  -
   6392  8fc4				  -			;byte %00000000 ; RETROPUTER
   6393  8fc4				  -
   6394  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6395  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6396  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6397  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6398  8fc4				  -	      .byte	%00111110	; RETROPUTER
   6399  8fc4				  -	      .byte	%00000010	; RETROPUTER
   6400  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6401  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6402  8fc4				  -
   6403  8fc4				  -			;byte %00000000 ; RETROPUTER
   6404  8fc4				  -
   6405  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6406  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6407  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6408  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6409  8fc4				  -	      .byte	%00111110	; RETROPUTER
   6410  8fc4				  -	      .byte	%00000010	; RETROPUTER
   6411  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6412  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6413  8fc4				  -
   6414  8fc4				  -			;byte %00000000 ; RETROPUTER
   6415  8fc4				  -
   6416  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6417  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6418  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6419  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6420  8fc4				  -	      .byte	%01000100	; RETROPUTER
   6421  8fc4				  -	      .byte	%01000100	; RETROPUTER
   6422  8fc4				  -	      .byte	%01000100	; RETROPUTER
   6423  8fc4				  -	      .byte	%00000100	; RETROPUTER
   6424  8fc4				  -
   6425  8fc4				  -			;byte %00000000 ; RETROPUTER
   6426  8fc4				  -
   6427  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6428  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6429  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6430  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6431  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6432  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6433  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6434  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6435  8fc4				  -
   6436  8fc4				  -			;byte %00000000 ; RETROPUTER
   6437  8fc4				  -
   6438  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6439  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6440  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6441  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6442  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6443  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6444  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6445  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6446  8fc4				  -
   6447  8fc4				  -			;byte %00000000 ; RETROPUTER
   6448  8fc4				  -
   6449  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6450  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6451  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6452  8fc4				  -	      .byte	%00001100	; RETROPUTER
   6453  8fc4				  -	      .byte	%00000100	; RETROPUTER
   6454  8fc4				  -	      .byte	%00000010	; RETROPUTER
   6455  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6456  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6457  8fc4				  -
   6458  8fc4				  -			;byte %00000000 ; RETROPUTER
   6459  8fc4				  -
   6460  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6461  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6462  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6463  8fc4				  -	      .byte	%01000110	; RETROPUTER
   6464  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6465  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6466  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6467  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6468  8fc4				  -
   6469  8fc4				  -			;byte %00000000 ; RETROPUTER
   6470  8fc4				  -
   6471  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6472  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6473  8fc4				  -	      .byte	%00000110	; RETROPUTER
   6474  8fc4				  -	      .byte	%00000010	; RETROPUTER
   6475  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6476  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6477  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6478  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6479  8fc4				  -
   6480  8fc4				  -	      ifconst	fontcharsHEX
   6481  8fc4				  -LENHEX     =	48
   6482  8fc4				  -
   6483  8fc4				  -			;byte %00000000  ; RETROPUTER
   6484  8fc4				  -
   6485  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6486  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6487  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6488  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6489  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6490  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6491  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6492  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6493  8fc4				  -
   6494  8fc4				  -			;byte %00000000 ; RETROPUTER
   6495  8fc4				  -
   6496  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6497  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6498  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6499  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6500  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6501  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6502  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6503  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6504  8fc4				  -
   6505  8fc4				  -			;byte %00000000 ; RETROPUTER
   6506  8fc4				  -
   6507  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6508  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6509  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6510  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6511  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6512  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6513  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6514  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6515  8fc4				  -
   6516  8fc4				  -			;byte %00000000 ; RETROPUTER
   6517  8fc4				  -
   6518  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6519  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6520  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6521  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6522  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6523  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6524  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6525  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6526  8fc4				  -
   6527  8fc4				  -			;byte %00000000 ; RETROPUTER
   6528  8fc4				  -
   6529  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6530  8fc4				  -	      .byte	%01100010	; RETROPUTER
   6531  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6532  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6533  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6534  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6535  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6536  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6537  8fc4				  -
   6538  8fc4				  -			;byte %00000000 ; RETROPUTER
   6539  8fc4				  -
   6540  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6541  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6542  8fc4				  -	      .byte	%01100000	; RETROPUTER
   6543  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6544  8fc4				  -	      .byte	%01111100	; RETROPUTER
   6545  8fc4				  -	      .byte	%01000000	; RETROPUTER
   6546  8fc4				  -	      .byte	%01000010	; RETROPUTER
   6547  8fc4				  -	      .byte	%01111110	; RETROPUTER
   6548  8fc4				  -
   6549  8fc4				  -			;byte %00000000 ; RETROPUTER
   6550  8fc4				  -			;byte %00000000 ; RETROPUTER
   6551  8fc4				  -			;byte %00000000 ; RETROPUTER
   6552  8fc4				  -			;byte %00000000 ; RETROPUTER
   6553  8fc4				  -
   6554  8fc4				  -	      else
   6555  8fc4				  -LENHEX     =	0
   6556  8fc4				  -	      endif		; fontcharsHEX
   6557  8fc4					      endif		; RETROPUTER
   6558  8fc4
   6559  8fc4				  -	      if	fontstyle == CURVES
   6560  8fc4				  -
   6561  8fc4				  -LENDEC     =	80
   6562  8fc4				  -
   6563  8fc4				  -			;byte %00000000 ; CURVES
   6564  8fc4				  -
   6565  8fc4				  -	      .byte	%00111100	; CURVES
   6566  8fc4				  -	      .byte	%01111110	; CURVES
   6567  8fc4				  -	      .byte	%01100110	; CURVES
   6568  8fc4				  -	      .byte	%01100110	; CURVES
   6569  8fc4				  -	      .byte	%01100110	; CURVES
   6570  8fc4				  -	      .byte	%01100110	; CURVES
   6571  8fc4				  -	      .byte	%01111110	; CURVES
   6572  8fc4				  -	      .byte	%00111100	; CURVES
   6573  8fc4				  -
   6574  8fc4				  -			;byte %00000000 ; CURVES
   6575  8fc4				  -
   6576  8fc4				  -	      .byte	%00011000	; CURVES
   6577  8fc4				  -	      .byte	%00011000	; CURVES
   6578  8fc4				  -	      .byte	%00011000	; CURVES
   6579  8fc4				  -	      .byte	%00011000	; CURVES
   6580  8fc4				  -	      .byte	%00011000	; CURVES
   6581  8fc4				  -	      .byte	%00011000	; CURVES
   6582  8fc4				  -	      .byte	%01111000	; CURVES
   6583  8fc4				  -	      .byte	%01110000	; CURVES
   6584  8fc4				  -
   6585  8fc4				  -			;byte %00000000 ; CURVES
   6586  8fc4				  -
   6587  8fc4				  -	      .byte	%01111110	; CURVES
   6588  8fc4				  -	      .byte	%01111110	; CURVES
   6589  8fc4				  -	      .byte	%01100000	; CURVES
   6590  8fc4				  -	      .byte	%01111100	; CURVES
   6591  8fc4				  -	      .byte	%00111110	; CURVES
   6592  8fc4				  -	      .byte	%00000110	; CURVES
   6593  8fc4				  -	      .byte	%01111110	; CURVES
   6594  8fc4				  -	      .byte	%01111100	; CURVES
   6595  8fc4				  -
   6596  8fc4				  -			;byte %00000000 ; CURVES
   6597  8fc4				  -
   6598  8fc4				  -	      .byte	%01111100	; CURVES
   6599  8fc4				  -	      .byte	%01111110	; CURVES
   6600  8fc4				  -	      .byte	%00001110	; CURVES
   6601  8fc4				  -	      .byte	%00111100	; CURVES
   6602  8fc4				  -	      .byte	%00111100	; CURVES
   6603  8fc4				  -	      .byte	%00001110	; CURVES
   6604  8fc4				  -	      .byte	%01111110	; CURVES
   6605  8fc4				  -	      .byte	%01111100	; CURVES
   6606  8fc4				  -
   6607  8fc4				  -			;byte %00000000 ; CURVES
   6608  8fc4				  -
   6609  8fc4				  -	      .byte	%00000110	; CURVES
   6610  8fc4				  -	      .byte	%00000110	; CURVES
   6611  8fc4				  -	      .byte	%00111110	; CURVES
   6612  8fc4				  -	      .byte	%01111110	; CURVES
   6613  8fc4				  -	      .byte	%01100110	; CURVES
   6614  8fc4				  -	      .byte	%01100110	; CURVES
   6615  8fc4				  -	      .byte	%01100110	; CURVES
   6616  8fc4				  -	      .byte	%01100110	; CURVES
   6617  8fc4				  -
   6618  8fc4				  -			;byte %00000000 ; CURVES
   6619  8fc4				  -
   6620  8fc4				  -	      .byte	%01111100	; CURVES
   6621  8fc4				  -	      .byte	%01111110	; CURVES
   6622  8fc4				  -	      .byte	%00000110	; CURVES
   6623  8fc4				  -	      .byte	%01111110	; CURVES
   6624  8fc4				  -	      .byte	%01111100	; CURVES
   6625  8fc4				  -	      .byte	%01100000	; CURVES
   6626  8fc4				  -	      .byte	%01111110	; CURVES
   6627  8fc4				  -	      .byte	%01111110	; CURVES
   6628  8fc4				  -
   6629  8fc4				  -			;byte %00000000 ; CURVES
   6630  8fc4				  -
   6631  8fc4				  -	      .byte	%00111100	; CURVES
   6632  8fc4				  -	      .byte	%01111110	; CURVES
   6633  8fc4				  -	      .byte	%01100110	; CURVES
   6634  8fc4				  -	      .byte	%01111110	; CURVES
   6635  8fc4				  -	      .byte	%01111100	; CURVES
   6636  8fc4				  -	      .byte	%01100000	; CURVES
   6637  8fc4				  -	      .byte	%01111110	; CURVES
   6638  8fc4				  -	      .byte	%00111110	; CURVES
   6639  8fc4				  -
   6640  8fc4				  -			;byte %00000000 ; CURVES
   6641  8fc4				  -
   6642  8fc4				  -	      .byte	%00000110	; CURVES
   6643  8fc4				  -	      .byte	%00000110	; CURVES
   6644  8fc4				  -	      .byte	%00000110	; CURVES
   6645  8fc4				  -	      .byte	%00000110	; CURVES
   6646  8fc4				  -	      .byte	%00000110	; CURVES
   6647  8fc4				  -	      .byte	%01100110	; CURVES
   6648  8fc4				  -	      .byte	%01111110	; CURVES
   6649  8fc4				  -	      .byte	%00111100	; CURVES
   6650  8fc4				  -
   6651  8fc4				  -			;byte %00000000 ; CURVES
   6652  8fc4				  -
   6653  8fc4				  -	      .byte	%00111100	; CURVES
   6654  8fc4				  -	      .byte	%01111110	; CURVES
   6655  8fc4				  -	      .byte	%01100110	; CURVES
   6656  8fc4				  -	      .byte	%01111110	; CURVES
   6657  8fc4				  -	      .byte	%00111100	; CURVES
   6658  8fc4				  -	      .byte	%01100110	; CURVES
   6659  8fc4				  -	      .byte	%01111110	; CURVES
   6660  8fc4				  -	      .byte	%00111100	; CURVES
   6661  8fc4				  -
   6662  8fc4				  -			;byte %00000000 ; CURVES
   6663  8fc4				  -
   6664  8fc4				  -	      .byte	%01111100	; CURVES
   6665  8fc4				  -	      .byte	%01111110	; CURVES
   6666  8fc4				  -	      .byte	%00000110	; CURVES
   6667  8fc4				  -	      .byte	%00111110	; CURVES
   6668  8fc4				  -	      .byte	%01111110	; CURVES
   6669  8fc4				  -	      .byte	%01100110	; CURVES
   6670  8fc4				  -	      .byte	%01111110	; CURVES
   6671  8fc4				  -	      .byte	%00111100	; CURVES
   6672  8fc4				  -
   6673  8fc4				  -	      ifconst	fontcharsHEX
   6674  8fc4				  -LENHEX     =	48
   6675  8fc4				  -
   6676  8fc4				  -			;byte %00000000 ; CURVES
   6677  8fc4				  -
   6678  8fc4				  -	      .byte	%01100110	; CURVES
   6679  8fc4				  -	      .byte	%01100110	; CURVES
   6680  8fc4				  -	      .byte	%01111110	; CURVES
   6681  8fc4				  -	      .byte	%01111110	; CURVES
   6682  8fc4				  -	      .byte	%01100110	; CURVES
   6683  8fc4				  -	      .byte	%01100110	; CURVES
   6684  8fc4				  -	      .byte	%01111110	; CURVES
   6685  8fc4				  -	      .byte	%00111100	; CURVES
   6686  8fc4				  -
   6687  8fc4				  -			;byte %00000000 ; CURVES
   6688  8fc4				  -
   6689  8fc4				  -	      .byte	%01111100	; CURVES
   6690  8fc4				  -	      .byte	%01111110	; CURVES
   6691  8fc4				  -	      .byte	%01100110	; CURVES
   6692  8fc4				  -	      .byte	%01111110	; CURVES
   6693  8fc4				  -	      .byte	%01111100	; CURVES
   6694  8fc4				  -	      .byte	%01100110	; CURVES
   6695  8fc4				  -	      .byte	%01111110	; CURVES
   6696  8fc4				  -	      .byte	%01111100	; CURVES
   6697  8fc4				  -
   6698  8fc4				  -			;byte %00000000 ; CURVES
   6699  8fc4				  -
   6700  8fc4				  -	      .byte	%00111110	; CURVES
   6701  8fc4				  -	      .byte	%01111110	; CURVES
   6702  8fc4				  -	      .byte	%01100000	; CURVES
   6703  8fc4				  -	      .byte	%01100000	; CURVES
   6704  8fc4				  -	      .byte	%01100000	; CURVES
   6705  8fc4				  -	      .byte	%01100000	; CURVES
   6706  8fc4				  -	      .byte	%01111110	; CURVES
   6707  8fc4				  -	      .byte	%00111110	; CURVES
   6708  8fc4				  -
   6709  8fc4				  -			;byte %00000000 ; CURVES
   6710  8fc4				  -
   6711  8fc4				  -	      .byte	%01111100	; CURVES
   6712  8fc4				  -	      .byte	%01111110	; CURVES
   6713  8fc4				  -	      .byte	%01100110	; CURVES
   6714  8fc4				  -	      .byte	%01100110	; CURVES
   6715  8fc4				  -	      .byte	%01100110	; CURVES
   6716  8fc4				  -	      .byte	%01100110	; CURVES
   6717  8fc4				  -	      .byte	%01111110	; CURVES
   6718  8fc4				  -	      .byte	%01111100	; CURVES
   6719  8fc4				  -
   6720  8fc4				  -			;byte %00000000 ; CURVES
   6721  8fc4				  -
   6722  8fc4				  -	      .byte	%00111110	; CURVES
   6723  8fc4				  -	      .byte	%01111110	; CURVES
   6724  8fc4				  -	      .byte	%01100000	; CURVES
   6725  8fc4				  -	      .byte	%01111100	; CURVES
   6726  8fc4				  -	      .byte	%01111100	; CURVES
   6727  8fc4				  -	      .byte	%01100000	; CURVES
   6728  8fc4				  -	      .byte	%01111110	; CURVES
   6729  8fc4				  -	      .byte	%00111110	; CURVES
   6730  8fc4				  -
   6731  8fc4				  -			;byte %00000000 ; CURVES
   6732  8fc4				  -
   6733  8fc4				  -	      .byte	%01100000	; CURVES
   6734  8fc4				  -	      .byte	%01100000	; CURVES
   6735  8fc4				  -	      .byte	%01100000	; CURVES
   6736  8fc4				  -	      .byte	%01111100	; CURVES
   6737  8fc4				  -	      .byte	%01111100	; CURVES
   6738  8fc4				  -	      .byte	%01100000	; CURVES
   6739  8fc4				  -	      .byte	%01111110	; CURVES
   6740  8fc4				  -	      .byte	%00111110	; CURVES
   6741  8fc4				  -
   6742  8fc4				  -			;byte %00000000 ; CURVES
   6743  8fc4				  -			;byte %00000000 ; CURVES
   6744  8fc4				  -			;byte %00000000 ; CURVES
   6745  8fc4				  -			;byte %00000000 ; CURVES
   6746  8fc4				  -
   6747  8fc4				  -	      else
   6748  8fc4				  -LENHEX     =	0
   6749  8fc4				  -	      endif		; fontcharsHEX 
   6750  8fc4					      endif		; CURVES
   6751  8fc4
   6752  8fc4
   6753  8fc4				  -	      if	fontstyle == HUSKY
   6754  8fc4				  -
   6755  8fc4				  -LENDEC     =	80
   6756  8fc4				  -
   6757  8fc4				  -			;byte %00000000 ; HUSKY
   6758  8fc4				  -
   6759  8fc4				  -	      .byte	%01111100	; HUSKY
   6760  8fc4				  -	      .byte	%11111110	; HUSKY
   6761  8fc4				  -	      .byte	%11101110	; HUSKY
   6762  8fc4				  -	      .byte	%11101110	; HUSKY
   6763  8fc4				  -	      .byte	%11101110	; HUSKY
   6764  8fc4				  -	      .byte	%11101110	; HUSKY
   6765  8fc4				  -	      .byte	%11111110	; HUSKY
   6766  8fc4				  -	      .byte	%01111100	; HUSKY
   6767  8fc4				  -
   6768  8fc4				  -			;byte %00000000 ; HUSKY
   6769  8fc4				  -
   6770  8fc4				  -	      .byte	%00111000	; HUSKY
   6771  8fc4				  -	      .byte	%00111000	; HUSKY
   6772  8fc4				  -	      .byte	%00111000	; HUSKY
   6773  8fc4				  -	      .byte	%00111000	; HUSKY
   6774  8fc4				  -	      .byte	%00111000	; HUSKY
   6775  8fc4				  -	      .byte	%00111000	; HUSKY
   6776  8fc4				  -	      .byte	%00111000	; HUSKY
   6777  8fc4				  -	      .byte	%00111000	; HUSKY
   6778  8fc4				  -
   6779  8fc4				  -			;byte %00000000 ; HUSKY
   6780  8fc4				  -
   6781  8fc4				  -	      .byte	%11111110	; HUSKY
   6782  8fc4				  -	      .byte	%11111110	; HUSKY
   6783  8fc4				  -	      .byte	%11100000	; HUSKY
   6784  8fc4				  -	      .byte	%11111100	; HUSKY
   6785  8fc4				  -	      .byte	%01111110	; HUSKY
   6786  8fc4				  -	      .byte	%00001110	; HUSKY
   6787  8fc4				  -	      .byte	%11111110	; HUSKY
   6788  8fc4				  -	      .byte	%11111100	; HUSKY
   6789  8fc4				  -
   6790  8fc4				  -			;byte %00000000 ; HUSKY
   6791  8fc4				  -
   6792  8fc4				  -	      .byte	%11111100	; HUSKY
   6793  8fc4				  -	      .byte	%11111110	; HUSKY
   6794  8fc4				  -	      .byte	%00001110	; HUSKY
   6795  8fc4				  -	      .byte	%11111100	; HUSKY
   6796  8fc4				  -	      .byte	%11111100	; HUSKY
   6797  8fc4				  -	      .byte	%00001110	; HUSKY
   6798  8fc4				  -	      .byte	%11111110	; HUSKY
   6799  8fc4				  -	      .byte	%11111100	; HUSKY
   6800  8fc4				  -
   6801  8fc4				  -			;byte %00000000 ; HUSKY
   6802  8fc4				  -
   6803  8fc4				  -	      .byte	%00011100	; HUSKY
   6804  8fc4				  -	      .byte	%00011100	; HUSKY
   6805  8fc4				  -	      .byte	%11111110	; HUSKY
   6806  8fc4				  -	      .byte	%11111110	; HUSKY
   6807  8fc4				  -	      .byte	%11011100	; HUSKY
   6808  8fc4				  -	      .byte	%11011100	; HUSKY
   6809  8fc4				  -	      .byte	%00011100	; HUSKY
   6810  8fc4				  -	      .byte	%00011100	; HUSKY
   6811  8fc4				  -
   6812  8fc4				  -			;byte %00000000 ; HUSKY
   6813  8fc4				  -
   6814  8fc4				  -	      .byte	%11111100	; HUSKY
   6815  8fc4				  -	      .byte	%11111110	; HUSKY
   6816  8fc4				  -	      .byte	%00001110	; HUSKY
   6817  8fc4				  -	      .byte	%11111110	; HUSKY
   6818  8fc4				  -	      .byte	%11111100	; HUSKY
   6819  8fc4				  -	      .byte	%11100000	; HUSKY
   6820  8fc4				  -	      .byte	%11111110	; HUSKY
   6821  8fc4				  -	      .byte	%11111110	; HUSKY
   6822  8fc4				  -
   6823  8fc4				  -			;byte %00000000 ; HUSKY
   6824  8fc4				  -
   6825  8fc4				  -	      .byte	%01111100	; HUSKY
   6826  8fc4				  -	      .byte	%11111110	; HUSKY
   6827  8fc4				  -	      .byte	%11101110	; HUSKY
   6828  8fc4				  -	      .byte	%11111110	; HUSKY
   6829  8fc4				  -	      .byte	%11111100	; HUSKY
   6830  8fc4				  -	      .byte	%11100000	; HUSKY
   6831  8fc4				  -	      .byte	%11111110	; HUSKY
   6832  8fc4				  -	      .byte	%01111110	; HUSKY
   6833  8fc4				  -
   6834  8fc4				  -			;byte %00000000 ; HUSKY
   6835  8fc4				  -
   6836  8fc4				  -	      .byte	%00111000	; HUSKY
   6837  8fc4				  -	      .byte	%00111000	; HUSKY
   6838  8fc4				  -	      .byte	%00111000	; HUSKY
   6839  8fc4				  -	      .byte	%00111000	; HUSKY
   6840  8fc4				  -	      .byte	%00011100	; HUSKY
   6841  8fc4				  -	      .byte	%00001110	; HUSKY
   6842  8fc4				  -	      .byte	%11111110	; HUSKY
   6843  8fc4				  -	      .byte	%11111110	; HUSKY
   6844  8fc4				  -
   6845  8fc4				  -			;byte %00000000 ; HUSKY
   6846  8fc4				  -
   6847  8fc4				  -	      .byte	%01111100	; HUSKY
   6848  8fc4				  -	      .byte	%11111110	; HUSKY
   6849  8fc4				  -	      .byte	%11101110	; HUSKY
   6850  8fc4				  -	      .byte	%11111110	; HUSKY
   6851  8fc4				  -	      .byte	%01111100	; HUSKY
   6852  8fc4				  -	      .byte	%11101110	; HUSKY
   6853  8fc4				  -	      .byte	%11111110	; HUSKY
   6854  8fc4				  -	      .byte	%01111100	; HUSKY
   6855  8fc4				  -
   6856  8fc4				  -			;byte %00000000 ; HUSKY
   6857  8fc4				  -
   6858  8fc4				  -	      .byte	%11111100	; HUSKY
   6859  8fc4				  -	      .byte	%11111110	; HUSKY
   6860  8fc4				  -	      .byte	%00001110	; HUSKY
   6861  8fc4				  -	      .byte	%01111110	; HUSKY
   6862  8fc4				  -	      .byte	%11111110	; HUSKY
   6863  8fc4				  -	      .byte	%11101110	; HUSKY
   6864  8fc4				  -	      .byte	%11111110	; HUSKY
   6865  8fc4				  -	      .byte	%01111100	; HUSKY
   6866  8fc4				  -
   6867  8fc4				  -	      ifconst	fontcharsHEX
   6868  8fc4				  -LENHEX     =	48
   6869  8fc4				  -
   6870  8fc4				  -			;byte %00000000 ; HUSKY
   6871  8fc4				  -
   6872  8fc4				  -	      .byte	%11101110	; HUSKY
   6873  8fc4				  -	      .byte	%11101110	; HUSKY
   6874  8fc4				  -	      .byte	%11111110	; HUSKY
   6875  8fc4				  -	      .byte	%11111110	; HUSKY
   6876  8fc4				  -	      .byte	%11101110	; HUSKY
   6877  8fc4				  -	      .byte	%11111110	; HUSKY
   6878  8fc4				  -	      .byte	%01111100	; HUSKY
   6879  8fc4				  -	      .byte	%00111000	; HUSKY
   6880  8fc4				  -
   6881  8fc4				  -			;byte %00000000 ; HUSKY
   6882  8fc4				  -
   6883  8fc4				  -	      .byte	%11111100	; HUSKY
   6884  8fc4				  -	      .byte	%11111110	; HUSKY
   6885  8fc4				  -	      .byte	%11101110	; HUSKY
   6886  8fc4				  -	      .byte	%11111110	; HUSKY
   6887  8fc4				  -	      .byte	%11111100	; HUSKY
   6888  8fc4				  -	      .byte	%11101110	; HUSKY
   6889  8fc4				  -	      .byte	%11111110	; HUSKY
   6890  8fc4				  -	      .byte	%11111100	; HUSKY
   6891  8fc4				  -
   6892  8fc4				  -			;byte %00000000 ; HUSKY
   6893  8fc4				  -
   6894  8fc4				  -	      .byte	%01111110	; HUSKY
   6895  8fc4				  -	      .byte	%11111110	; HUSKY
   6896  8fc4				  -	      .byte	%11110000	; HUSKY
   6897  8fc4				  -	      .byte	%11100000	; HUSKY
   6898  8fc4				  -	      .byte	%11100000	; HUSKY
   6899  8fc4				  -	      .byte	%11110000	; HUSKY
   6900  8fc4				  -	      .byte	%11111110	; HUSKY
   6901  8fc4				  -	      .byte	%01111110	; HUSKY
   6902  8fc4				  -
   6903  8fc4				  -			;byte %00000000 ; HUSKY
   6904  8fc4				  -
   6905  8fc4				  -	      .byte	%11111000	; HUSKY
   6906  8fc4				  -	      .byte	%11111100	; HUSKY
   6907  8fc4				  -	      .byte	%11111110	; HUSKY
   6908  8fc4				  -	      .byte	%11101110	; HUSKY
   6909  8fc4				  -	      .byte	%11101110	; HUSKY
   6910  8fc4				  -	      .byte	%11111110	; HUSKY
   6911  8fc4				  -	      .byte	%11111100	; HUSKY
   6912  8fc4				  -	      .byte	%11111000	; HUSKY
   6913  8fc4				  -
   6914  8fc4				  -			;byte %00000000 ; HUSKY
   6915  8fc4				  -
   6916  8fc4				  -	      .byte	%11111110	; HUSKY
   6917  8fc4				  -	      .byte	%11111110	; HUSKY
   6918  8fc4				  -	      .byte	%11100000	; HUSKY
   6919  8fc4				  -	      .byte	%11111110	; HUSKY
   6920  8fc4				  -	      .byte	%11111110	; HUSKY
   6921  8fc4				  -	      .byte	%11100000	; HUSKY
   6922  8fc4				  -	      .byte	%11111110	; HUSKY
   6923  8fc4				  -	      .byte	%11111110	; HUSKY
   6924  8fc4				  -
   6925  8fc4				  -			;byte %00000000 ; HUSKY
   6926  8fc4				  -
   6927  8fc4				  -	      .byte	%11100000	; HUSKY
   6928  8fc4				  -	      .byte	%11100000	; HUSKY
   6929  8fc4				  -	      .byte	%11100000	; HUSKY
   6930  8fc4				  -	      .byte	%11111110	; HUSKY
   6931  8fc4				  -	      .byte	%11111110	; HUSKY
   6932  8fc4				  -	      .byte	%11100000	; HUSKY
   6933  8fc4				  -	      .byte	%11111110	; HUSKY
   6934  8fc4				  -	      .byte	%11111110	; HUSKY
   6935  8fc4				  -
   6936  8fc4				  -			;byte %00000000 ; HUSKY
   6937  8fc4				  -			;byte %00000000 ; HUSKY
   6938  8fc4				  -			;byte %00000000 ; HUSKY
   6939  8fc4				  -			;byte %00000000 ; HUSKY
   6940  8fc4				  -
   6941  8fc4				  -	      else
   6942  8fc4				  -LENHEX     =	0
   6943  8fc4				  -	      endif		; fontcharsHEX 
   6944  8fc4					      endif		; HUSKY
   6945  8fc4
   6946  8fc4
   6947  8fc4				  -	      if	fontstyle == SNAKE
   6948  8fc4				  -
   6949  8fc4				  -LENDEC     =	80
   6950  8fc4				  -
   6951  8fc4				  -			;byte %00000000 ; SNAKE
   6952  8fc4				  -
   6953  8fc4				  -	      .byte	%01111110	; SNAKE
   6954  8fc4				  -	      .byte	%01000010	; SNAKE
   6955  8fc4				  -	      .byte	%01000010	; SNAKE
   6956  8fc4				  -	      .byte	%01000010	; SNAKE
   6957  8fc4				  -	      .byte	%01000010	; SNAKE
   6958  8fc4				  -	      .byte	%01000010	; SNAKE
   6959  8fc4				  -	      .byte	%01000010	; SNAKE
   6960  8fc4				  -	      .byte	%01111110	; SNAKE
   6961  8fc4				  -
   6962  8fc4				  -			;byte %00000000 ; SNAKE
   6963  8fc4				  -
   6964  8fc4				  -	      .byte	%00111000	; SNAKE
   6965  8fc4				  -	      .byte	%00101000	; SNAKE
   6966  8fc4				  -	      .byte	%00001000	; SNAKE
   6967  8fc4				  -	      .byte	%00001000	; SNAKE
   6968  8fc4				  -	      .byte	%00001000	; SNAKE
   6969  8fc4				  -	      .byte	%00001000	; SNAKE
   6970  8fc4				  -	      .byte	%00001000	; SNAKE
   6971  8fc4				  -	      .byte	%00111000	; SNAKE
   6972  8fc4				  -
   6973  8fc4				  -			;byte %00000000 ; SNAKE
   6974  8fc4				  -
   6975  8fc4				  -	      .byte	%01111110	; SNAKE
   6976  8fc4				  -	      .byte	%01000010	; SNAKE
   6977  8fc4				  -	      .byte	%01000110	; SNAKE
   6978  8fc4				  -	      .byte	%01000000	; SNAKE
   6979  8fc4				  -	      .byte	%01111110	; SNAKE
   6980  8fc4				  -	      .byte	%00000010	; SNAKE
   6981  8fc4				  -	      .byte	%01000010	; SNAKE
   6982  8fc4				  -	      .byte	%01111110	; SNAKE
   6983  8fc4				  -
   6984  8fc4				  -			;byte %00000000 ; SNAKE
   6985  8fc4				  -
   6986  8fc4				  -	      .byte	%01111110	; SNAKE
   6987  8fc4				  -	      .byte	%01000010	; SNAKE
   6988  8fc4				  -	      .byte	%01100010	; SNAKE
   6989  8fc4				  -	      .byte	%00000010	; SNAKE
   6990  8fc4				  -	      .byte	%01111110	; SNAKE
   6991  8fc4				  -	      .byte	%00000010	; SNAKE
   6992  8fc4				  -	      .byte	%01000010	; SNAKE
   6993  8fc4				  -	      .byte	%01111110	; SNAKE
   6994  8fc4				  -
   6995  8fc4				  -			;byte %00000000 ; SNAKE
   6996  8fc4				  -
   6997  8fc4				  -	      .byte	%00001110	; SNAKE
   6998  8fc4				  -	      .byte	%00001010	; SNAKE
   6999  8fc4				  -	      .byte	%00000010	; SNAKE
   7000  8fc4				  -	      .byte	%01111110	; SNAKE
   7001  8fc4				  -	      .byte	%01000010	; SNAKE
   7002  8fc4				  -	      .byte	%01000010	; SNAKE
   7003  8fc4				  -	      .byte	%01000010	; SNAKE
   7004  8fc4				  -	      .byte	%01100110	; SNAKE
   7005  8fc4				  -
   7006  8fc4				  -			;byte %00000000 ; SNAKE
   7007  8fc4				  -
   7008  8fc4				  -	      .byte	%01111110	; SNAKE
   7009  8fc4				  -	      .byte	%01000010	; SNAKE
   7010  8fc4				  -	      .byte	%01100010	; SNAKE
   7011  8fc4				  -	      .byte	%00000010	; SNAKE
   7012  8fc4				  -	      .byte	%01111110	; SNAKE
   7013  8fc4				  -	      .byte	%01000000	; SNAKE
   7014  8fc4				  -	      .byte	%01000010	; SNAKE
   7015  8fc4				  -	      .byte	%01111110	; SNAKE
   7016  8fc4				  -
   7017  8fc4				  -			;byte %00000000 ; SNAKE
   7018  8fc4				  -
   7019  8fc4				  -	      .byte	%01111110	; SNAKE
   7020  8fc4				  -	      .byte	%01000010	; SNAKE
   7021  8fc4				  -	      .byte	%01000010	; SNAKE
   7022  8fc4				  -	      .byte	%01111110	; SNAKE
   7023  8fc4				  -	      .byte	%01000000	; SNAKE
   7024  8fc4				  -	      .byte	%01000110	; SNAKE
   7025  8fc4				  -	      .byte	%01000010	; SNAKE
   7026  8fc4				  -	      .byte	%01111110	; SNAKE
   7027  8fc4				  -
   7028  8fc4				  -			;byte %00000000 ; SNAKE
   7029  8fc4				  -
   7030  8fc4				  -	      .byte	%00000110	; SNAKE
   7031  8fc4				  -	      .byte	%00000010	; SNAKE
   7032  8fc4				  -	      .byte	%00000010	; SNAKE
   7033  8fc4				  -	      .byte	%00000010	; SNAKE
   7034  8fc4				  -	      .byte	%00000010	; SNAKE
   7035  8fc4				  -	      .byte	%01100010	; SNAKE
   7036  8fc4				  -	      .byte	%01000010	; SNAKE
   7037  8fc4				  -	      .byte	%01111110	; SNAKE
   7038  8fc4				  -
   7039  8fc4				  -			;byte %00000000 ; SNAKE
   7040  8fc4				  -
   7041  8fc4				  -	      .byte	%01111110	; SNAKE
   7042  8fc4				  -	      .byte	%01000010	; SNAKE
   7043  8fc4				  -	      .byte	%01000010	; SNAKE
   7044  8fc4				  -	      .byte	%01000010	; SNAKE
   7045  8fc4				  -	      .byte	%01111110	; SNAKE
   7046  8fc4				  -	      .byte	%01000010	; SNAKE
   7047  8fc4				  -	      .byte	%01000010	; SNAKE
   7048  8fc4				  -	      .byte	%01111110	; SNAKE
   7049  8fc4				  -
   7050  8fc4				  -			;byte %00000000 ; SNAKE
   7051  8fc4				  -
   7052  8fc4				  -	      .byte	%00001110	; SNAKE
   7053  8fc4				  -	      .byte	%00001010	; SNAKE
   7054  8fc4				  -	      .byte	%00000010	; SNAKE
   7055  8fc4				  -	      .byte	%00000010	; SNAKE
   7056  8fc4				  -	      .byte	%01111110	; SNAKE
   7057  8fc4				  -	      .byte	%01000010	; SNAKE
   7058  8fc4				  -	      .byte	%01000010	; SNAKE
   7059  8fc4				  -	      .byte	%01111110	; SNAKE
   7060  8fc4				  -
   7061  8fc4				  -
   7062  8fc4				  -	      ifconst	fontcharsHEX
   7063  8fc4				  -LENHEX     =	48
   7064  8fc4				  -
   7065  8fc4				  -			;byte %00000000 ; SNAKE
   7066  8fc4				  -
   7067  8fc4				  -	      .byte	%01100110	; SNAKE
   7068  8fc4				  -	      .byte	%01000010	; SNAKE
   7069  8fc4				  -	      .byte	%01000010	; SNAKE
   7070  8fc4				  -	      .byte	%01000010	; SNAKE
   7071  8fc4				  -	      .byte	%01111110	; SNAKE
   7072  8fc4				  -	      .byte	%01000010	; SNAKE
   7073  8fc4				  -	      .byte	%01000010	; SNAKE
   7074  8fc4				  -	      .byte	%01111110	; SNAKE
   7075  8fc4				  -
   7076  8fc4				  -			;byte %00000000 ; SNAKE
   7077  8fc4				  -
   7078  8fc4				  -	      .byte	%01111110	; SNAKE
   7079  8fc4				  -	      .byte	%01000010	; SNAKE
   7080  8fc4				  -	      .byte	%01000010	; SNAKE
   7081  8fc4				  -	      .byte	%01000110	; SNAKE
   7082  8fc4				  -	      .byte	%01111100	; SNAKE
   7083  8fc4				  -	      .byte	%01000110	; SNAKE
   7084  8fc4				  -	      .byte	%01000010	; SNAKE
   7085  8fc4				  -	      .byte	%01111110	; SNAKE
   7086  8fc4				  -
   7087  8fc4				  -			;byte %00000000 ; SNAKE
   7088  8fc4				  -
   7089  8fc4				  -	      .byte	%01111110	; SNAKE
   7090  8fc4				  -	      .byte	%01000010	; SNAKE
   7091  8fc4				  -	      .byte	%01000110	; SNAKE
   7092  8fc4				  -	      .byte	%01000000	; SNAKE
   7093  8fc4				  -	      .byte	%01000000	; SNAKE
   7094  8fc4				  -	      .byte	%01000110	; SNAKE
   7095  8fc4				  -	      .byte	%01000010	; SNAKE
   7096  8fc4				  -	      .byte	%01111110	; SNAKE
   7097  8fc4				  -
   7098  8fc4				  -			;byte %00000000 ; SNAKE
   7099  8fc4				  -
   7100  8fc4				  -	      .byte	%01111100	; SNAKE
   7101  8fc4				  -	      .byte	%01000110	; SNAKE
   7102  8fc4				  -	      .byte	%01000010	; SNAKE
   7103  8fc4				  -	      .byte	%01000010	; SNAKE
   7104  8fc4				  -	      .byte	%01000010	; SNAKE
   7105  8fc4				  -	      .byte	%01000010	; SNAKE
   7106  8fc4				  -	      .byte	%01000110	; SNAKE
   7107  8fc4				  -	      .byte	%01111100	; SNAKE
   7108  8fc4				  -
   7109  8fc4				  -			;byte %00000000 ; SNAKE
   7110  8fc4				  -
   7111  8fc4				  -	      .byte	%01111110	; SNAKE
   7112  8fc4				  -	      .byte	%01000010	; SNAKE
   7113  8fc4				  -	      .byte	%01000110	; SNAKE
   7114  8fc4				  -	      .byte	%01000000	; SNAKE
   7115  8fc4				  -	      .byte	%01111000	; SNAKE
   7116  8fc4				  -	      .byte	%01000000	; SNAKE
   7117  8fc4				  -	      .byte	%01000010	; SNAKE
   7118  8fc4				  -	      .byte	%01111110	; SNAKE
   7119  8fc4				  -
   7120  8fc4				  -			;byte %00000000 ; SNAKE
   7121  8fc4				  -
   7122  8fc4				  -	      .byte	%01000000	; SNAKE
   7123  8fc4				  -	      .byte	%01000000	; SNAKE
   7124  8fc4				  -	      .byte	%01000000	; SNAKE
   7125  8fc4				  -	      .byte	%01000000	; SNAKE
   7126  8fc4				  -	      .byte	%01111000	; SNAKE
   7127  8fc4				  -	      .byte	%01000000	; SNAKE
   7128  8fc4				  -	      .byte	%01000010	; SNAKE
   7129  8fc4				  -	      .byte	%01111110	; SNAKE
   7130  8fc4				  -
   7131  8fc4				  -			;byte %00000000 ; SNAKE
   7132  8fc4				  -			;byte %00000000 ; SNAKE
   7133  8fc4				  -			;byte %00000000 ; SNAKE
   7134  8fc4				  -			;byte %00000000 ; SNAKE
   7135  8fc4				  -
   7136  8fc4				  -	      else
   7137  8fc4				  -LENHEX     =	0
   7138  8fc4				  -	      endif		; fontcharsHEX 
   7139  8fc4					      endif		; SNAKE
   7140  8fc4
   7141  8fc4				  -	      if	fontstyle == PLOK
   7142  8fc4				  -LENDEC     =	80
   7143  8fc4				  -
   7144  8fc4				  -			;byte %00000000 ; PLOK
   7145  8fc4				  -
   7146  8fc4				  -	      .byte	%00000000	; PLOK
   7147  8fc4				  -	      .byte	%00111000	; PLOK
   7148  8fc4				  -	      .byte	%01100100	; PLOK
   7149  8fc4				  -	      .byte	%01100010	; PLOK
   7150  8fc4				  -	      .byte	%01100010	; PLOK
   7151  8fc4				  -	      .byte	%00110110	; PLOK
   7152  8fc4				  -	      .byte	%00011100	; PLOK
   7153  8fc4				  -	      .byte	%00000000	; PLOK
   7154  8fc4				  -
   7155  8fc4				  -			;byte %00000000 ; PLOK
   7156  8fc4				  -
   7157  8fc4				  -	      .byte	%00000000	; PLOK
   7158  8fc4				  -	      .byte	%00010000	; PLOK
   7159  8fc4				  -	      .byte	%00011100	; PLOK
   7160  8fc4				  -	      .byte	%00011100	; PLOK
   7161  8fc4				  -	      .byte	%00011000	; PLOK
   7162  8fc4				  -	      .byte	%00111000	; PLOK
   7163  8fc4				  -	      .byte	%00011000	; PLOK
   7164  8fc4				  -	      .byte	%00000000	; PLOK
   7165  8fc4				  -
   7166  8fc4				  -			;byte %00000000 ; PLOK
   7167  8fc4				  -
   7168  8fc4				  -	      .byte	%00000000	; PLOK
   7169  8fc4				  -	      .byte	%00001110	; PLOK
   7170  8fc4				  -	      .byte	%01111110	; PLOK
   7171  8fc4				  -	      .byte	%00011000	; PLOK
   7172  8fc4				  -	      .byte	%00001100	; PLOK
   7173  8fc4				  -	      .byte	%00000110	; PLOK
   7174  8fc4				  -	      .byte	%00111100	; PLOK
   7175  8fc4				  -	      .byte	%00000000	; PLOK
   7176  8fc4				  -
   7177  8fc4				  -			;byte %00000000 ; PLOK
   7178  8fc4				  -
   7179  8fc4				  -	      .byte	%00000000	; PLOK
   7180  8fc4				  -	      .byte	%00111100	; PLOK
   7181  8fc4				  -	      .byte	%01101110	; PLOK
   7182  8fc4				  -	      .byte	%00001110	; PLOK
   7183  8fc4				  -	      .byte	%00011100	; PLOK
   7184  8fc4				  -	      .byte	%00000110	; PLOK
   7185  8fc4				  -	      .byte	%01111100	; PLOK
   7186  8fc4				  -	      .byte	%00000000	; PLOK
   7187  8fc4				  -
   7188  8fc4				  -			;byte %00000000 ; PLOK
   7189  8fc4				  -
   7190  8fc4				  -	      .byte	%00000000	; PLOK
   7191  8fc4				  -	      .byte	%00011000	; PLOK
   7192  8fc4				  -	      .byte	%01111110	; PLOK
   7193  8fc4				  -	      .byte	%01101100	; PLOK
   7194  8fc4				  -	      .byte	%00100100	; PLOK
   7195  8fc4				  -	      .byte	%00110000	; PLOK
   7196  8fc4				  -	      .byte	%00110000	; PLOK
   7197  8fc4				  -	      .byte	%00000000	; PLOK
   7198  8fc4				  -
   7199  8fc4				  -			;byte %00000000 ; PLOK
   7200  8fc4				  -
   7201  8fc4				  -	      .byte	%00000000	; PLOK
   7202  8fc4				  -	      .byte	%00111100	; PLOK
   7203  8fc4				  -	      .byte	%01001110	; PLOK
   7204  8fc4				  -	      .byte	%00011100	; PLOK
   7205  8fc4				  -	      .byte	%01100000	; PLOK
   7206  8fc4				  -	      .byte	%01111100	; PLOK
   7207  8fc4				  -	      .byte	%00011100	; PLOK
   7208  8fc4				  -	      .byte	%00000000	; PLOK
   7209  8fc4				  -
   7210  8fc4				  -			;byte %00000000 ; PLOK
   7211  8fc4				  -
   7212  8fc4				  -	      .byte	%00000000	; PLOK
   7213  8fc4				  -	      .byte	%00111100	; PLOK
   7214  8fc4				  -	      .byte	%01000110	; PLOK
   7215  8fc4				  -	      .byte	%01101100	; PLOK
   7216  8fc4				  -	      .byte	%01110000	; PLOK
   7217  8fc4				  -	      .byte	%00111000	; PLOK
   7218  8fc4				  -	      .byte	%00010000	; PLOK
   7219  8fc4				  -	      .byte	%00000000	; PLOK
   7220  8fc4				  -
   7221  8fc4				  -			;byte %00000000 ; PLOK
   7222  8fc4				  -
   7223  8fc4				  -	      .byte	%00000000	; PLOK
   7224  8fc4				  -	      .byte	%00111100	; PLOK
   7225  8fc4				  -	      .byte	%00011100	; PLOK
   7226  8fc4				  -	      .byte	%00001100	; PLOK
   7227  8fc4				  -	      .byte	%00000110	; PLOK
   7228  8fc4				  -	      .byte	%01111110	; PLOK
   7229  8fc4				  -	      .byte	%00110000	; PLOK
   7230  8fc4				  -	      .byte	%00000000	; PLOK
   7231  8fc4				  -
   7232  8fc4				  -			;byte %00000000 ; PLOK
   7233  8fc4				  -
   7234  8fc4				  -	      .byte	%00000000	; PLOK
   7235  8fc4				  -	      .byte	%00111100	; PLOK
   7236  8fc4				  -	      .byte	%01001110	; PLOK
   7237  8fc4				  -	      .byte	%01101110	; PLOK
   7238  8fc4				  -	      .byte	%00111100	; PLOK
   7239  8fc4				  -	      .byte	%01100100	; PLOK
   7240  8fc4				  -	      .byte	%00111000	; PLOK
   7241  8fc4				  -	      .byte	%00000000	; PLOK
   7242  8fc4				  -
   7243  8fc4				  -			;byte %00000000 ; PLOK
   7244  8fc4				  -
   7245  8fc4				  -	      .byte	%00000000	; PLOK
   7246  8fc4				  -	      .byte	%00011000	; PLOK
   7247  8fc4				  -	      .byte	%00001100	; PLOK
   7248  8fc4				  -	      .byte	%00011100	; PLOK
   7249  8fc4				  -	      .byte	%00100110	; PLOK
   7250  8fc4				  -	      .byte	%01001110	; PLOK
   7251  8fc4				  -	      .byte	%00111100	; PLOK
   7252  8fc4				  -	      .byte	%00000000	; PLOK
   7253  8fc4				  -
   7254  8fc4				  -	      ifconst	fontcharsHEX
   7255  8fc4				  -LENHEX     =	48
   7256  8fc4				  -
   7257  8fc4				  -			;byte %00000000 ; PLOK
   7258  8fc4				  -
   7259  8fc4				  -	      .byte	%00000000	; PLOK
   7260  8fc4				  -	      .byte	%01100010	; PLOK
   7261  8fc4				  -	      .byte	%01100110	; PLOK
   7262  8fc4				  -	      .byte	%01111110	; PLOK
   7263  8fc4				  -	      .byte	%00101100	; PLOK
   7264  8fc4				  -	      .byte	%00101000	; PLOK
   7265  8fc4				  -	      .byte	%00110000	; PLOK
   7266  8fc4				  -	      .byte	%00000000	; PLOK
   7267  8fc4				  -
   7268  8fc4				  -			;byte %00000000 ; PLOK
   7269  8fc4				  -
   7270  8fc4				  -	      .byte	%00000000	; PLOK
   7271  8fc4				  -	      .byte	%01111100	; PLOK
   7272  8fc4				  -	      .byte	%00110010	; PLOK
   7273  8fc4				  -	      .byte	%00110110	; PLOK
   7274  8fc4				  -	      .byte	%00111100	; PLOK
   7275  8fc4				  -	      .byte	%00110110	; PLOK
   7276  8fc4				  -	      .byte	%01111100	; PLOK
   7277  8fc4				  -	      .byte	%00000000	; PLOK
   7278  8fc4				  -
   7279  8fc4				  -			;byte %00000000 ; PLOK
   7280  8fc4				  -
   7281  8fc4				  -	      .byte	%00000000	; PLOK
   7282  8fc4				  -	      .byte	%00111100	; PLOK
   7283  8fc4				  -	      .byte	%01100110	; PLOK
   7284  8fc4				  -	      .byte	%01100000	; PLOK
   7285  8fc4				  -	      .byte	%01100100	; PLOK
   7286  8fc4				  -	      .byte	%00101110	; PLOK
   7287  8fc4				  -	      .byte	%00011100	; PLOK
   7288  8fc4				  -	      .byte	%00000000	; PLOK
   7289  8fc4				  -
   7290  8fc4				  -			;byte %00000000 ; PLOK
   7291  8fc4				  -
   7292  8fc4				  -	      .byte	%00000000	; PLOK
   7293  8fc4				  -	      .byte	%01111100	; PLOK
   7294  8fc4				  -	      .byte	%00110010	; PLOK
   7295  8fc4				  -	      .byte	%00110010	; PLOK
   7296  8fc4				  -	      .byte	%00110110	; PLOK
   7297  8fc4				  -	      .byte	%01111100	; PLOK
   7298  8fc4				  -	      .byte	%01111000	; PLOK
   7299  8fc4				  -	      .byte	%00000000	; PLOK
   7300  8fc4				  -
   7301  8fc4				  -			;byte %00000000 ; PLOK
   7302  8fc4				  -
   7303  8fc4				  -	      .byte	%00000000	; PLOK
   7304  8fc4				  -	      .byte	%01111110	; PLOK
   7305  8fc4				  -	      .byte	%00110000	; PLOK
   7306  8fc4				  -	      .byte	%00111000	; PLOK
   7307  8fc4				  -	      .byte	%00111100	; PLOK
   7308  8fc4				  -	      .byte	%00110000	; PLOK
   7309  8fc4				  -	      .byte	%01111110	; PLOK
   7310  8fc4				  -	      .byte	%00000000	; PLOK
   7311  8fc4				  -
   7312  8fc4				  -			;byte %00000000 ; PLOK
   7313  8fc4				  -
   7314  8fc4				  -	      .byte	%00000000	; PLOK
   7315  8fc4				  -	      .byte	%01100000	; PLOK
   7316  8fc4				  -	      .byte	%01100000	; PLOK
   7317  8fc4				  -	      .byte	%00111000	; PLOK
   7318  8fc4				  -	      .byte	%00100000	; PLOK
   7319  8fc4				  -	      .byte	%01111110	; PLOK
   7320  8fc4				  -	      .byte	%00011100	; PLOK
   7321  8fc4				  -	      .byte	%00000000	; PLOK
   7322  8fc4				  -
   7323  8fc4				  -			;byte %00000000 ; PLOK
   7324  8fc4				  -			;byte %00000000 ; PLOK
   7325  8fc4				  -			;byte %00000000 ; PLOK
   7326  8fc4				  -			;byte %00000000 ; PLOK
   7327  8fc4				  -
   7328  8fc4				  -
   7329  8fc4				  -	      else
   7330  8fc4				  -LENHEX     =	0
   7331  8fc4				  -	      endif		; fontcharsHEX
   7332  8fc4					      endif		; PLOK
   7333  8fc4
   7334  8fc4
   7335  8fc4
   7336  8fc4
   7337  8fc4				  -	      if	fontstyle == NOFONT
   7338  8fc4				  -LENDEC     =	0
   7339  8fc4				  -LENHEX     =	0
   7340  8fc4					      endif		; NOFONT
   7341  8fc4
   7342  8fc4
   7343  8fc4							; ### any characters that aren't font specific follow... 
   7344  8fc4
   7345  8fc4				  -	      ifconst	fontcharSPACE
   7346  8fc4				  -LENSPACE   =	8
   7347  8fc4				  -			;byte %00000000 ; SYMBOLS
   7348  8fc4				  -
   7349  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7350  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7351  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7352  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7353  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7354  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7355  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7356  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7357  8fc4				  -
   7358  8fc4				  -			;byte %00000000 ; SYMBOLS
   7359  8fc4					      else
   7360  8fc4		       00 00	   LENSPACE   =	0
   7361  8fc4					      endif		; fontcharSPACE
   7362  8fc4
   7363  8fc4				  -	      ifconst	fontcharDOLLAR
   7364  8fc4				  -LENDOLLAR  =	8
   7365  8fc4				  -			;byte %00000000 ; SYMBOLS
   7366  8fc4				  -
   7367  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7368  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7369  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7370  8fc4				  -	      .byte	%00010010	; SYMBOLS
   7371  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7372  8fc4				  -	      .byte	%10010000	; SYMBOLS
   7373  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7374  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7375  8fc4				  -
   7376  8fc4				  -			;byte %00000000 ; SYMBOLS
   7377  8fc4				  -
   7378  8fc4					      else
   7379  8fc4		       00 00	   LENDOLLAR  =	0
   7380  8fc4					      endif		; fontcharDOLLAR
   7381  8fc4
   7382  8fc4				  -	      ifconst	fontcharPOUND
   7383  8fc4				  -LENPOUND   =	8
   7384  8fc4				  -			;byte %00000000 ; SYMBOLS
   7385  8fc4				  -
   7386  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7387  8fc4				  -	      .byte	%01000000	; SYMBOLS
   7388  8fc4				  -	      .byte	%00100000	; SYMBOLS
   7389  8fc4				  -	      .byte	%00100000	; SYMBOLS
   7390  8fc4				  -	      .byte	%01111000	; SYMBOLS
   7391  8fc4				  -	      .byte	%00100000	; SYMBOLS
   7392  8fc4				  -	      .byte	%00100010	; SYMBOLS
   7393  8fc4				  -	      .byte	%00011100	; SYMBOLS
   7394  8fc4				  -
   7395  8fc4				  -			;byte %00000000 ; SYMBOLS
   7396  8fc4				  -
   7397  8fc4					      else
   7398  8fc4		       00 00	   LENPOUND   =	0
   7399  8fc4					      endif		; fontcharPOUND
   7400  8fc4
   7401  8fc4
   7402  8fc4				  -	      ifconst	fontcharMRHAPPY
   7403  8fc4				  -LENMRHAPPY =	8
   7404  8fc4				  -			;byte %00000000 ; SYMBOLS
   7405  8fc4				  -
   7406  8fc4				  -	      .byte	%00111100	; SYMBOLS
   7407  8fc4				  -	      .byte	%01100110	; SYMBOLS
   7408  8fc4				  -	      .byte	%01011010	; SYMBOLS
   7409  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7410  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7411  8fc4				  -	      .byte	%01011010	; SYMBOLS
   7412  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7413  8fc4				  -	      .byte	%00111100	; SYMBOLS
   7414  8fc4				  -
   7415  8fc4				  -			;byte %00000000 ; SYMBOLS
   7416  8fc4				  -
   7417  8fc4					      else
   7418  8fc4		       00 00	   LENMRHAPPY =	0
   7419  8fc4					      endif		; fontcharMRHAPPY
   7420  8fc4
   7421  8fc4				  -	      ifconst	fontcharMRSAD
   7422  8fc4				  -LENMRSAD   =	8
   7423  8fc4				  -			;byte %00000000 ; SYMBOLS
   7424  8fc4				  -
   7425  8fc4				  -	      .byte	%00111100	; SYMBOLS
   7426  8fc4				  -	      .byte	%01011010	; SYMBOLS
   7427  8fc4				  -	      .byte	%01100110	; SYMBOLS
   7428  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7429  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7430  8fc4				  -	      .byte	%01011010	; SYMBOLS
   7431  8fc4				  -	      .byte	%01111110	; SYMBOLS
   7432  8fc4				  -	      .byte	%00111100	; SYMBOLS
   7433  8fc4				  -
   7434  8fc4				  -			;byte %00000000 ; SYMBOLS
   7435  8fc4				  -
   7436  8fc4					      else
   7437  8fc4		       00 00	   LENMRSAD   =	0
   7438  8fc4					      endif		; fontcharMRSAD
   7439  8fc4
   7440  8fc4
   7441  8fc4				  -	      ifconst	fontcharCOPYRIGHT
   7442  8fc4				  -LENCOPYRIGHT =	8
   7443  8fc4				  -			;byte %00000000 ; SYMBOLS
   7444  8fc4				  -
   7445  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7446  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7447  8fc4				  -	      .byte	%01000100	; SYMBOLS
   7448  8fc4				  -	      .byte	%10111010	; SYMBOLS
   7449  8fc4				  -	      .byte	%10100010	; SYMBOLS
   7450  8fc4				  -	      .byte	%10111010	; SYMBOLS
   7451  8fc4				  -	      .byte	%01000100	; SYMBOLS
   7452  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7453  8fc4				  -
   7454  8fc4				  -			;byte %00000000 ; SYMBOLS
   7455  8fc4				  -
   7456  8fc4					      else
   7457  8fc4		       00 00	   LENCOPYRIGHT =	0
   7458  8fc4					      endif		; fontcharCOPYRIGHT
   7459  8fc4
   7460  8fc4
   7461  8fc4				  -	      ifconst	fontcharFUJI
   7462  8fc4				  -LENFUJI    =	16
   7463  8fc4				  -
   7464  8fc4				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   7465  8fc4				  -
   7466  8fc4				  -	      .byte	%01110000	; SYMBOLS
   7467  8fc4				  -	      .byte	%01111001	; SYMBOLS
   7468  8fc4				  -	      .byte	%00011101	; SYMBOLS
   7469  8fc4				  -	      .byte	%00001101	; SYMBOLS
   7470  8fc4				  -	      .byte	%00001101	; SYMBOLS
   7471  8fc4				  -	      .byte	%00001101	; SYMBOLS
   7472  8fc4				  -	      .byte	%00001101	; SYMBOLS
   7473  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7474  8fc4				  -
   7475  8fc4				  -			;byte %00000000 ; SYMBOLS
   7476  8fc4				  -
   7477  8fc4				  -	      .byte	%00001110	; SYMBOLS
   7478  8fc4				  -	      .byte	%10011110	; SYMBOLS
   7479  8fc4				  -	      .byte	%10111000	; SYMBOLS
   7480  8fc4				  -	      .byte	%10110000	; SYMBOLS
   7481  8fc4				  -	      .byte	%10110000	; SYMBOLS
   7482  8fc4				  -	      .byte	%10110000	; SYMBOLS
   7483  8fc4				  -	      .byte	%10110000	; SYMBOLS
   7484  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7485  8fc4				  -
   7486  8fc4				  -			;byte %00000000 ; SYMBOLS
   7487  8fc4				  -
   7488  8fc4					      else
   7489  8fc4		       00 00	   LENFUJI    =	0
   7490  8fc4					      endif		; fontcharFUJI
   7491  8fc4
   7492  8fc4
   7493  8fc4				  -	      ifconst	fontcharHEART
   7494  8fc4				  -LENHEART   =	8
   7495  8fc4				  -			;byte %00000000 ; SYMBOLS
   7496  8fc4				  -
   7497  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7498  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7499  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7500  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7501  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7502  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7503  8fc4				  -	      .byte	%11101110	; SYMBOLS
   7504  8fc4				  -	      .byte	%01000100	; SYMBOLS
   7505  8fc4				  -
   7506  8fc4				  -			;byte %00000000 ; SYMBOLS
   7507  8fc4				  -
   7508  8fc4					      else
   7509  8fc4		       00 00	   LENHEART   =	0
   7510  8fc4					      endif		; fontcharHEART
   7511  8fc4
   7512  8fc4				  -	      ifconst	fontcharDIAMOND
   7513  8fc4				  -LENDIAMOND =	8
   7514  8fc4				  -			;byte %00000000 ; SYMBOLS
   7515  8fc4				  -
   7516  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7517  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7518  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7519  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7520  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7521  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7522  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7523  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7524  8fc4				  -
   7525  8fc4				  -			;byte %00000000 ; SYMBOLS
   7526  8fc4				  -
   7527  8fc4					      else
   7528  8fc4		       00 00	   LENDIAMOND =	0
   7529  8fc4					      endif		; fontcharDIAMOND
   7530  8fc4
   7531  8fc4				  -	      ifconst	fontcharSPADE
   7532  8fc4				  -LENSPADE   =	8
   7533  8fc4				  -			;byte %00000000 ; SYMBOLS
   7534  8fc4				  -
   7535  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7536  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7537  8fc4				  -	      .byte	%01010100	; SYMBOLS
   7538  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7539  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7540  8fc4				  -	      .byte	%01111100	; SYMBOLS
   7541  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7542  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7543  8fc4				  -
   7544  8fc4				  -			;byte %00000000 ; SYMBOLS
   7545  8fc4				  -
   7546  8fc4					      else
   7547  8fc4		       00 00	   LENSPADE   =	0
   7548  8fc4					      endif		; fontcharSPADE
   7549  8fc4
   7550  8fc4				  -	      ifconst	fontcharCLUB
   7551  8fc4				  -LENCLUB    =	8
   7552  8fc4				  -			;byte %00000000 ; SYMBOLS
   7553  8fc4				  -
   7554  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7555  8fc4				  -	      .byte	%00010000	; SYMBOLS
   7556  8fc4				  -	      .byte	%11010110	; SYMBOLS
   7557  8fc4				  -	      .byte	%11111110	; SYMBOLS
   7558  8fc4				  -	      .byte	%11010110	; SYMBOLS
   7559  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7560  8fc4				  -	      .byte	%00111000	; SYMBOLS
   7561  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7562  8fc4				  -
   7563  8fc4				  -			;byte %00000000 ; SYMBOLS
   7564  8fc4				  -
   7565  8fc4					      else
   7566  8fc4		       00 00	   LENCLUB    =	0
   7567  8fc4					      endif		; fontcharCLUB
   7568  8fc4
   7569  8fc4
   7570  8fc4				  -	      ifconst	fontcharCOLON
   7571  8fc4				  -LENCOLON   =	8
   7572  8fc4				  -			;byte %00000000 ; SYMBOLS
   7573  8fc4				  -
   7574  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7575  8fc4				  -	      .byte	%00011000	; SYMBOLS
   7576  8fc4				  -	      .byte	%00011000	; SYMBOLS
   7577  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7578  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7579  8fc4				  -	      .byte	%00011000	; SYMBOLS
   7580  8fc4				  -	      .byte	%00011000	; SYMBOLS
   7581  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7582  8fc4				  -
   7583  8fc4				  -			;byte %00000000 ; SYMBOLS
   7584  8fc4				  -
   7585  8fc4					      else
   7586  8fc4		       00 00	   LENCOLON   =	0
   7587  8fc4					      endif		; fontcharCOLON
   7588  8fc4
   7589  8fc4
   7590  8fc4				  -	      ifconst	fontcharBLOCK
   7591  8fc4				  -LENBLOCK   =	8
   7592  8fc4				  -
   7593  8fc4				  -			;byte %00000000 ; SYMBOLS
   7594  8fc4				  -
   7595  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7596  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7597  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7598  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7599  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7600  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7601  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7602  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7603  8fc4				  -
   7604  8fc4				  -			;byte %00000000 ; SYMBOLS
   7605  8fc4				  -
   7606  8fc4					      else
   7607  8fc4		       00 00	   LENBLOCK   =	0
   7608  8fc4					      endif		; fontcharBLOCK
   7609  8fc4
   7610  8fc4				  -	      ifconst	fontcharUNDERLINE
   7611  8fc4				  -LENUNDERLINE =	8
   7612  8fc4				  -
   7613  8fc4				  -			;byte %00000000 ; SYMBOLS
   7614  8fc4				  -
   7615  8fc4				  -	      .byte	%11111111	; SYMBOLS
   7616  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7617  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7618  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7619  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7620  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7621  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7622  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7623  8fc4				  -
   7624  8fc4				  -			;byte %00000000 ; SYMBOLS
   7625  8fc4				  -
   7626  8fc4					      else
   7627  8fc4		       00 00	   LENUNDERLINE =	0
   7628  8fc4					      endif		; fontcharUNDERLINE
   7629  8fc4
   7630  8fc4				  -	      ifconst	fontcharARISIDE
   7631  8fc4				  -LENARISIDE =	8
   7632  8fc4				  -			;byte %00000000 ; SYMBOLS
   7633  8fc4				  -
   7634  8fc4				  -	      .byte	%00000000	; SYMBOLS
   7635  8fc4				  -	      .byte	%00101010	; SYMBOLS
   7636  8fc4				  -	      .byte	%00101010	; SYMBOLS
   7637  8fc4				  -	      .byte	%00101100	; SYMBOLS
   7638  8fc4				  -	      .byte	%01111111	; SYMBOLS
   7639  8fc4				  -	      .byte	%00110111	; SYMBOLS
   7640  8fc4				  -	      .byte	%00000010	; SYMBOLS
   7641  8fc4				  -	      .byte	%00000001	; SYMBOLS
   7642  8fc4				  -
   7643  8fc4				  -			;byte %00000000 ; SYMBOLS
   7644  8fc4				  -
   7645  8fc4					      else
   7646  8fc4		       00 00	   LENARISIDE =	0
   7647  8fc4					      endif		; fontcharARISIDE
   7648  8fc4
   7649  8fc4				  -	      ifconst	fontcharARIFACE
   7650  8fc4				  -LENARIFACE =	8
   7651  8fc4				  -			;byte %00000000 ; SYMBOLS
   7652  8fc4				  -
   7653  8fc4				  -	      .byte	%00001000	; SYMBOLS
   7654  8fc4				  -	      .byte	%00011100	; SYMBOLS
   7655  8fc4				  -	      .byte	%00111110	; SYMBOLS
   7656  8fc4				  -	      .byte	%00101010	; SYMBOLS
   7657  8fc4				  -	      .byte	%00011100	; SYMBOLS
   7658  8fc4				  -	      .byte	%01010100	; SYMBOLS
   7659  8fc4				  -	      .byte	%00100100	; SYMBOLS
   7660  8fc4				  -	      .byte	%00000010	; SYMBOLS
   7661  8fc4				  -
   7662  8fc4				  -			;byte %00000000 ; SYMBOLS
   7663  8fc4				  -
   7664  8fc4				  -
   7665  8fc4					      else
   7666  8fc4		       00 00	   LENARIFACE =	0
   7667  8fc4					      endif		; fontcharARIRACE
   7668  8fc4
   7669  8fc4							;byte %00000000 ; SYMBOLS
   7670  8fc4							;byte %00000000 ; SYMBOLS
   7671  8fc4							;byte %00000000 ; SYMBOLS
   7672  8fc4							;byte %00000000 ; SYMBOLS
   7673  8fc4
   7674  8fc4				   scoretableend
   7675  8fc4
   7676  8fc4				  -	      ifconst	ROM2k
   7677  8fc4				  -	      ORG	$F7FC
   7678  8fc4					      else
   7679  8fc4					      ifconst	bankswitch
   7680  8fc4				  -	      if	bankswitch == 8
   7681  8fc4				  -	      ORG	$2FF4-bscode_length
   7682  8fc4				  -	      RORG	$FFF4-bscode_length
   7683  8fc4					      endif
   7684  8fc4				  -	      if	bankswitch == 16
   7685  8fc4				  -	      ORG	$4FF4-bscode_length
   7686  8fc4				  -	      RORG	$FFF4-bscode_length
   7687  8fc4					      endif
   7688  8fc4					      if	bankswitch == 32
   7689  8fd4					      ORG	$8FF4-bscode_length
   7690  8fd4					      RORG	$FFF4-bscode_length
   7691  8fd4					      endif
   7692  8fd4				  -	      else
   7693  8fd4				  -	      ORG	$FFFC
   7694  8fd4					      endif
   7695  8fd4					      endif
   7696  8fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7697  8fd4
   7698  8fd4							; every bank has this stuff at the same place
   7699  8fd4							; this code can switch to/from any bank at any entry point
   7700  8fd4							; and can preserve register values
   7701  8fd4							; note: lines not starting with a space are not placed in all banks
   7702  8fd4							;
   7703  8fd4							; line below tells the compiler how long this is - do not remove
   7704  8fd4							;size=32
   7705  8fd4
   7706  8fd4				   begin_bscode
   7707  8fd4		       a2 ff		      ldx	#$ff
   7708  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
   7709  8fd6				  -	      stx	FASTFETCH
   7710  8fd6					      endif
   7711  8fd6		       9a		      txs
   7712  8fd7				  -	      if	bankswitch == 64
   7713  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7714  8fd7					      else
   7715  8fd7		       a9 f3		      lda	#>(start-1)
   7716  8fd9					      endif
   7717  8fd9		       48		      pha
   7718  8fda		       a9 59		      lda	#<(start-1)
   7719  8fdc		       48		      pha
   7720  8fdd
   7721  8fdd				   BS_return
   7722  8fdd		       48		      pha
   7723  8fde		       8a		      txa
   7724  8fdf		       48		      pha
   7725  8fe0		       ba		      tsx
   7726  8fe1
   7727  8fe1					      if	bankswitch != 64
   7728  8fe1		       b5 04		      lda	4,x	; get high byte of return address
   7729  8fe3
   7730  8fe3		       2a		      rol
   7731  8fe4		       2a		      rol
   7732  8fe5		       2a		      rol
   7733  8fe6		       2a		      rol
   7734  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7735  8fe9		       aa		      tax
   7736  8fea		       e8		      inx
   7737  8feb				  -	      else
   7738  8feb				  -	      lda	4,x	; get high byte of return address
   7739  8feb				  -	      tay
   7740  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7741  8feb				  -	      sta	4,x
   7742  8feb				  -	      tya
   7743  8feb				  -	      lsr
   7744  8feb				  -	      lsr
   7745  8feb				  -	      lsr
   7746  8feb				  -	      lsr
   7747  8feb				  -	      tax
   7748  8feb				  -	      inx
   7749  8feb					      endif
   7750  8feb
   7751  8feb				   BS_jsr
   7752  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   7753  8fee		       68		      pla
   7754  8fef		       aa		      tax
   7755  8ff0		       68		      pla
   7756  8ff1		       60		      rts
   7757  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7758  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7759  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7760  8ff2					      endif
   7761  8ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7762  8ff2
   7763  8ff2					      ifconst	bankswitch
   7764  8ff2				  -	      if	bankswitch == 8
   7765  8ff2				  -	      ORG	$2FFC
   7766  8ff2				  -	      RORG	$FFFC
   7767  8ff2					      endif
   7768  8ff2				  -	      if	bankswitch == 16
   7769  8ff2				  -	      ORG	$4FFC
   7770  8ff2				  -	      RORG	$FFFC
   7771  8ff2					      endif
   7772  8ff2					      if	bankswitch == 32
   7773  8ffc					      ORG	$8FFC
   7774  8ffc					      RORG	$FFFC
   7775  8ffc					      endif
   7776  8ffc				  -	      if	bankswitch == 64
   7777  8ffc				  -	      ORG	$10FF0
   7778  8ffc				  -	      RORG	$1FFF0
   7779  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   7780  8ffc				  -	      ORG	$10FF8
   7781  8ffc				  -	      RORG	$1FFF8
   7782  8ffc				  -	      ifconst	superchip
   7783  8ffc				  -	      .byte	"E","F","S","C"
   7784  8ffc				  -	      else
   7785  8ffc				  -	      .byte	"E","F","E","F"
   7786  8ffc				  -	      endif
   7787  8ffc				  -	      ORG	$10FFC
   7788  8ffc				  -	      RORG	$1FFFC
   7789  8ffc					      endif
   7790  8ffc				  -	      else
   7791  8ffc				  -	      ifconst	ROM2k
   7792  8ffc				  -	      ORG	$F7FC
   7793  8ffc				  -	      else
   7794  8ffc				  -	      ORG	$FFFC
   7795  8ffc				  -	      endif
   7796  8ffc					      endif
   7797  8ffc		       5a f3		      .word.w	(start & $ffff)
   7798  8ffe		       5a f3		      .word.w	(start & $ffff)
